var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.production.min.js"(exports2) {
    "use strict";
    var l2 = require_object_assign();
    var n2 = 60103;
    var p = 60106;
    exports2.Fragment = 60107;
    exports2.StrictMode = 60108;
    exports2.Profiler = 60114;
    var q = 60109;
    var r2 = 60110;
    var t2 = 60112;
    exports2.Suspense = 60113;
    var u2 = 60115;
    var v = 60116;
    if (typeof Symbol === "function" && Symbol.for) {
      w = Symbol.for;
      n2 = w("react.element");
      p = w("react.portal");
      exports2.Fragment = w("react.fragment");
      exports2.StrictMode = w("react.strict_mode");
      exports2.Profiler = w("react.profiler");
      q = w("react.provider");
      r2 = w("react.context");
      t2 = w("react.forward_ref");
      exports2.Suspense = w("react.suspense");
      u2 = w("react.memo");
      v = w("react.lazy");
    }
    var w;
    var x = typeof Symbol === "function" && Symbol.iterator;
    function y2(a2) {
      if (a2 === null || typeof a2 !== "object")
        return null;
      a2 = x && a2[x] || a2["@@iterator"];
      return typeof a2 === "function" ? a2 : null;
    }
    function z(a2) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var A = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var B = {};
    function C(a2, b2, c2) {
      this.props = a2;
      this.context = b2;
      this.refs = B;
      this.updater = c2 || A;
    }
    C.prototype.isReactComponent = {};
    C.prototype.setState = function(a2, b2) {
      if (typeof a2 !== "object" && typeof a2 !== "function" && a2 != null)
        throw Error(z(85));
      this.updater.enqueueSetState(this, a2, b2, "setState");
    };
    C.prototype.forceUpdate = function(a2) {
      this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
    };
    function D() {
    }
    D.prototype = C.prototype;
    function E(a2, b2, c2) {
      this.props = a2;
      this.context = b2;
      this.refs = B;
      this.updater = c2 || A;
    }
    var F = E.prototype = new D();
    F.constructor = E;
    l2(F, C.prototype);
    F.isPureReactComponent = true;
    var G = { current: null };
    var H = Object.prototype.hasOwnProperty;
    var I = { key: true, ref: true, __self: true, __source: true };
    function J(a2, b2, c2) {
      var e2, d = {}, k = null, h = null;
      if (b2 != null)
        for (e2 in b2.ref !== void 0 && (h = b2.ref), b2.key !== void 0 && (k = "" + b2.key), b2)
          H.call(b2, e2) && !I.hasOwnProperty(e2) && (d[e2] = b2[e2]);
      var g2 = arguments.length - 2;
      if (g2 === 1)
        d.children = c2;
      else if (1 < g2) {
        for (var f = Array(g2), m = 0; m < g2; m++)
          f[m] = arguments[m + 2];
        d.children = f;
      }
      if (a2 && a2.defaultProps)
        for (e2 in g2 = a2.defaultProps, g2)
          d[e2] === void 0 && (d[e2] = g2[e2]);
      return { $$typeof: n2, type: a2, key: k, ref: h, props: d, _owner: G.current };
    }
    function K(a2, b2) {
      return { $$typeof: n2, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
    }
    function L(a2) {
      return typeof a2 === "object" && a2 !== null && a2.$$typeof === n2;
    }
    function escape(a2) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a2.replace(/[=:]/g, function(a3) {
        return b2[a3];
      });
    }
    var M = /\/+/g;
    function N(a2, b2) {
      return typeof a2 === "object" && a2 !== null && a2.key != null ? escape("" + a2.key) : b2.toString(36);
    }
    function O(a2, b2, c2, e2, d) {
      var k = typeof a2;
      if (k === "undefined" || k === "boolean")
        a2 = null;
      var h = false;
      if (a2 === null)
        h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a2.$$typeof) {
              case n2:
              case p:
                h = true;
            }
        }
      if (h)
        return h = a2, d = d(h), a2 = e2 === "" ? "." + N(h, 0) : e2, Array.isArray(d) ? (c2 = "", a2 != null && (c2 = a2.replace(M, "$&/") + "/"), O(d, b2, c2, "", function(a3) {
          return a3;
        })) : d != null && (L(d) && (d = K(d, c2 + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a2)), b2.push(d)), 1;
      h = 0;
      e2 = e2 === "" ? "." : e2 + ":";
      if (Array.isArray(a2))
        for (var g2 = 0; g2 < a2.length; g2++) {
          k = a2[g2];
          var f = e2 + N(k, g2);
          h += O(k, b2, c2, f, d);
        }
      else if (f = y2(a2), typeof f === "function")
        for (a2 = f.call(a2), g2 = 0; !(k = a2.next()).done; )
          k = k.value, f = e2 + N(k, g2++), h += O(k, b2, c2, f, d);
      else if (k === "object")
        throw b2 = "" + a2, Error(z(31, b2 === "[object Object]" ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2));
      return h;
    }
    function P(a2, b2, c2) {
      if (a2 == null)
        return a2;
      var e2 = [], d = 0;
      O(a2, e2, "", "", function(a3) {
        return b2.call(c2, a3, d++);
      });
      return e2;
    }
    function Q(a2) {
      if (a2._status === -1) {
        var b2 = a2._result;
        b2 = b2();
        a2._status = 0;
        a2._result = b2;
        b2.then(function(b3) {
          a2._status === 0 && (b3 = b3.default, a2._status = 1, a2._result = b3);
        }, function(b3) {
          a2._status === 0 && (a2._status = 2, a2._result = b3);
        });
      }
      if (a2._status === 1)
        return a2._result;
      throw a2._result;
    }
    var R = { current: null };
    function S() {
      var a2 = R.current;
      if (a2 === null)
        throw Error(z(321));
      return a2;
    }
    var T = { ReactCurrentDispatcher: R, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G, IsSomeRendererActing: { current: false }, assign: l2 };
    exports2.Children = { map: P, forEach: function(a2, b2, c2) {
      P(a2, function() {
        b2.apply(this, arguments);
      }, c2);
    }, count: function(a2) {
      var b2 = 0;
      P(a2, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a2) {
      return P(a2, function(a3) {
        return a3;
      }) || [];
    }, only: function(a2) {
      if (!L(a2))
        throw Error(z(143));
      return a2;
    } };
    exports2.Component = C;
    exports2.PureComponent = E;
    exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
    exports2.cloneElement = function(a2, b2, c2) {
      if (a2 === null || a2 === void 0)
        throw Error(z(267, a2));
      var e2 = l2({}, a2.props), d = a2.key, k = a2.ref, h = a2._owner;
      if (b2 != null) {
        b2.ref !== void 0 && (k = b2.ref, h = G.current);
        b2.key !== void 0 && (d = "" + b2.key);
        if (a2.type && a2.type.defaultProps)
          var g2 = a2.type.defaultProps;
        for (f in b2)
          H.call(b2, f) && !I.hasOwnProperty(f) && (e2[f] = b2[f] === void 0 && g2 !== void 0 ? g2[f] : b2[f]);
      }
      var f = arguments.length - 2;
      if (f === 1)
        e2.children = c2;
      else if (1 < f) {
        g2 = Array(f);
        for (var m = 0; m < f; m++)
          g2[m] = arguments[m + 2];
        e2.children = g2;
      }
      return {
        $$typeof: n2,
        type: a2.type,
        key: d,
        ref: k,
        props: e2,
        _owner: h
      };
    };
    exports2.createContext = function(a2, b2) {
      b2 === void 0 && (b2 = null);
      a2 = { $$typeof: r2, _calculateChangedBits: b2, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null };
      a2.Provider = { $$typeof: q, _context: a2 };
      return a2.Consumer = a2;
    };
    exports2.createElement = J;
    exports2.createFactory = function(a2) {
      var b2 = J.bind(null, a2);
      b2.type = a2;
      return b2;
    };
    exports2.createRef = function() {
      return { current: null };
    };
    exports2.forwardRef = function(a2) {
      return { $$typeof: t2, render: a2 };
    };
    exports2.isValidElement = L;
    exports2.lazy = function(a2) {
      return { $$typeof: v, _payload: { _status: -1, _result: a2 }, _init: Q };
    };
    exports2.memo = function(a2, b2) {
      return { $$typeof: u2, type: a2, compare: b2 === void 0 ? null : b2 };
    };
    exports2.useCallback = function(a2, b2) {
      return S().useCallback(a2, b2);
    };
    exports2.useContext = function(a2, b2) {
      return S().useContext(a2, b2);
    };
    exports2.useDebugValue = function() {
    };
    exports2.useEffect = function(a2, b2) {
      return S().useEffect(a2, b2);
    };
    exports2.useImperativeHandle = function(a2, b2, c2) {
      return S().useImperativeHandle(a2, b2, c2);
    };
    exports2.useLayoutEffect = function(a2, b2) {
      return S().useLayoutEffect(a2, b2);
    };
    exports2.useMemo = function(a2, b2) {
      return S().useMemo(a2, b2);
    };
    exports2.useReducer = function(a2, b2, c2) {
      return S().useReducer(a2, b2, c2);
    };
    exports2.useRef = function(a2) {
      return S().useRef(a2);
    };
    exports2.useState = function(a2) {
      return S().useState(a2);
    };
    exports2.version = "17.0.2";
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/cjs/react.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var ReactVersion = "17.0.2";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports2.Fragment = 60107;
        exports2.StrictMode = 60108;
        exports2.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports2.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports2.Fragment = symbolFor("react.fragment");
          exports2.StrictMode = symbolFor("react.strict_mode");
          exports2.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports2.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports2.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports2.Profiler:
              return "Profiler";
            case exports2.StrictMode:
              return "StrictMode";
            case exports2.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref2, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref: ref2,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref2 = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref2 = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref2) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref2) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref2, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref2 = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref2 = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref2, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render2.displayName == null) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports2.Fragment || type === exports2.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports2.StrictMode || type === exports2.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer2(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback2(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref2, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref2, create, deps);
        }
        function useDebugValue2(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports2.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === exports2.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            new Map([[frozenObject, null]]);
            new Set([frozenObject]);
          } catch (e2) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.PureComponent = PureComponent;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.useCallback = useCallback2;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue2;
        exports2.useEffect = useEffect2;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useLayoutEffect = useLayoutEffect2;
        exports2.useMemo = useMemo2;
        exports2.useReducer = useReducer2;
        exports2.useRef = useRef2;
        exports2.useState = useState2;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// node_modules/.pnpm/react@17.0.2/node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/.pnpm/react@17.0.2/node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js"(exports2, module2) {
    (function() {
      var undefined2;
      var VERSION2 = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e2) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n2) {
          return shuffleSelf(copyArray(array), baseClamp(n2, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n2) {
          var length = array.length;
          if (!length) {
            return;
          }
          n2 += n2 < 0 ? length : 0;
          return isIndex(n2, length) ? array[n2] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n2) {
          var result2 = "";
          if (!string || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string += string;
            }
          } while (n2);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n2) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n2, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e2) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e2) {
            }
            try {
              return func + "";
            } catch (e2) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function dropRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n2) {
          return array && array.length ? baseNth(array, toInteger(n2)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n2, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n2, guard) {
          if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n2);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n2, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n2, guard) {
          n2 = guard ? undefined2 : n2;
          n2 = func && n2 == null ? func.length : n2;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
        }
        function before(n2, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n2 <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n2, guard) {
          if (guard ? isIterateeCall(string, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          return baseRepeat(toString(string), n2);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e2) {
            return isError(e2) ? e2 : new Error2(e2);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n2) {
          n2 = toInteger(n2);
          return baseRest(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n2) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION2;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined2 ? 1 : nativeMax(toInteger(n2), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports2);
  }
});

// node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js
var require_ansi_escapes = __commonJS({
  "node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js"(exports2, module2) {
    "use strict";
    var ansiEscapes = module2.exports;
    module2.exports.default = ansiEscapes;
    var ESC = "[";
    var OSC = "]";
    var BEL = "\x07";
    var SEP = ";";
    var isTerminalApp = process.env.TERM_PROGRAM === "Apple_Terminal";
    ansiEscapes.cursorTo = (x, y2) => {
      if (typeof x !== "number") {
        throw new TypeError("The `x` argument is required");
      }
      if (typeof y2 !== "number") {
        return ESC + (x + 1) + "G";
      }
      return ESC + (y2 + 1) + ";" + (x + 1) + "H";
    };
    ansiEscapes.cursorMove = (x, y2) => {
      if (typeof x !== "number") {
        throw new TypeError("The `x` argument is required");
      }
      let ret = "";
      if (x < 0) {
        ret += ESC + -x + "D";
      } else if (x > 0) {
        ret += ESC + x + "C";
      }
      if (y2 < 0) {
        ret += ESC + -y2 + "A";
      } else if (y2 > 0) {
        ret += ESC + y2 + "B";
      }
      return ret;
    };
    ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
    ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
    ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
    ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
    ansiEscapes.cursorLeft = ESC + "G";
    ansiEscapes.cursorSavePosition = isTerminalApp ? "7" : ESC + "s";
    ansiEscapes.cursorRestorePosition = isTerminalApp ? "8" : ESC + "u";
    ansiEscapes.cursorGetPosition = ESC + "6n";
    ansiEscapes.cursorNextLine = ESC + "E";
    ansiEscapes.cursorPrevLine = ESC + "F";
    ansiEscapes.cursorHide = ESC + "?25l";
    ansiEscapes.cursorShow = ESC + "?25h";
    ansiEscapes.eraseLines = (count) => {
      let clear = "";
      for (let i2 = 0; i2 < count; i2++) {
        clear += ansiEscapes.eraseLine + (i2 < count - 1 ? ansiEscapes.cursorUp() : "");
      }
      if (count) {
        clear += ansiEscapes.cursorLeft;
      }
      return clear;
    };
    ansiEscapes.eraseEndLine = ESC + "K";
    ansiEscapes.eraseStartLine = ESC + "1K";
    ansiEscapes.eraseLine = ESC + "2K";
    ansiEscapes.eraseDown = ESC + "J";
    ansiEscapes.eraseUp = ESC + "1J";
    ansiEscapes.eraseScreen = ESC + "2J";
    ansiEscapes.scrollUp = ESC + "S";
    ansiEscapes.scrollDown = ESC + "T";
    ansiEscapes.clearScreen = "c";
    ansiEscapes.clearTerminal = process.platform === "win32" ? `${ansiEscapes.eraseScreen}${ESC}0f` : `${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;
    ansiEscapes.beep = BEL;
    ansiEscapes.link = (text, url) => {
      return [
        OSC,
        "8",
        SEP,
        SEP,
        url,
        BEL,
        text,
        OSC,
        "8",
        SEP,
        SEP,
        BEL
      ].join("");
    };
    ansiEscapes.image = (buffer, options = {}) => {
      let ret = `${OSC}1337;File=inline=1`;
      if (options.width) {
        ret += `;width=${options.width}`;
      }
      if (options.height) {
        ret += `;height=${options.height}`;
      }
      if (options.preserveAspectRatio === false) {
        ret += ";preserveAspectRatio=0";
      }
      return ret + ":" + buffer.toString("base64") + BEL;
    };
    ansiEscapes.iTerm = {
      setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,
      annotation: (message, options = {}) => {
        let ret = `${OSC}1337;`;
        const hasX = typeof options.x !== "undefined";
        const hasY = typeof options.y !== "undefined";
        if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== "undefined")) {
          throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
        }
        message = message.replace(/\|/g, "");
        ret += options.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=";
        if (options.length > 0) {
          ret += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join("|");
        } else {
          ret += message;
        }
        return ret + BEL;
      }
    };
  }
});

// node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS({
  "node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = (to, from) => {
      for (const prop of Reflect.ownKeys(from)) {
        Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
      }
      return to;
    };
    module2.exports = mimicFn;
    module2.exports.default = mimicFn;
  }
});

// node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js
var require_onetime = __commonJS({
  "node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = require_mimic_fn();
    var calledFunctions = new WeakMap();
    var onetime = (function_, options = {}) => {
      if (typeof function_ !== "function") {
        throw new TypeError("Expected a function");
      }
      let returnValue;
      let callCount = 0;
      const functionName = function_.displayName || function_.name || "<anonymous>";
      const onetime2 = function(...arguments_) {
        calledFunctions.set(onetime2, ++callCount);
        if (callCount === 1) {
          returnValue = function_.apply(this, arguments_);
          function_ = null;
        } else if (options.throw === true) {
          throw new Error(`Function \`${functionName}\` can only be called once`);
        }
        return returnValue;
      };
      mimicFn(onetime2, function_);
      calledFunctions.set(onetime2, callCount);
      return onetime2;
    };
    module2.exports = onetime;
    module2.exports.default = onetime;
    module2.exports.callCount = (function_) => {
      if (!calledFunctions.has(function_)) {
        throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
      }
      return calledFunctions.get(function_);
    };
  }
});

// node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/signals.js
var require_signals = __commonJS({
  "node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/signals.js"(exports2, module2) {
    module2.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    }
    if (process.platform === "linux") {
      module2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
    }
  }
});

// node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/index.js
var require_signal_exit = __commonJS({
  "node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/index.js"(exports2, module2) {
    var assert = require("assert");
    var signals = require_signals();
    var isWin = /^win/i.test(process.platform);
    var EE = require("events");
    if (typeof EE !== "function") {
      EE = EE.EventEmitter;
    }
    var emitter;
    if (process.__signal_exit_emitter__) {
      emitter = process.__signal_exit_emitter__;
    } else {
      emitter = process.__signal_exit_emitter__ = new EE();
      emitter.count = 0;
      emitter.emitted = {};
    }
    if (!emitter.infinite) {
      emitter.setMaxListeners(Infinity);
      emitter.infinite = true;
    }
    module2.exports = function(cb, opts) {
      assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
      if (loaded === false) {
        load();
      }
      var ev = "exit";
      if (opts && opts.alwaysLast) {
        ev = "afterexit";
      }
      var remove = function() {
        emitter.removeListener(ev, cb);
        if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
          unload();
        }
      };
      emitter.on(ev, cb);
      return remove;
    };
    module2.exports.unload = unload;
    function unload() {
      if (!loaded) {
        return;
      }
      loaded = false;
      signals.forEach(function(sig) {
        try {
          process.removeListener(sig, sigListeners[sig]);
        } catch (er) {
        }
      });
      process.emit = originalProcessEmit;
      process.reallyExit = originalProcessReallyExit;
      emitter.count -= 1;
    }
    function emit(event, code, signal) {
      if (emitter.emitted[event]) {
        return;
      }
      emitter.emitted[event] = true;
      emitter.emit(event, code, signal);
    }
    var sigListeners = {};
    signals.forEach(function(sig) {
      sigListeners[sig] = function listener() {
        var listeners = process.listeners(sig);
        if (listeners.length === emitter.count) {
          unload();
          emit("exit", null, sig);
          emit("afterexit", null, sig);
          if (isWin && sig === "SIGHUP") {
            sig = "SIGINT";
          }
          process.kill(process.pid, sig);
        }
      };
    });
    module2.exports.signals = function() {
      return signals;
    };
    module2.exports.load = load;
    var loaded = false;
    function load() {
      if (loaded) {
        return;
      }
      loaded = true;
      emitter.count += 1;
      signals = signals.filter(function(sig) {
        try {
          process.on(sig, sigListeners[sig]);
          return true;
        } catch (er) {
          return false;
        }
      });
      process.emit = processEmit;
      process.reallyExit = processReallyExit;
    }
    var originalProcessReallyExit = process.reallyExit;
    function processReallyExit(code) {
      process.exitCode = code || 0;
      emit("exit", process.exitCode, null);
      emit("afterexit", process.exitCode, null);
      originalProcessReallyExit.call(process, process.exitCode);
    }
    var originalProcessEmit = process.emit;
    function processEmit(ev, arg) {
      if (ev === "exit") {
        if (arg !== void 0) {
          process.exitCode = arg;
        }
        var ret = originalProcessEmit.apply(this, arguments);
        emit("exit", process.exitCode, null);
        emit("afterexit", process.exitCode, null);
        return ret;
      } else {
        return originalProcessEmit.apply(this, arguments);
      }
    }
  }
});

// node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js
var require_restore_cursor = __commonJS({
  "node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js"(exports2, module2) {
    "use strict";
    var onetime = require_onetime();
    var signalExit = require_signal_exit();
    module2.exports = onetime(() => {
      signalExit(() => {
        process.stderr.write("[?25h");
      }, { alwaysLast: true });
    });
  }
});

// node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js
var require_cli_cursor = __commonJS({
  "node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js"(exports2) {
    "use strict";
    var restoreCursor = require_restore_cursor();
    var isHidden = false;
    exports2.show = (writableStream = process.stderr) => {
      if (!writableStream.isTTY) {
        return;
      }
      isHidden = false;
      writableStream.write("[?25h");
    };
    exports2.hide = (writableStream = process.stderr) => {
      if (!writableStream.isTTY) {
        return;
      }
      restoreCursor();
      isHidden = true;
      writableStream.write("[?25l");
    };
    exports2.toggle = (force, writableStream) => {
      if (force !== void 0) {
        isHidden = force;
      }
      if (isHidden) {
        exports2.show(writableStream);
      } else {
        exports2.hide(writableStream);
      }
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/log-update.js
var require_log_update = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/log-update.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ansi_escapes_1 = __importDefault(require_ansi_escapes());
    var cli_cursor_1 = __importDefault(require_cli_cursor());
    var create = (stream, { showCursor = false } = {}) => {
      let previousLineCount = 0;
      let previousOutput = "";
      let hasHiddenCursor = false;
      const render2 = (str) => {
        if (!showCursor && !hasHiddenCursor) {
          cli_cursor_1.default.hide();
          hasHiddenCursor = true;
        }
        const output = str + "\n";
        if (output === previousOutput) {
          return;
        }
        previousOutput = output;
        stream.write(ansi_escapes_1.default.eraseLines(previousLineCount) + output);
        previousLineCount = output.split("\n").length;
      };
      render2.clear = () => {
        stream.write(ansi_escapes_1.default.eraseLines(previousLineCount));
        previousOutput = "";
        previousLineCount = 0;
      };
      render2.done = () => {
        previousOutput = "";
        previousLineCount = 0;
        if (!showCursor) {
          cli_cursor_1.default.show();
          hasHiddenCursor = false;
        }
      };
      return render2;
    };
    exports2.default = { create };
  }
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json
var require_vendors = __commonJS({
  "node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json"(exports2, module2) {
    module2.exports = [
      {
        name: "AppVeyor",
        constant: "APPVEYOR",
        env: "APPVEYOR",
        pr: "APPVEYOR_PULL_REQUEST_NUMBER"
      },
      {
        name: "Azure Pipelines",
        constant: "AZURE_PIPELINES",
        env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
        pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
      },
      {
        name: "Bamboo",
        constant: "BAMBOO",
        env: "bamboo_planKey"
      },
      {
        name: "Bitbucket Pipelines",
        constant: "BITBUCKET",
        env: "BITBUCKET_COMMIT",
        pr: "BITBUCKET_PR_ID"
      },
      {
        name: "Bitrise",
        constant: "BITRISE",
        env: "BITRISE_IO",
        pr: "BITRISE_PULL_REQUEST"
      },
      {
        name: "Buddy",
        constant: "BUDDY",
        env: "BUDDY_WORKSPACE_ID",
        pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
      },
      {
        name: "Buildkite",
        constant: "BUILDKITE",
        env: "BUILDKITE",
        pr: { env: "BUILDKITE_PULL_REQUEST", ne: "false" }
      },
      {
        name: "CircleCI",
        constant: "CIRCLE",
        env: "CIRCLECI",
        pr: "CIRCLE_PULL_REQUEST"
      },
      {
        name: "Cirrus CI",
        constant: "CIRRUS",
        env: "CIRRUS_CI",
        pr: "CIRRUS_PR"
      },
      {
        name: "AWS CodeBuild",
        constant: "CODEBUILD",
        env: "CODEBUILD_BUILD_ARN"
      },
      {
        name: "Codeship",
        constant: "CODESHIP",
        env: { CI_NAME: "codeship" }
      },
      {
        name: "Drone",
        constant: "DRONE",
        env: "DRONE",
        pr: { DRONE_BUILD_EVENT: "pull_request" }
      },
      {
        name: "dsari",
        constant: "DSARI",
        env: "DSARI"
      },
      {
        name: "GitLab CI",
        constant: "GITLAB",
        env: "GITLAB_CI"
      },
      {
        name: "GoCD",
        constant: "GOCD",
        env: "GO_PIPELINE_LABEL"
      },
      {
        name: "Hudson",
        constant: "HUDSON",
        env: "HUDSON_URL"
      },
      {
        name: "Jenkins",
        constant: "JENKINS",
        env: ["JENKINS_URL", "BUILD_ID"],
        pr: { any: ["ghprbPullId", "CHANGE_ID"] }
      },
      {
        name: "Magnum CI",
        constant: "MAGNUM",
        env: "MAGNUM"
      },
      {
        name: "Netlify CI",
        constant: "NETLIFY",
        env: "NETLIFY_BUILD_BASE",
        pr: { env: "PULL_REQUEST", ne: "false" }
      },
      {
        name: "Sail CI",
        constant: "SAIL",
        env: "SAILCI",
        pr: "SAIL_PULL_REQUEST_NUMBER"
      },
      {
        name: "Semaphore",
        constant: "SEMAPHORE",
        env: "SEMAPHORE",
        pr: "PULL_REQUEST_NUMBER"
      },
      {
        name: "Shippable",
        constant: "SHIPPABLE",
        env: "SHIPPABLE",
        pr: { IS_PULL_REQUEST: "true" }
      },
      {
        name: "Solano CI",
        constant: "SOLANO",
        env: "TDDIUM",
        pr: "TDDIUM_PR_ID"
      },
      {
        name: "Strider CD",
        constant: "STRIDER",
        env: "STRIDER"
      },
      {
        name: "TaskCluster",
        constant: "TASKCLUSTER",
        env: ["TASK_ID", "RUN_ID"]
      },
      {
        name: "TeamCity",
        constant: "TEAMCITY",
        env: "TEAMCITY_VERSION"
      },
      {
        name: "Travis CI",
        constant: "TRAVIS",
        env: "TRAVIS",
        pr: { env: "TRAVIS_PULL_REQUEST", ne: "false" }
      }
    ];
  }
});

// node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js
var require_ci_info = __commonJS({
  "node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js"(exports2) {
    "use strict";
    var vendors = require_vendors();
    var env = process.env;
    Object.defineProperty(exports2, "_vendors", {
      value: vendors.map(function(v) {
        return v.constant;
      })
    });
    exports2.name = null;
    exports2.isPR = null;
    vendors.forEach(function(vendor) {
      var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      var isCI = envs.every(function(obj) {
        return checkEnv(obj);
      });
      exports2[vendor.constant] = isCI;
      if (isCI) {
        exports2.name = vendor.name;
        switch (typeof vendor.pr) {
          case "string":
            exports2.isPR = !!env[vendor.pr];
            break;
          case "object":
            if ("env" in vendor.pr) {
              exports2.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
            } else if ("any" in vendor.pr) {
              exports2.isPR = vendor.pr.any.some(function(key) {
                return !!env[key];
              });
            } else {
              exports2.isPR = checkEnv(vendor.pr);
            }
            break;
          default:
            exports2.isPR = null;
        }
      }
    });
    exports2.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports2.name || false);
    function checkEnv(obj) {
      if (typeof obj === "string")
        return !!env[obj];
      return Object.keys(obj).every(function(k) {
        return env[k] === obj[k];
      });
    }
  }
});

// node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js
var require_is_ci = __commonJS({
  "node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_ci_info().isCI;
  }
});

// node_modules/.pnpm/auto-bind@4.0.0/node_modules/auto-bind/index.js
var require_auto_bind = __commonJS({
  "node_modules/.pnpm/auto-bind@4.0.0/node_modules/auto-bind/index.js"(exports2, module2) {
    "use strict";
    var getAllProperties = (object) => {
      const properties = new Set();
      do {
        for (const key of Reflect.ownKeys(object)) {
          properties.add([object, key]);
        }
      } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
      return properties;
    };
    module2.exports = (self2, { include, exclude } = {}) => {
      const filter = (key) => {
        const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
        if (include) {
          return include.some(match);
        }
        if (exclude) {
          return !exclude.some(match);
        }
        return true;
      };
      for (const [object, key] of getAllProperties(self2.constructor.prototype)) {
        if (key === "constructor" || !filter(key)) {
          continue;
        }
        const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
        if (descriptor && typeof descriptor.value === "function") {
          self2[key] = self2[key].bind(self2);
        }
      }
      return self2;
    };
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.production.min.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var f;
    var g2;
    var h;
    var k;
    var l2;
    if (typeof window === "undefined" || typeof MessageChannel !== "function") {
      p = null, q = null, t2 = function() {
        if (p !== null)
          try {
            var a2 = exports2.unstable_now();
            p(true, a2);
            p = null;
          } catch (b2) {
            throw setTimeout(t2, 0), b2;
          }
      }, u2 = Date.now();
      exports2.unstable_now = function() {
        return Date.now() - u2;
      };
      f = function(a2) {
        p !== null ? setTimeout(f, 0, a2) : (p = a2, setTimeout(t2, 0));
      };
      g2 = function(a2, b2) {
        q = setTimeout(a2, b2);
      };
      h = function() {
        clearTimeout(q);
      };
      k = function() {
        return false;
      };
      l2 = exports2.unstable_forceFrameRate = function() {
      };
    } else {
      w = window.performance, x = window.Date, y2 = window.setTimeout, z = window.clearTimeout;
      if (typeof console !== "undefined") {
        A = window.cancelAnimationFrame;
        typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
        typeof A !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
      }
      if (typeof w === "object" && typeof w.now === "function")
        exports2.unstable_now = function() {
          return w.now();
        };
      else {
        B = x.now();
        exports2.unstable_now = function() {
          return x.now() - B;
        };
      }
      C = false, D = null, E = -1, F = 5, G = 0;
      k = function() {
        return exports2.unstable_now() >= G;
      };
      l2 = function() {
      };
      exports2.unstable_forceFrameRate = function(a2) {
        0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a2 ? Math.floor(1e3 / a2) : 5;
      };
      H = new MessageChannel(), I = H.port2;
      H.port1.onmessage = function() {
        if (D !== null) {
          var a2 = exports2.unstable_now();
          G = a2 + F;
          try {
            D(true, a2) ? I.postMessage(null) : (C = false, D = null);
          } catch (b2) {
            throw I.postMessage(null), b2;
          }
        } else
          C = false;
      };
      f = function(a2) {
        D = a2;
        C || (C = true, I.postMessage(null));
      };
      g2 = function(a2, b2) {
        E = y2(function() {
          a2(exports2.unstable_now());
        }, b2);
      };
      h = function() {
        z(E);
        E = -1;
      };
    }
    var p;
    var q;
    var t2;
    var u2;
    var w;
    var x;
    var y2;
    var z;
    var A;
    var B;
    var C;
    var D;
    var E;
    var F;
    var G;
    var H;
    var I;
    function J(a2, b2) {
      var c2 = a2.length;
      a2.push(b2);
      a:
        for (; ; ) {
          var d = Math.floor((c2 - 1) / 2), e2 = a2[d];
          if (e2 !== void 0 && 0 < K(e2, b2))
            a2[d] = b2, a2[c2] = e2, c2 = d;
          else
            break a;
        }
    }
    function L(a2) {
      a2 = a2[0];
      return a2 === void 0 ? null : a2;
    }
    function M(a2) {
      var b2 = a2[0];
      if (b2 !== void 0) {
        var c2 = a2.pop();
        if (c2 !== b2) {
          a2[0] = c2;
          a:
            for (var d = 0, e2 = a2.length; d < e2; ) {
              var m = 2 * (d + 1) - 1, n2 = a2[m], v = m + 1, r2 = a2[v];
              if (n2 !== void 0 && 0 > K(n2, c2))
                r2 !== void 0 && 0 > K(r2, n2) ? (a2[d] = r2, a2[v] = c2, d = v) : (a2[d] = n2, a2[m] = c2, d = m);
              else if (r2 !== void 0 && 0 > K(r2, c2))
                a2[d] = r2, a2[v] = c2, d = v;
              else
                break a;
            }
        }
        return b2;
      }
      return null;
    }
    function K(a2, b2) {
      var c2 = a2.sortIndex - b2.sortIndex;
      return c2 !== 0 ? c2 : a2.id - b2.id;
    }
    var N = [];
    var O = [];
    var P = 1;
    var Q = null;
    var R = 3;
    var S = false;
    var T = false;
    var U = false;
    function V(a2) {
      for (var b2 = L(O); b2 !== null; ) {
        if (b2.callback === null)
          M(O);
        else if (b2.startTime <= a2)
          M(O), b2.sortIndex = b2.expirationTime, J(N, b2);
        else
          break;
        b2 = L(O);
      }
    }
    function W(a2) {
      U = false;
      V(a2);
      if (!T)
        if (L(N) !== null)
          T = true, f(X);
        else {
          var b2 = L(O);
          b2 !== null && g2(W, b2.startTime - a2);
        }
    }
    function X(a2, b2) {
      T = false;
      U && (U = false, h());
      S = true;
      var c2 = R;
      try {
        V(b2);
        for (Q = L(N); Q !== null && (!(Q.expirationTime > b2) || a2 && !k()); ) {
          var d = Q.callback;
          if (d !== null) {
            Q.callback = null;
            R = Q.priorityLevel;
            var e2 = d(Q.expirationTime <= b2);
            b2 = exports2.unstable_now();
            typeof e2 === "function" ? Q.callback = e2 : Q === L(N) && M(N);
            V(b2);
          } else
            M(N);
          Q = L(N);
        }
        if (Q !== null)
          var m = true;
        else {
          var n2 = L(O);
          n2 !== null && g2(W, n2.startTime - b2);
          m = false;
        }
        return m;
      } finally {
        Q = null, R = c2, S = false;
      }
    }
    function Y(a2) {
      switch (a2) {
        case 1:
          return -1;
        case 2:
          return 250;
        case 5:
          return 1073741823;
        case 4:
          return 1e4;
        default:
          return 5e3;
      }
    }
    var Z = l2;
    exports2.unstable_ImmediatePriority = 1;
    exports2.unstable_UserBlockingPriority = 2;
    exports2.unstable_NormalPriority = 3;
    exports2.unstable_IdlePriority = 5;
    exports2.unstable_LowPriority = 4;
    exports2.unstable_runWithPriority = function(a2, b2) {
      switch (a2) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a2 = 3;
      }
      var c2 = R;
      R = a2;
      try {
        return b2();
      } finally {
        R = c2;
      }
    };
    exports2.unstable_next = function(a2) {
      switch (R) {
        case 1:
        case 2:
        case 3:
          var b2 = 3;
          break;
        default:
          b2 = R;
      }
      var c2 = R;
      R = b2;
      try {
        return a2();
      } finally {
        R = c2;
      }
    };
    exports2.unstable_scheduleCallback = function(a2, b2, c2) {
      var d = exports2.unstable_now();
      if (typeof c2 === "object" && c2 !== null) {
        var e2 = c2.delay;
        e2 = typeof e2 === "number" && 0 < e2 ? d + e2 : d;
        c2 = typeof c2.timeout === "number" ? c2.timeout : Y(a2);
      } else
        c2 = Y(a2), e2 = d;
      c2 = e2 + c2;
      a2 = { id: P++, callback: b2, priorityLevel: a2, startTime: e2, expirationTime: c2, sortIndex: -1 };
      e2 > d ? (a2.sortIndex = e2, J(O, a2), L(N) === null && a2 === L(O) && (U ? h() : U = true, g2(W, e2 - d))) : (a2.sortIndex = c2, J(N, a2), T || S || (T = true, f(X)));
      return a2;
    };
    exports2.unstable_cancelCallback = function(a2) {
      a2.callback = null;
    };
    exports2.unstable_wrapCallback = function(a2) {
      var b2 = R;
      return function() {
        var c2 = R;
        R = b2;
        try {
          return a2.apply(this, arguments);
        } finally {
          R = c2;
        }
      };
    };
    exports2.unstable_getCurrentPriorityLevel = function() {
      return R;
    };
    exports2.unstable_shouldYield = function() {
      var a2 = exports2.unstable_now();
      V(a2);
      var b2 = L(N);
      return b2 !== Q && Q !== null && b2 !== null && b2.callback !== null && b2.startTime <= a2 && b2.expirationTime < Q.expirationTime || k();
    };
    exports2.unstable_requestPaint = Z;
    exports2.unstable_continueExecution = function() {
      T || S || (T = true, f(X));
    };
    exports2.unstable_pauseExecution = function() {
    };
    exports2.unstable_getFirstCallbackNode = function() {
      return L(N);
    };
    exports2.unstable_Profiling = null;
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var enableSchedulerDebugging = false;
        var enableIsInputPending = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var shouldYieldToHost;
        var requestPaint;
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports2.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e2) {
                setTimeout(_flushCallback, 0);
                throw e2;
              }
            }
          };
          var initialTime = Date.now();
          exports2.unstable_now = function() {
            return Date.now() - initialTime;
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          shouldYieldToHost = function() {
            return false;
          };
          requestPaint = exports2.unstable_forceFrameRate = function() {
          };
        } else {
          var performance2 = window.performance;
          var _Date = window.Date;
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame2 = window.requestAnimationFrame;
            var cancelAnimationFrame2 = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame2 !== "function") {
              console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
            if (typeof cancelAnimationFrame2 !== "function") {
              console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          if (typeof performance2 === "object" && typeof performance2.now === "function") {
            exports2.unstable_now = function() {
              return performance2.now();
            };
          } else {
            var _initialTime = _Date.now();
            exports2.unstable_now = function() {
              return _Date.now() - _initialTime;
            };
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          var maxYieldInterval = 300;
          var needsPaint = false;
          if (enableIsInputPending && navigator !== void 0 && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0) {
            var scheduling = navigator.scheduling;
            shouldYieldToHost = function() {
              var currentTime = exports2.unstable_now();
              if (currentTime >= deadline) {
                if (needsPaint || scheduling.isInputPending()) {
                  return true;
                }
                return currentTime >= maxYieldInterval;
              } else {
                return false;
              }
            };
            requestPaint = function() {
              needsPaint = true;
            };
          } else {
            shouldYieldToHost = function() {
              return exports2.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports2.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
            needsPaint = false;
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i2) {
          var index = i2;
          while (true) {
            var parentIndex = Math.floor((index - 1) / 2);
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index = i2;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = enableProfiling ? typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null : null;
        var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        if (enableProfiling) {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console.error("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task2, ms) {
          if (enableProfiling) {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms * 1e3, task2.id, task2.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task2, ms) {
          if (enableProfiling) {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1e3, task2.id]);
            }
          }
        }
        function markTaskCanceled(task2, ms) {
          if (enableProfiling) {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1e3, task2.id]);
            }
          }
        }
        function markTaskErrored(task2, ms) {
          if (enableProfiling) {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1e3, task2.id]);
            }
          }
        }
        function markTaskRun(task2, ms) {
          if (enableProfiling) {
            runIdCounter++;
            profilingState[PRIORITY] = task2.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task2.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1e3, task2.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task2, ms) {
          if (enableProfiling) {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1e3, task2.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms) {
          if (enableProfiling) {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms) {
          if (enableProfiling) {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var isSchedulerPaused = false;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              if (enableProfiling) {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          if (enableProfiling) {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            if (enableProfiling) {
              var _currentTime = exports2.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (callback !== null) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                if (enableProfiling) {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function timeoutForPriorityLevel(priorityLevel) {
          switch (priorityLevel) {
            case ImmediatePriority:
              return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
              return USER_BLOCKING_PRIORITY;
            case IdlePriority:
              return IDLE_PRIORITY;
            case LowPriority:
              return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
              return NORMAL_PRIORITY_TIMEOUT;
          }
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime;
          var timeout;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
            timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
          } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          if (enableProfiling) {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (enableProfiling) {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
          isSchedulerPaused = true;
        }
        function unstable_continueExecution() {
          isSchedulerPaused = false;
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task2) {
          if (enableProfiling) {
            if (task2.isQueued) {
              var currentTime = exports2.unstable_now();
              markTaskCanceled(task2, currentTime);
              task2.isQueued = false;
            }
          }
          task2.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        function unstable_shouldYield() {
          var currentTime = exports2.unstable_now();
          advanceTimers(currentTime);
          var firstTask = peek(taskQueue);
          return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = enableProfiling ? {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        } : null;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_next = unstable_next;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_shouldYield = unstable_shouldYield;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_Profiling = unstable_Profiling;
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.production.min.js
var require_react_reconciler_production_min = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.production.min.js"(exports2, module2) {
    module2.exports = function $$$reconciler($$$hostConfig) {
      "use strict";
      var aa = require_object_assign(), ba = require_react(), m = require_scheduler();
      function n2(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var q = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      q.hasOwnProperty("ReactCurrentDispatcher") || (q.ReactCurrentDispatcher = { current: null });
      q.hasOwnProperty("ReactCurrentBatchConfig") || (q.ReactCurrentBatchConfig = { suspense: null });
      var u2 = typeof Symbol === "function" && Symbol.for, ca = u2 ? Symbol.for("react.element") : 60103, da = u2 ? Symbol.for("react.portal") : 60106, ea = u2 ? Symbol.for("react.fragment") : 60107, fa = u2 ? Symbol.for("react.strict_mode") : 60108, ha = u2 ? Symbol.for("react.profiler") : 60114, ia = u2 ? Symbol.for("react.provider") : 60109, ja = u2 ? Symbol.for("react.context") : 60110, ka = u2 ? Symbol.for("react.concurrent_mode") : 60111, la = u2 ? Symbol.for("react.forward_ref") : 60112, ma = u2 ? Symbol.for("react.suspense") : 60113, na = u2 ? Symbol.for("react.suspense_list") : 60120, oa = u2 ? Symbol.for("react.memo") : 60115, pa = u2 ? Symbol.for("react.lazy") : 60116;
      u2 && Symbol.for("react.fundamental");
      u2 && Symbol.for("react.responder");
      u2 && Symbol.for("react.scope");
      var qa = typeof Symbol === "function" && Symbol.iterator;
      function ra(a2) {
        if (a2 === null || typeof a2 !== "object")
          return null;
        a2 = qa && a2[qa] || a2["@@iterator"];
        return typeof a2 === "function" ? a2 : null;
      }
      function sa(a2) {
        if (a2._status === -1) {
          a2._status = 0;
          var b2 = a2._ctor;
          b2 = b2();
          a2._result = b2;
          b2.then(function(b3) {
            a2._status === 0 && (b3 = b3.default, a2._status = 1, a2._result = b3);
          }, function(b3) {
            a2._status === 0 && (a2._status = 2, a2._result = b3);
          });
        }
      }
      function ta(a2) {
        if (a2 == null)
          return null;
        if (typeof a2 === "function")
          return a2.displayName || a2.name || null;
        if (typeof a2 === "string")
          return a2;
        switch (a2) {
          case ea:
            return "Fragment";
          case da:
            return "Portal";
          case ha:
            return "Profiler";
          case fa:
            return "StrictMode";
          case ma:
            return "Suspense";
          case na:
            return "SuspenseList";
        }
        if (typeof a2 === "object")
          switch (a2.$$typeof) {
            case ja:
              return "Context.Consumer";
            case ia:
              return "Context.Provider";
            case la:
              var b2 = a2.render;
              b2 = b2.displayName || b2.name || "";
              return a2.displayName || (b2 !== "" ? "ForwardRef(" + b2 + ")" : "ForwardRef");
            case oa:
              return ta(a2.type);
            case pa:
              if (a2 = a2._status === 1 ? a2._result : null)
                return ta(a2);
          }
        return null;
      }
      function ua(a2) {
        var b2 = a2, c2 = a2;
        if (a2.alternate)
          for (; b2.return; )
            b2 = b2.return;
        else {
          a2 = b2;
          do
            b2 = a2, (b2.effectTag & 1026) !== 0 && (c2 = b2.return), a2 = b2.return;
          while (a2);
        }
        return b2.tag === 3 ? c2 : null;
      }
      function va(a2) {
        if (ua(a2) !== a2)
          throw Error(n2(188));
      }
      function wa(a2) {
        var b2 = a2.alternate;
        if (!b2) {
          b2 = ua(a2);
          if (b2 === null)
            throw Error(n2(188));
          return b2 !== a2 ? null : a2;
        }
        for (var c2 = a2, d = b2; ; ) {
          var e2 = c2.return;
          if (e2 === null)
            break;
          var f = e2.alternate;
          if (f === null) {
            d = e2.return;
            if (d !== null) {
              c2 = d;
              continue;
            }
            break;
          }
          if (e2.child === f.child) {
            for (f = e2.child; f; ) {
              if (f === c2)
                return va(e2), a2;
              if (f === d)
                return va(e2), b2;
              f = f.sibling;
            }
            throw Error(n2(188));
          }
          if (c2.return !== d.return)
            c2 = e2, d = f;
          else {
            for (var g2 = false, l2 = e2.child; l2; ) {
              if (l2 === c2) {
                g2 = true;
                c2 = e2;
                d = f;
                break;
              }
              if (l2 === d) {
                g2 = true;
                d = e2;
                c2 = f;
                break;
              }
              l2 = l2.sibling;
            }
            if (!g2) {
              for (l2 = f.child; l2; ) {
                if (l2 === c2) {
                  g2 = true;
                  c2 = f;
                  d = e2;
                  break;
                }
                if (l2 === d) {
                  g2 = true;
                  d = f;
                  c2 = e2;
                  break;
                }
                l2 = l2.sibling;
              }
              if (!g2)
                throw Error(n2(189));
            }
          }
          if (c2.alternate !== d)
            throw Error(n2(190));
        }
        if (c2.tag !== 3)
          throw Error(n2(188));
        return c2.stateNode.current === c2 ? a2 : b2;
      }
      function xa(a2) {
        a2 = wa(a2);
        if (!a2)
          return null;
        for (var b2 = a2; ; ) {
          if (b2.tag === 5 || b2.tag === 6)
            return b2;
          if (b2.child)
            b2.child.return = b2, b2 = b2.child;
          else {
            if (b2 === a2)
              break;
            for (; !b2.sibling; ) {
              if (!b2.return || b2.return === a2)
                return null;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return null;
      }
      function ya(a2) {
        a2 = wa(a2);
        if (!a2)
          return null;
        for (var b2 = a2; ; ) {
          if (b2.tag === 5 || b2.tag === 6)
            return b2;
          if (b2.child && b2.tag !== 4)
            b2.child.return = b2, b2 = b2.child;
          else {
            if (b2 === a2)
              break;
            for (; !b2.sibling; ) {
              if (!b2.return || b2.return === a2)
                return null;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return null;
      }
      var za = $$$hostConfig.getPublicInstance, Aa = $$$hostConfig.getRootHostContext, Ba = $$$hostConfig.getChildHostContext, Ca = $$$hostConfig.prepareForCommit, Da = $$$hostConfig.resetAfterCommit, Ea = $$$hostConfig.createInstance, Fa = $$$hostConfig.appendInitialChild, Ga = $$$hostConfig.finalizeInitialChildren, Ia = $$$hostConfig.prepareUpdate, Ja = $$$hostConfig.shouldSetTextContent, Ka = $$$hostConfig.shouldDeprioritizeSubtree, La = $$$hostConfig.createTextInstance, Ma = $$$hostConfig.setTimeout, Na = $$$hostConfig.clearTimeout, Oa = $$$hostConfig.noTimeout, Pa = $$$hostConfig.isPrimaryRenderer, Qa = $$$hostConfig.supportsMutation, Ra = $$$hostConfig.supportsPersistence, Sa = $$$hostConfig.supportsHydration, Ta = $$$hostConfig.appendChild, Ua = $$$hostConfig.appendChildToContainer, Va = $$$hostConfig.commitTextUpdate, Wa = $$$hostConfig.commitMount, Xa = $$$hostConfig.commitUpdate, Ya = $$$hostConfig.insertBefore, Za = $$$hostConfig.insertInContainerBefore, $a = $$$hostConfig.removeChild, ab = $$$hostConfig.removeChildFromContainer, bb = $$$hostConfig.resetTextContent, cb = $$$hostConfig.hideInstance, db = $$$hostConfig.hideTextInstance, eb = $$$hostConfig.unhideInstance, fb = $$$hostConfig.unhideTextInstance, gb = $$$hostConfig.cloneInstance, hb = $$$hostConfig.createContainerChildSet, ib = $$$hostConfig.appendChildToContainerChildSet, kb = $$$hostConfig.finalizeContainerChildren, lb = $$$hostConfig.replaceContainerChildren, mb = $$$hostConfig.cloneHiddenInstance, nb = $$$hostConfig.cloneHiddenTextInstance, ob = $$$hostConfig.canHydrateInstance, pb = $$$hostConfig.canHydrateTextInstance, qb = $$$hostConfig.isSuspenseInstancePending, rb = $$$hostConfig.isSuspenseInstanceFallback, sb = $$$hostConfig.getNextHydratableSibling, tb = $$$hostConfig.getFirstHydratableChild, ub = $$$hostConfig.hydrateInstance, vb = $$$hostConfig.hydrateTextInstance, wb = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance, xb = $$$hostConfig.commitHydratedContainer, yb = $$$hostConfig.commitHydratedSuspenseInstance, zb = /^(.*)[\\\/]/;
      function Ab(a2) {
        var b2 = "";
        do {
          a:
            switch (a2.tag) {
              case 3:
              case 4:
              case 6:
              case 7:
              case 10:
              case 9:
                var c2 = "";
                break a;
              default:
                var d = a2._debugOwner, e2 = a2._debugSource, f = ta(a2.type);
                c2 = null;
                d && (c2 = ta(d.type));
                d = f;
                f = "";
                e2 ? f = " (at " + e2.fileName.replace(zb, "") + ":" + e2.lineNumber + ")" : c2 && (f = " (created by " + c2 + ")");
                c2 = "\n    in " + (d || "Unknown") + f;
            }
          b2 += c2;
          a2 = a2.return;
        } while (a2);
        return b2;
      }
      new Set();
      var Bb = [], Cb = -1;
      function y2(a2) {
        0 > Cb || (a2.current = Bb[Cb], Bb[Cb] = null, Cb--);
      }
      function z(a2, b2) {
        Cb++;
        Bb[Cb] = a2.current;
        a2.current = b2;
      }
      var Db = {}, A = { current: Db }, B = { current: false }, Eb = Db;
      function Fb(a2, b2) {
        var c2 = a2.type.contextTypes;
        if (!c2)
          return Db;
        var d = a2.stateNode;
        if (d && d.__reactInternalMemoizedUnmaskedChildContext === b2)
          return d.__reactInternalMemoizedMaskedChildContext;
        var e2 = {}, f;
        for (f in c2)
          e2[f] = b2[f];
        d && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e2);
        return e2;
      }
      function C(a2) {
        a2 = a2.childContextTypes;
        return a2 !== null && a2 !== void 0;
      }
      function Gb(a2) {
        y2(B, a2);
        y2(A, a2);
      }
      function Hb(a2) {
        y2(B, a2);
        y2(A, a2);
      }
      function Ib(a2, b2, c2) {
        if (A.current !== Db)
          throw Error(n2(168));
        z(A, b2, a2);
        z(B, c2, a2);
      }
      function Jb(a2, b2, c2) {
        var d = a2.stateNode;
        a2 = b2.childContextTypes;
        if (typeof d.getChildContext !== "function")
          return c2;
        d = d.getChildContext();
        for (var e2 in d)
          if (!(e2 in a2))
            throw Error(n2(108, ta(b2) || "Unknown", e2));
        return aa({}, c2, {}, d);
      }
      function Kb(a2) {
        var b2 = a2.stateNode;
        b2 = b2 && b2.__reactInternalMemoizedMergedChildContext || Db;
        Eb = A.current;
        z(A, b2, a2);
        z(B, B.current, a2);
        return true;
      }
      function Lb(a2, b2, c2) {
        var d = a2.stateNode;
        if (!d)
          throw Error(n2(169));
        c2 ? (b2 = Jb(a2, b2, Eb), d.__reactInternalMemoizedMergedChildContext = b2, y2(B, a2), y2(A, a2), z(A, b2, a2)) : y2(B, a2);
        z(B, c2, a2);
      }
      var Mb = m.unstable_runWithPriority, Nb = m.unstable_scheduleCallback, Ob = m.unstable_cancelCallback, Pb = m.unstable_shouldYield, Qb = m.unstable_requestPaint, Rb = m.unstable_now, Ub = m.unstable_getCurrentPriorityLevel, Vb = m.unstable_ImmediatePriority, Wb = m.unstable_UserBlockingPriority, Xb = m.unstable_NormalPriority, Yb = m.unstable_LowPriority, Zb = m.unstable_IdlePriority, $b = {}, ac = Qb !== void 0 ? Qb : function() {
      }, bc = null, cc = null, dc = false, ec = Rb(), E = 1e4 > ec ? Rb : function() {
        return Rb() - ec;
      };
      function fc() {
        switch (Ub()) {
          case Vb:
            return 99;
          case Wb:
            return 98;
          case Xb:
            return 97;
          case Yb:
            return 96;
          case Zb:
            return 95;
          default:
            throw Error(n2(332));
        }
      }
      function gc(a2) {
        switch (a2) {
          case 99:
            return Vb;
          case 98:
            return Wb;
          case 97:
            return Xb;
          case 96:
            return Yb;
          case 95:
            return Zb;
          default:
            throw Error(n2(332));
        }
      }
      function hc(a2, b2) {
        a2 = gc(a2);
        return Mb(a2, b2);
      }
      function ic(a2, b2, c2) {
        a2 = gc(a2);
        return Nb(a2, b2, c2);
      }
      function jc(a2) {
        bc === null ? (bc = [a2], cc = Nb(Vb, kc)) : bc.push(a2);
        return $b;
      }
      function F() {
        if (cc !== null) {
          var a2 = cc;
          cc = null;
          Ob(a2);
        }
        kc();
      }
      function kc() {
        if (!dc && bc !== null) {
          dc = true;
          var a2 = 0;
          try {
            var b2 = bc;
            hc(99, function() {
              for (; a2 < b2.length; a2++) {
                var c2 = b2[a2];
                do
                  c2 = c2(true);
                while (c2 !== null);
              }
            });
            bc = null;
          } catch (c2) {
            throw bc !== null && (bc = bc.slice(a2 + 1)), Nb(Vb, F), c2;
          } finally {
            dc = false;
          }
        }
      }
      var lc = 3;
      function mc(a2, b2, c2) {
        c2 /= 10;
        return 1073741821 - (((1073741821 - a2 + b2 / 10) / c2 | 0) + 1) * c2;
      }
      function nc(a2, b2) {
        return a2 === b2 && (a2 !== 0 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
      }
      var oc = typeof Object.is === "function" ? Object.is : nc, pc = Object.prototype.hasOwnProperty;
      function qc(a2, b2) {
        if (oc(a2, b2))
          return true;
        if (typeof a2 !== "object" || a2 === null || typeof b2 !== "object" || b2 === null)
          return false;
        var c2 = Object.keys(a2), d = Object.keys(b2);
        if (c2.length !== d.length)
          return false;
        for (d = 0; d < c2.length; d++)
          if (!pc.call(b2, c2[d]) || !oc(a2[c2[d]], b2[c2[d]]))
            return false;
        return true;
      }
      function rc(a2, b2) {
        if (a2 && a2.defaultProps) {
          b2 = aa({}, b2);
          a2 = a2.defaultProps;
          for (var c2 in a2)
            b2[c2] === void 0 && (b2[c2] = a2[c2]);
        }
        return b2;
      }
      var sc = { current: null }, tc = null, uc = null, vc = null;
      function wc() {
        vc = uc = tc = null;
      }
      function xc(a2, b2) {
        var c2 = a2.type._context;
        Pa ? (z(sc, c2._currentValue, a2), c2._currentValue = b2) : (z(sc, c2._currentValue2, a2), c2._currentValue2 = b2);
      }
      function yc(a2) {
        var b2 = sc.current;
        y2(sc, a2);
        a2 = a2.type._context;
        Pa ? a2._currentValue = b2 : a2._currentValue2 = b2;
      }
      function zc(a2, b2) {
        for (; a2 !== null; ) {
          var c2 = a2.alternate;
          if (a2.childExpirationTime < b2)
            a2.childExpirationTime = b2, c2 !== null && c2.childExpirationTime < b2 && (c2.childExpirationTime = b2);
          else if (c2 !== null && c2.childExpirationTime < b2)
            c2.childExpirationTime = b2;
          else
            break;
          a2 = a2.return;
        }
      }
      function Ac(a2, b2) {
        tc = a2;
        vc = uc = null;
        a2 = a2.dependencies;
        a2 !== null && a2.firstContext !== null && (a2.expirationTime >= b2 && (Bc = true), a2.firstContext = null);
      }
      function Cc(a2, b2) {
        if (vc !== a2 && b2 !== false && b2 !== 0) {
          if (typeof b2 !== "number" || b2 === 1073741823)
            vc = a2, b2 = 1073741823;
          b2 = { context: a2, observedBits: b2, next: null };
          if (uc === null) {
            if (tc === null)
              throw Error(n2(308));
            uc = b2;
            tc.dependencies = { expirationTime: 0, firstContext: b2, responders: null };
          } else
            uc = uc.next = b2;
        }
        return Pa ? a2._currentValue : a2._currentValue2;
      }
      var Dc = false;
      function Ec(a2) {
        return { baseState: a2, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
      }
      function Fc(a2) {
        return { baseState: a2.baseState, firstUpdate: a2.firstUpdate, lastUpdate: a2.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
      }
      function Gc(a2, b2) {
        return { expirationTime: a2, suspenseConfig: b2, tag: 0, payload: null, callback: null, next: null, nextEffect: null };
      }
      function Hc(a2, b2) {
        a2.lastUpdate === null ? a2.firstUpdate = a2.lastUpdate = b2 : (a2.lastUpdate.next = b2, a2.lastUpdate = b2);
      }
      function Ic(a2, b2) {
        var c2 = a2.alternate;
        if (c2 === null) {
          var d = a2.updateQueue;
          var e2 = null;
          d === null && (d = a2.updateQueue = Ec(a2.memoizedState));
        } else
          d = a2.updateQueue, e2 = c2.updateQueue, d === null ? e2 === null ? (d = a2.updateQueue = Ec(a2.memoizedState), e2 = c2.updateQueue = Ec(c2.memoizedState)) : d = a2.updateQueue = Fc(e2) : e2 === null && (e2 = c2.updateQueue = Fc(d));
        e2 === null || d === e2 ? Hc(d, b2) : d.lastUpdate === null || e2.lastUpdate === null ? (Hc(d, b2), Hc(e2, b2)) : (Hc(d, b2), e2.lastUpdate = b2);
      }
      function Jc(a2, b2) {
        var c2 = a2.updateQueue;
        c2 = c2 === null ? a2.updateQueue = Ec(a2.memoizedState) : Kc(a2, c2);
        c2.lastCapturedUpdate === null ? c2.firstCapturedUpdate = c2.lastCapturedUpdate = b2 : (c2.lastCapturedUpdate.next = b2, c2.lastCapturedUpdate = b2);
      }
      function Kc(a2, b2) {
        var c2 = a2.alternate;
        c2 !== null && b2 === c2.updateQueue && (b2 = a2.updateQueue = Fc(b2));
        return b2;
      }
      function Lc(a2, b2, c2, d, e2, f) {
        switch (c2.tag) {
          case 1:
            return a2 = c2.payload, typeof a2 === "function" ? a2.call(f, d, e2) : a2;
          case 3:
            a2.effectTag = a2.effectTag & -4097 | 64;
          case 0:
            a2 = c2.payload;
            e2 = typeof a2 === "function" ? a2.call(f, d, e2) : a2;
            if (e2 === null || e2 === void 0)
              break;
            return aa({}, d, e2);
          case 2:
            Dc = true;
        }
        return d;
      }
      function Nc(a2, b2, c2, d, e2) {
        Dc = false;
        b2 = Kc(a2, b2);
        for (var f = b2.baseState, g2 = null, l2 = 0, h = b2.firstUpdate, k = f; h !== null; ) {
          var p = h.expirationTime;
          p < e2 ? (g2 === null && (g2 = h, f = k), l2 < p && (l2 = p)) : (Oc(p, h.suspenseConfig), k = Lc(a2, b2, h, k, c2, d), h.callback !== null && (a2.effectTag |= 32, h.nextEffect = null, b2.lastEffect === null ? b2.firstEffect = b2.lastEffect = h : (b2.lastEffect.nextEffect = h, b2.lastEffect = h)));
          h = h.next;
        }
        p = null;
        for (h = b2.firstCapturedUpdate; h !== null; ) {
          var D = h.expirationTime;
          D < e2 ? (p === null && (p = h, g2 === null && (f = k)), l2 < D && (l2 = D)) : (k = Lc(a2, b2, h, k, c2, d), h.callback !== null && (a2.effectTag |= 32, h.nextEffect = null, b2.lastCapturedEffect === null ? b2.firstCapturedEffect = b2.lastCapturedEffect = h : (b2.lastCapturedEffect.nextEffect = h, b2.lastCapturedEffect = h)));
          h = h.next;
        }
        g2 === null && (b2.lastUpdate = null);
        p === null ? b2.lastCapturedUpdate = null : a2.effectTag |= 32;
        g2 === null && p === null && (f = k);
        b2.baseState = f;
        b2.firstUpdate = g2;
        b2.firstCapturedUpdate = p;
        Pc(l2);
        a2.expirationTime = l2;
        a2.memoizedState = k;
      }
      function Qc(a2, b2, c2) {
        b2.firstCapturedUpdate !== null && (b2.lastUpdate !== null && (b2.lastUpdate.next = b2.firstCapturedUpdate, b2.lastUpdate = b2.lastCapturedUpdate), b2.firstCapturedUpdate = b2.lastCapturedUpdate = null);
        Rc(b2.firstEffect, c2);
        b2.firstEffect = b2.lastEffect = null;
        Rc(b2.firstCapturedEffect, c2);
        b2.firstCapturedEffect = b2.lastCapturedEffect = null;
      }
      function Rc(a2, b2) {
        for (; a2 !== null; ) {
          var c2 = a2.callback;
          if (c2 !== null) {
            a2.callback = null;
            var d = b2;
            if (typeof c2 !== "function")
              throw Error(n2(191, c2));
            c2.call(d);
          }
          a2 = a2.nextEffect;
        }
      }
      var Sc = q.ReactCurrentBatchConfig, Tc = new ba.Component().refs;
      function Uc(a2, b2, c2, d) {
        b2 = a2.memoizedState;
        c2 = c2(d, b2);
        c2 = c2 === null || c2 === void 0 ? b2 : aa({}, b2, c2);
        a2.memoizedState = c2;
        d = a2.updateQueue;
        d !== null && a2.expirationTime === 0 && (d.baseState = c2);
      }
      var Xc = { isMounted: function(a2) {
        return (a2 = a2._reactInternalFiber) ? ua(a2) === a2 : false;
      }, enqueueSetState: function(a2, b2, c2) {
        a2 = a2._reactInternalFiber;
        var d = G(), e2 = Sc.suspense;
        d = Vc(d, a2, e2);
        e2 = Gc(d, e2);
        e2.payload = b2;
        c2 !== void 0 && c2 !== null && (e2.callback = c2);
        Ic(a2, e2);
        Wc(a2, d);
      }, enqueueReplaceState: function(a2, b2, c2) {
        a2 = a2._reactInternalFiber;
        var d = G(), e2 = Sc.suspense;
        d = Vc(d, a2, e2);
        e2 = Gc(d, e2);
        e2.tag = 1;
        e2.payload = b2;
        c2 !== void 0 && c2 !== null && (e2.callback = c2);
        Ic(a2, e2);
        Wc(a2, d);
      }, enqueueForceUpdate: function(a2, b2) {
        a2 = a2._reactInternalFiber;
        var c2 = G(), d = Sc.suspense;
        c2 = Vc(c2, a2, d);
        d = Gc(c2, d);
        d.tag = 2;
        b2 !== void 0 && b2 !== null && (d.callback = b2);
        Ic(a2, d);
        Wc(a2, c2);
      } };
      function Yc(a2, b2, c2, d, e2, f, g2) {
        a2 = a2.stateNode;
        return typeof a2.shouldComponentUpdate === "function" ? a2.shouldComponentUpdate(d, f, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !qc(c2, d) || !qc(e2, f) : true;
      }
      function Zc(a2, b2, c2) {
        var d = false, e2 = Db;
        var f = b2.contextType;
        typeof f === "object" && f !== null ? f = Cc(f) : (e2 = C(b2) ? Eb : A.current, d = b2.contextTypes, f = (d = d !== null && d !== void 0) ? Fb(a2, e2) : Db);
        b2 = new b2(c2, f);
        a2.memoizedState = b2.state !== null && b2.state !== void 0 ? b2.state : null;
        b2.updater = Xc;
        a2.stateNode = b2;
        b2._reactInternalFiber = a2;
        d && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e2, a2.__reactInternalMemoizedMaskedChildContext = f);
        return b2;
      }
      function $c(a2, b2, c2, d) {
        a2 = b2.state;
        typeof b2.componentWillReceiveProps === "function" && b2.componentWillReceiveProps(c2, d);
        typeof b2.UNSAFE_componentWillReceiveProps === "function" && b2.UNSAFE_componentWillReceiveProps(c2, d);
        b2.state !== a2 && Xc.enqueueReplaceState(b2, b2.state, null);
      }
      function ad(a2, b2, c2, d) {
        var e2 = a2.stateNode;
        e2.props = c2;
        e2.state = a2.memoizedState;
        e2.refs = Tc;
        var f = b2.contextType;
        typeof f === "object" && f !== null ? e2.context = Cc(f) : (f = C(b2) ? Eb : A.current, e2.context = Fb(a2, f));
        f = a2.updateQueue;
        f !== null && (Nc(a2, f, c2, e2, d), e2.state = a2.memoizedState);
        f = b2.getDerivedStateFromProps;
        typeof f === "function" && (Uc(a2, b2, f, c2), e2.state = a2.memoizedState);
        typeof b2.getDerivedStateFromProps === "function" || typeof e2.getSnapshotBeforeUpdate === "function" || typeof e2.UNSAFE_componentWillMount !== "function" && typeof e2.componentWillMount !== "function" || (b2 = e2.state, typeof e2.componentWillMount === "function" && e2.componentWillMount(), typeof e2.UNSAFE_componentWillMount === "function" && e2.UNSAFE_componentWillMount(), b2 !== e2.state && Xc.enqueueReplaceState(e2, e2.state, null), f = a2.updateQueue, f !== null && (Nc(a2, f, c2, e2, d), e2.state = a2.memoizedState));
        typeof e2.componentDidMount === "function" && (a2.effectTag |= 4);
      }
      var bd = Array.isArray;
      function cd(a2, b2, c2) {
        a2 = c2.ref;
        if (a2 !== null && typeof a2 !== "function" && typeof a2 !== "object") {
          if (c2._owner) {
            c2 = c2._owner;
            if (c2) {
              if (c2.tag !== 1)
                throw Error(n2(309));
              var d = c2.stateNode;
            }
            if (!d)
              throw Error(n2(147, a2));
            var e2 = "" + a2;
            if (b2 !== null && b2.ref !== null && typeof b2.ref === "function" && b2.ref._stringRef === e2)
              return b2.ref;
            b2 = function(b3) {
              var a3 = d.refs;
              a3 === Tc && (a3 = d.refs = {});
              b3 === null ? delete a3[e2] : a3[e2] = b3;
            };
            b2._stringRef = e2;
            return b2;
          }
          if (typeof a2 !== "string")
            throw Error(n2(284));
          if (!c2._owner)
            throw Error(n2(290, a2));
        }
        return a2;
      }
      function dd(a2, b2) {
        if (a2.type !== "textarea")
          throw Error(n2(31, Object.prototype.toString.call(b2) === "[object Object]" ? "object with keys {" + Object.keys(b2).join(", ") + "}" : b2, ""));
      }
      function ed(a2) {
        function b2(b3, c3) {
          if (a2) {
            var d2 = b3.lastEffect;
            d2 !== null ? (d2.nextEffect = c3, b3.lastEffect = c3) : b3.firstEffect = b3.lastEffect = c3;
            c3.nextEffect = null;
            c3.effectTag = 8;
          }
        }
        function c2(c3, d2) {
          if (!a2)
            return null;
          for (; d2 !== null; )
            b2(c3, d2), d2 = d2.sibling;
          return null;
        }
        function d(b3, a3) {
          for (b3 = new Map(); a3 !== null; )
            a3.key !== null ? b3.set(a3.key, a3) : b3.set(a3.index, a3), a3 = a3.sibling;
          return b3;
        }
        function e2(b3, a3, c3) {
          b3 = fd(b3, a3, c3);
          b3.index = 0;
          b3.sibling = null;
          return b3;
        }
        function f(b3, c3, d2) {
          b3.index = d2;
          if (!a2)
            return c3;
          d2 = b3.alternate;
          if (d2 !== null)
            return d2 = d2.index, d2 < c3 ? (b3.effectTag = 2, c3) : d2;
          b3.effectTag = 2;
          return c3;
        }
        function g2(b3) {
          a2 && b3.alternate === null && (b3.effectTag = 2);
          return b3;
        }
        function l2(b3, a3, c3, d2) {
          if (a3 === null || a3.tag !== 6)
            return a3 = gd(c3, b3.mode, d2), a3.return = b3, a3;
          a3 = e2(a3, c3, d2);
          a3.return = b3;
          return a3;
        }
        function h(b3, a3, c3, d2) {
          if (a3 !== null && a3.elementType === c3.type)
            return d2 = e2(a3, c3.props, d2), d2.ref = cd(b3, a3, c3), d2.return = b3, d2;
          d2 = hd(c3.type, c3.key, c3.props, null, b3.mode, d2);
          d2.ref = cd(b3, a3, c3);
          d2.return = b3;
          return d2;
        }
        function k(b3, a3, c3, d2) {
          if (a3 === null || a3.tag !== 4 || a3.stateNode.containerInfo !== c3.containerInfo || a3.stateNode.implementation !== c3.implementation)
            return a3 = id(c3, b3.mode, d2), a3.return = b3, a3;
          a3 = e2(a3, c3.children || [], d2);
          a3.return = b3;
          return a3;
        }
        function p(b3, a3, c3, d2, f2) {
          if (a3 === null || a3.tag !== 7)
            return a3 = jd(c3, b3.mode, d2, f2), a3.return = b3, a3;
          a3 = e2(a3, c3, d2);
          a3.return = b3;
          return a3;
        }
        function D(b3, a3, c3) {
          if (typeof a3 === "string" || typeof a3 === "number")
            return a3 = gd("" + a3, b3.mode, c3), a3.return = b3, a3;
          if (typeof a3 === "object" && a3 !== null) {
            switch (a3.$$typeof) {
              case ca:
                return c3 = hd(a3.type, a3.key, a3.props, null, b3.mode, c3), c3.ref = cd(b3, null, a3), c3.return = b3, c3;
              case da:
                return a3 = id(a3, b3.mode, c3), a3.return = b3, a3;
            }
            if (bd(a3) || ra(a3))
              return a3 = jd(a3, b3.mode, c3, null), a3.return = b3, a3;
            dd(b3, a3);
          }
          return null;
        }
        function x(b3, a3, c3, d2) {
          var e3 = a3 !== null ? a3.key : null;
          if (typeof c3 === "string" || typeof c3 === "number")
            return e3 !== null ? null : l2(b3, a3, "" + c3, d2);
          if (typeof c3 === "object" && c3 !== null) {
            switch (c3.$$typeof) {
              case ca:
                return c3.key === e3 ? c3.type === ea ? p(b3, a3, c3.props.children, d2, e3) : h(b3, a3, c3, d2) : null;
              case da:
                return c3.key === e3 ? k(b3, a3, c3, d2) : null;
            }
            if (bd(c3) || ra(c3))
              return e3 !== null ? null : p(b3, a3, c3, d2, null);
            dd(b3, c3);
          }
          return null;
        }
        function K(b3, a3, c3, d2, e3) {
          if (typeof d2 === "string" || typeof d2 === "number")
            return b3 = b3.get(c3) || null, l2(a3, b3, "" + d2, e3);
          if (typeof d2 === "object" && d2 !== null) {
            switch (d2.$$typeof) {
              case ca:
                return b3 = b3.get(d2.key === null ? c3 : d2.key) || null, d2.type === ea ? p(a3, b3, d2.props.children, e3, d2.key) : h(a3, b3, d2, e3);
              case da:
                return b3 = b3.get(d2.key === null ? c3 : d2.key) || null, k(a3, b3, d2, e3);
            }
            if (bd(d2) || ra(d2))
              return b3 = b3.get(c3) || null, p(a3, b3, d2, e3, null);
            dd(a3, d2);
          }
          return null;
        }
        function Ha(e3, g3, h2, l3) {
          for (var k2 = null, w = null, t2 = g3, r2 = g3 = 0, p2 = null; t2 !== null && r2 < h2.length; r2++) {
            t2.index > r2 ? (p2 = t2, t2 = null) : p2 = t2.sibling;
            var v = x(e3, t2, h2[r2], l3);
            if (v === null) {
              t2 === null && (t2 = p2);
              break;
            }
            a2 && t2 && v.alternate === null && b2(e3, t2);
            g3 = f(v, g3, r2);
            w === null ? k2 = v : w.sibling = v;
            w = v;
            t2 = p2;
          }
          if (r2 === h2.length)
            return c2(e3, t2), k2;
          if (t2 === null) {
            for (; r2 < h2.length; r2++)
              t2 = D(e3, h2[r2], l3), t2 !== null && (g3 = f(t2, g3, r2), w === null ? k2 = t2 : w.sibling = t2, w = t2);
            return k2;
          }
          for (t2 = d(e3, t2); r2 < h2.length; r2++)
            p2 = K(t2, e3, r2, h2[r2], l3), p2 !== null && (a2 && p2.alternate !== null && t2.delete(p2.key === null ? r2 : p2.key), g3 = f(p2, g3, r2), w === null ? k2 = p2 : w.sibling = p2, w = p2);
          a2 && t2.forEach(function(a3) {
            return b2(e3, a3);
          });
          return k2;
        }
        function O(e3, g3, h2, l3) {
          var k2 = ra(h2);
          if (typeof k2 !== "function")
            throw Error(n2(150));
          h2 = k2.call(h2);
          if (h2 == null)
            throw Error(n2(151));
          for (var t2 = k2 = null, r2 = g3, w = g3 = 0, p2 = null, v = h2.next(); r2 !== null && !v.done; w++, v = h2.next()) {
            r2.index > w ? (p2 = r2, r2 = null) : p2 = r2.sibling;
            var N = x(e3, r2, v.value, l3);
            if (N === null) {
              r2 === null && (r2 = p2);
              break;
            }
            a2 && r2 && N.alternate === null && b2(e3, r2);
            g3 = f(N, g3, w);
            t2 === null ? k2 = N : t2.sibling = N;
            t2 = N;
            r2 = p2;
          }
          if (v.done)
            return c2(e3, r2), k2;
          if (r2 === null) {
            for (; !v.done; w++, v = h2.next())
              v = D(e3, v.value, l3), v !== null && (g3 = f(v, g3, w), t2 === null ? k2 = v : t2.sibling = v, t2 = v);
            return k2;
          }
          for (r2 = d(e3, r2); !v.done; w++, v = h2.next())
            v = K(r2, e3, w, v.value, l3), v !== null && (a2 && v.alternate !== null && r2.delete(v.key === null ? w : v.key), g3 = f(v, g3, w), t2 === null ? k2 = v : t2.sibling = v, t2 = v);
          a2 && r2.forEach(function(a3) {
            return b2(e3, a3);
          });
          return k2;
        }
        return function(a3, d2, f2, h2) {
          var k2 = typeof f2 === "object" && f2 !== null && f2.type === ea && f2.key === null;
          k2 && (f2 = f2.props.children);
          var l3 = typeof f2 === "object" && f2 !== null;
          if (l3)
            switch (f2.$$typeof) {
              case ca:
                a: {
                  l3 = f2.key;
                  for (k2 = d2; k2 !== null; ) {
                    if (k2.key === l3)
                      if (k2.tag === 7 ? f2.type === ea : k2.elementType === f2.type) {
                        c2(a3, k2.sibling);
                        d2 = e2(k2, f2.type === ea ? f2.props.children : f2.props, h2);
                        d2.ref = cd(a3, k2, f2);
                        d2.return = a3;
                        a3 = d2;
                        break a;
                      } else {
                        c2(a3, k2);
                        break;
                      }
                    else
                      b2(a3, k2);
                    k2 = k2.sibling;
                  }
                  f2.type === ea ? (d2 = jd(f2.props.children, a3.mode, h2, f2.key), d2.return = a3, a3 = d2) : (h2 = hd(f2.type, f2.key, f2.props, null, a3.mode, h2), h2.ref = cd(a3, d2, f2), h2.return = a3, a3 = h2);
                }
                return g2(a3);
              case da:
                a: {
                  for (k2 = f2.key; d2 !== null; ) {
                    if (d2.key === k2)
                      if (d2.tag === 4 && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                        c2(a3, d2.sibling);
                        d2 = e2(d2, f2.children || [], h2);
                        d2.return = a3;
                        a3 = d2;
                        break a;
                      } else {
                        c2(a3, d2);
                        break;
                      }
                    else
                      b2(a3, d2);
                    d2 = d2.sibling;
                  }
                  d2 = id(f2, a3.mode, h2);
                  d2.return = a3;
                  a3 = d2;
                }
                return g2(a3);
            }
          if (typeof f2 === "string" || typeof f2 === "number")
            return f2 = "" + f2, d2 !== null && d2.tag === 6 ? (c2(a3, d2.sibling), d2 = e2(d2, f2, h2), d2.return = a3, a3 = d2) : (c2(a3, d2), d2 = gd(f2, a3.mode, h2), d2.return = a3, a3 = d2), g2(a3);
          if (bd(f2))
            return Ha(a3, d2, f2, h2);
          if (ra(f2))
            return O(a3, d2, f2, h2);
          l3 && dd(a3, f2);
          if (typeof f2 === "undefined" && !k2)
            switch (a3.tag) {
              case 1:
              case 0:
                throw a3 = a3.type, Error(n2(152, a3.displayName || a3.name || "Component"));
            }
          return c2(a3, d2);
        };
      }
      var kd = ed(true), ld = ed(false), md = {}, H = { current: md }, nd = { current: md }, od = { current: md };
      function pd(a2) {
        if (a2 === md)
          throw Error(n2(174));
        return a2;
      }
      function qd(a2, b2) {
        z(od, b2, a2);
        z(nd, a2, a2);
        z(H, md, a2);
        b2 = Aa(b2);
        y2(H, a2);
        z(H, b2, a2);
      }
      function rd(a2) {
        y2(H, a2);
        y2(nd, a2);
        y2(od, a2);
      }
      function sd(a2) {
        var b2 = pd(od.current), c2 = pd(H.current);
        b2 = Ba(c2, a2.type, b2);
        c2 !== b2 && (z(nd, a2, a2), z(H, b2, a2));
      }
      function td(a2) {
        nd.current === a2 && (y2(H, a2), y2(nd, a2));
      }
      var I = { current: 0 };
      function ud(a2) {
        for (var b2 = a2; b2 !== null; ) {
          if (b2.tag === 13) {
            var c2 = b2.memoizedState;
            if (c2 !== null && (c2 = c2.dehydrated, c2 === null || qb(c2) || rb(c2)))
              return b2;
          } else if (b2.tag === 19 && b2.memoizedProps.revealOrder !== void 0) {
            if ((b2.effectTag & 64) !== 0)
              return b2;
          } else if (b2.child !== null) {
            b2.child.return = b2;
            b2 = b2.child;
            continue;
          }
          if (b2 === a2)
            break;
          for (; b2.sibling === null; ) {
            if (b2.return === null || b2.return === a2)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
        return null;
      }
      function vd(a2, b2) {
        return { responder: a2, props: b2 };
      }
      var wd = q.ReactCurrentDispatcher, J = q.ReactCurrentBatchConfig, xd = 0, yd = null, L = null, zd = null, Ad = null, M = null, Bd = null, Cd = 0, Dd = null, Ed = 0, Fd = false, Gd = null, Hd = 0;
      function P() {
        throw Error(n2(321));
      }
      function Id(a2, b2) {
        if (b2 === null)
          return false;
        for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
          if (!oc(a2[c2], b2[c2]))
            return false;
        return true;
      }
      function Jd(a2, b2, c2, d, e2, f) {
        xd = f;
        yd = b2;
        zd = a2 !== null ? a2.memoizedState : null;
        wd.current = zd === null ? Kd : Ld;
        b2 = c2(d, e2);
        if (Fd) {
          do
            Fd = false, Hd += 1, zd = a2 !== null ? a2.memoizedState : null, Bd = Ad, Dd = M = L = null, wd.current = Ld, b2 = c2(d, e2);
          while (Fd);
          Gd = null;
          Hd = 0;
        }
        wd.current = Md;
        a2 = yd;
        a2.memoizedState = Ad;
        a2.expirationTime = Cd;
        a2.updateQueue = Dd;
        a2.effectTag |= Ed;
        a2 = L !== null && L.next !== null;
        xd = 0;
        Bd = M = Ad = zd = L = yd = null;
        Cd = 0;
        Dd = null;
        Ed = 0;
        if (a2)
          throw Error(n2(300));
        return b2;
      }
      function Nd() {
        wd.current = Md;
        xd = 0;
        Bd = M = Ad = zd = L = yd = null;
        Cd = 0;
        Dd = null;
        Ed = 0;
        Fd = false;
        Gd = null;
        Hd = 0;
      }
      function Od() {
        var a2 = { memoizedState: null, baseState: null, queue: null, baseUpdate: null, next: null };
        M === null ? Ad = M = a2 : M = M.next = a2;
        return M;
      }
      function Pd() {
        if (Bd !== null)
          M = Bd, Bd = M.next, L = zd, zd = L !== null ? L.next : null;
        else {
          if (zd === null)
            throw Error(n2(310));
          L = zd;
          var a2 = { memoizedState: L.memoizedState, baseState: L.baseState, queue: L.queue, baseUpdate: L.baseUpdate, next: null };
          M = M === null ? Ad = a2 : M.next = a2;
          zd = L.next;
        }
        return M;
      }
      function Qd(a2, b2) {
        return typeof b2 === "function" ? b2(a2) : b2;
      }
      function Rd(a2) {
        var b2 = Pd(), c2 = b2.queue;
        if (c2 === null)
          throw Error(n2(311));
        c2.lastRenderedReducer = a2;
        if (0 < Hd) {
          var d = c2.dispatch;
          if (Gd !== null) {
            var e2 = Gd.get(c2);
            if (e2 !== void 0) {
              Gd.delete(c2);
              var f = b2.memoizedState;
              do
                f = a2(f, e2.action), e2 = e2.next;
              while (e2 !== null);
              oc(f, b2.memoizedState) || (Bc = true);
              b2.memoizedState = f;
              b2.baseUpdate === c2.last && (b2.baseState = f);
              c2.lastRenderedState = f;
              return [f, d];
            }
          }
          return [b2.memoizedState, d];
        }
        d = c2.last;
        var g2 = b2.baseUpdate;
        f = b2.baseState;
        g2 !== null ? (d !== null && (d.next = null), d = g2.next) : d = d !== null ? d.next : null;
        if (d !== null) {
          var l2 = e2 = null, h = d, k = false;
          do {
            var p = h.expirationTime;
            p < xd ? (k || (k = true, l2 = g2, e2 = f), p > Cd && (Cd = p, Pc(Cd))) : (Oc(p, h.suspenseConfig), f = h.eagerReducer === a2 ? h.eagerState : a2(f, h.action));
            g2 = h;
            h = h.next;
          } while (h !== null && h !== d);
          k || (l2 = g2, e2 = f);
          oc(f, b2.memoizedState) || (Bc = true);
          b2.memoizedState = f;
          b2.baseUpdate = l2;
          b2.baseState = e2;
          c2.lastRenderedState = f;
        }
        return [b2.memoizedState, c2.dispatch];
      }
      function Sd(a2) {
        var b2 = Od();
        typeof a2 === "function" && (a2 = a2());
        b2.memoizedState = b2.baseState = a2;
        a2 = b2.queue = { last: null, dispatch: null, lastRenderedReducer: Qd, lastRenderedState: a2 };
        a2 = a2.dispatch = Td.bind(null, yd, a2);
        return [b2.memoizedState, a2];
      }
      function Ud(a2) {
        return Rd(Qd, a2);
      }
      function Vd(a2, b2, c2, d) {
        a2 = { tag: a2, create: b2, destroy: c2, deps: d, next: null };
        Dd === null ? (Dd = { lastEffect: null }, Dd.lastEffect = a2.next = a2) : (b2 = Dd.lastEffect, b2 === null ? Dd.lastEffect = a2.next = a2 : (c2 = b2.next, b2.next = a2, a2.next = c2, Dd.lastEffect = a2));
        return a2;
      }
      function Wd(a2, b2, c2, d) {
        var e2 = Od();
        Ed |= a2;
        e2.memoizedState = Vd(b2, c2, void 0, d === void 0 ? null : d);
      }
      function Xd(a2, b2, c2, d) {
        var e2 = Pd();
        d = d === void 0 ? null : d;
        var f = void 0;
        if (L !== null) {
          var g2 = L.memoizedState;
          f = g2.destroy;
          if (d !== null && Id(d, g2.deps)) {
            Vd(0, c2, f, d);
            return;
          }
        }
        Ed |= a2;
        e2.memoizedState = Vd(b2, c2, f, d);
      }
      function Yd(a2, b2) {
        return Wd(516, 192, a2, b2);
      }
      function Zd(a2, b2) {
        return Xd(516, 192, a2, b2);
      }
      function $d(a2, b2) {
        if (typeof b2 === "function")
          return a2 = a2(), b2(a2), function() {
            b2(null);
          };
        if (b2 !== null && b2 !== void 0)
          return a2 = a2(), b2.current = a2, function() {
            b2.current = null;
          };
      }
      function ae() {
      }
      function be(a2, b2) {
        Od().memoizedState = [a2, b2 === void 0 ? null : b2];
        return a2;
      }
      function ce(a2, b2) {
        var c2 = Pd();
        b2 = b2 === void 0 ? null : b2;
        var d = c2.memoizedState;
        if (d !== null && b2 !== null && Id(b2, d[1]))
          return d[0];
        c2.memoizedState = [a2, b2];
        return a2;
      }
      function Td(a2, b2, c2) {
        if (!(25 > Hd))
          throw Error(n2(301));
        var d = a2.alternate;
        if (a2 === yd || d !== null && d === yd)
          if (Fd = true, a2 = { expirationTime: xd, suspenseConfig: null, action: c2, eagerReducer: null, eagerState: null, next: null }, Gd === null && (Gd = new Map()), c2 = Gd.get(b2), c2 === void 0)
            Gd.set(b2, a2);
          else {
            for (b2 = c2; b2.next !== null; )
              b2 = b2.next;
            b2.next = a2;
          }
        else {
          var e2 = G(), f = Sc.suspense;
          e2 = Vc(e2, a2, f);
          f = { expirationTime: e2, suspenseConfig: f, action: c2, eagerReducer: null, eagerState: null, next: null };
          var g2 = b2.last;
          if (g2 === null)
            f.next = f;
          else {
            var l2 = g2.next;
            l2 !== null && (f.next = l2);
            g2.next = f;
          }
          b2.last = f;
          if (a2.expirationTime === 0 && (d === null || d.expirationTime === 0) && (d = b2.lastRenderedReducer, d !== null))
            try {
              var h = b2.lastRenderedState, k = d(h, c2);
              f.eagerReducer = d;
              f.eagerState = k;
              if (oc(k, h))
                return;
            } catch (p) {
            } finally {
            }
          Wc(a2, e2);
        }
      }
      var Md = { readContext: Cc, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useResponder: P, useDeferredValue: P, useTransition: P }, Kd = { readContext: Cc, useCallback: be, useContext: Cc, useEffect: Yd, useImperativeHandle: function(a2, b2, c2) {
        c2 = c2 !== null && c2 !== void 0 ? c2.concat([a2]) : null;
        return Wd(4, 36, $d.bind(null, b2, a2), c2);
      }, useLayoutEffect: function(a2, b2) {
        return Wd(4, 36, a2, b2);
      }, useMemo: function(a2, b2) {
        var c2 = Od();
        b2 = b2 === void 0 ? null : b2;
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }, useReducer: function(a2, b2, c2) {
        var d = Od();
        b2 = c2 !== void 0 ? c2(b2) : b2;
        d.memoizedState = d.baseState = b2;
        a2 = d.queue = { last: null, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
        a2 = a2.dispatch = Td.bind(null, yd, a2);
        return [d.memoizedState, a2];
      }, useRef: function(a2) {
        var b2 = Od();
        a2 = { current: a2 };
        return b2.memoizedState = a2;
      }, useState: Sd, useDebugValue: ae, useResponder: vd, useDeferredValue: function(a2, b2) {
        var c2 = Sd(a2), d = c2[0], e2 = c2[1];
        Yd(function() {
          m.unstable_next(function() {
            var c3 = J.suspense;
            J.suspense = b2 === void 0 ? null : b2;
            try {
              e2(a2);
            } finally {
              J.suspense = c3;
            }
          });
        }, [a2, b2]);
        return d;
      }, useTransition: function(a2) {
        var b2 = Sd(false), c2 = b2[0], d = b2[1];
        return [be(function(b3) {
          d(true);
          m.unstable_next(function() {
            var c3 = J.suspense;
            J.suspense = a2 === void 0 ? null : a2;
            try {
              d(false), b3();
            } finally {
              J.suspense = c3;
            }
          });
        }, [a2, c2]), c2];
      } }, Ld = { readContext: Cc, useCallback: ce, useContext: Cc, useEffect: Zd, useImperativeHandle: function(a2, b2, c2) {
        c2 = c2 !== null && c2 !== void 0 ? c2.concat([a2]) : null;
        return Xd(4, 36, $d.bind(null, b2, a2), c2);
      }, useLayoutEffect: function(a2, b2) {
        return Xd(4, 36, a2, b2);
      }, useMemo: function(a2, b2) {
        var c2 = Pd();
        b2 = b2 === void 0 ? null : b2;
        var d = c2.memoizedState;
        if (d !== null && b2 !== null && Id(b2, d[1]))
          return d[0];
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }, useReducer: Rd, useRef: function() {
        return Pd().memoizedState;
      }, useState: Ud, useDebugValue: ae, useResponder: vd, useDeferredValue: function(a2, b2) {
        var c2 = Ud(a2), d = c2[0], e2 = c2[1];
        Zd(function() {
          m.unstable_next(function() {
            var c3 = J.suspense;
            J.suspense = b2 === void 0 ? null : b2;
            try {
              e2(a2);
            } finally {
              J.suspense = c3;
            }
          });
        }, [a2, b2]);
        return d;
      }, useTransition: function(a2) {
        var b2 = Ud(false), c2 = b2[0], d = b2[1];
        return [ce(function(b3) {
          d(true);
          m.unstable_next(function() {
            var c3 = J.suspense;
            J.suspense = a2 === void 0 ? null : a2;
            try {
              d(false), b3();
            } finally {
              J.suspense = c3;
            }
          });
        }, [a2, c2]), c2];
      } }, de = null, ee = null, fe = false;
      function ge(a2, b2) {
        var c2 = he(5, null, null, 0);
        c2.elementType = "DELETED";
        c2.type = "DELETED";
        c2.stateNode = b2;
        c2.return = a2;
        c2.effectTag = 8;
        a2.lastEffect !== null ? (a2.lastEffect.nextEffect = c2, a2.lastEffect = c2) : a2.firstEffect = a2.lastEffect = c2;
      }
      function ie(a2, b2) {
        switch (a2.tag) {
          case 5:
            return b2 = ob(b2, a2.type, a2.pendingProps), b2 !== null ? (a2.stateNode = b2, true) : false;
          case 6:
            return b2 = pb(b2, a2.pendingProps), b2 !== null ? (a2.stateNode = b2, true) : false;
          case 13:
            return false;
          default:
            return false;
        }
      }
      function je(a2) {
        if (fe) {
          var b2 = ee;
          if (b2) {
            var c2 = b2;
            if (!ie(a2, b2)) {
              b2 = sb(c2);
              if (!b2 || !ie(a2, b2)) {
                a2.effectTag = a2.effectTag & -1025 | 2;
                fe = false;
                de = a2;
                return;
              }
              ge(de, c2);
            }
            de = a2;
            ee = tb(b2);
          } else
            a2.effectTag = a2.effectTag & -1025 | 2, fe = false, de = a2;
        }
      }
      function ke(a2) {
        for (a2 = a2.return; a2 !== null && a2.tag !== 5 && a2.tag !== 3 && a2.tag !== 13; )
          a2 = a2.return;
        de = a2;
      }
      function ne(a2) {
        if (!Sa || a2 !== de)
          return false;
        if (!fe)
          return ke(a2), fe = true, false;
        var b2 = a2.type;
        if (a2.tag !== 5 || b2 !== "head" && b2 !== "body" && !Ja(b2, a2.memoizedProps))
          for (b2 = ee; b2; )
            ge(a2, b2), b2 = sb(b2);
        ke(a2);
        if (a2.tag === 13) {
          if (!Sa)
            throw Error(n2(316));
          a2 = a2.memoizedState;
          a2 = a2 !== null ? a2.dehydrated : null;
          if (!a2)
            throw Error(n2(317));
          ee = wb(a2);
        } else
          ee = de ? sb(a2.stateNode) : null;
        return true;
      }
      function oe() {
        Sa && (ee = de = null, fe = false);
      }
      var pe = q.ReactCurrentOwner, Bc = false;
      function Q(a2, b2, c2, d) {
        b2.child = a2 === null ? ld(b2, null, c2, d) : kd(b2, a2.child, c2, d);
      }
      function qe(a2, b2, c2, d, e2) {
        c2 = c2.render;
        var f = b2.ref;
        Ac(b2, e2);
        d = Jd(a2, b2, c2, d, f, e2);
        if (a2 !== null && !Bc)
          return b2.updateQueue = a2.updateQueue, b2.effectTag &= -517, a2.expirationTime <= e2 && (a2.expirationTime = 0), re(a2, b2, e2);
        b2.effectTag |= 1;
        Q(a2, b2, d, e2);
        return b2.child;
      }
      function se(a2, b2, c2, d, e2, f) {
        if (a2 === null) {
          var g2 = c2.type;
          if (typeof g2 === "function" && !te(g2) && g2.defaultProps === void 0 && c2.compare === null && c2.defaultProps === void 0)
            return b2.tag = 15, b2.type = g2, ue(a2, b2, g2, d, e2, f);
          a2 = hd(c2.type, null, d, null, b2.mode, f);
          a2.ref = b2.ref;
          a2.return = b2;
          return b2.child = a2;
        }
        g2 = a2.child;
        if (e2 < f && (e2 = g2.memoizedProps, c2 = c2.compare, c2 = c2 !== null ? c2 : qc, c2(e2, d) && a2.ref === b2.ref))
          return re(a2, b2, f);
        b2.effectTag |= 1;
        a2 = fd(g2, d, f);
        a2.ref = b2.ref;
        a2.return = b2;
        return b2.child = a2;
      }
      function ue(a2, b2, c2, d, e2, f) {
        return a2 !== null && qc(a2.memoizedProps, d) && a2.ref === b2.ref && (Bc = false, e2 < f) ? re(a2, b2, f) : ve(a2, b2, c2, d, f);
      }
      function we(a2, b2) {
        var c2 = b2.ref;
        if (a2 === null && c2 !== null || a2 !== null && a2.ref !== c2)
          b2.effectTag |= 128;
      }
      function ve(a2, b2, c2, d, e2) {
        var f = C(c2) ? Eb : A.current;
        f = Fb(b2, f);
        Ac(b2, e2);
        c2 = Jd(a2, b2, c2, d, f, e2);
        if (a2 !== null && !Bc)
          return b2.updateQueue = a2.updateQueue, b2.effectTag &= -517, a2.expirationTime <= e2 && (a2.expirationTime = 0), re(a2, b2, e2);
        b2.effectTag |= 1;
        Q(a2, b2, c2, e2);
        return b2.child;
      }
      function xe(a2, b2, c2, d, e2) {
        if (C(c2)) {
          var f = true;
          Kb(b2);
        } else
          f = false;
        Ac(b2, e2);
        if (b2.stateNode === null)
          a2 !== null && (a2.alternate = null, b2.alternate = null, b2.effectTag |= 2), Zc(b2, c2, d, e2), ad(b2, c2, d, e2), d = true;
        else if (a2 === null) {
          var g2 = b2.stateNode, l2 = b2.memoizedProps;
          g2.props = l2;
          var h = g2.context, k = c2.contextType;
          typeof k === "object" && k !== null ? k = Cc(k) : (k = C(c2) ? Eb : A.current, k = Fb(b2, k));
          var p = c2.getDerivedStateFromProps, D = typeof p === "function" || typeof g2.getSnapshotBeforeUpdate === "function";
          D || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (l2 !== d || h !== k) && $c(b2, g2, d, k);
          Dc = false;
          var x = b2.memoizedState;
          h = g2.state = x;
          var K = b2.updateQueue;
          K !== null && (Nc(b2, K, d, g2, e2), h = b2.memoizedState);
          l2 !== d || x !== h || B.current || Dc ? (typeof p === "function" && (Uc(b2, c2, p, d), h = b2.memoizedState), (l2 = Dc || Yc(b2, c2, l2, d, x, h, k)) ? (D || typeof g2.UNSAFE_componentWillMount !== "function" && typeof g2.componentWillMount !== "function" || (typeof g2.componentWillMount === "function" && g2.componentWillMount(), typeof g2.UNSAFE_componentWillMount === "function" && g2.UNSAFE_componentWillMount()), typeof g2.componentDidMount === "function" && (b2.effectTag |= 4)) : (typeof g2.componentDidMount === "function" && (b2.effectTag |= 4), b2.memoizedProps = d, b2.memoizedState = h), g2.props = d, g2.state = h, g2.context = k, d = l2) : (typeof g2.componentDidMount === "function" && (b2.effectTag |= 4), d = false);
        } else
          g2 = b2.stateNode, l2 = b2.memoizedProps, g2.props = b2.type === b2.elementType ? l2 : rc(b2.type, l2), h = g2.context, k = c2.contextType, typeof k === "object" && k !== null ? k = Cc(k) : (k = C(c2) ? Eb : A.current, k = Fb(b2, k)), p = c2.getDerivedStateFromProps, (D = typeof p === "function" || typeof g2.getSnapshotBeforeUpdate === "function") || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (l2 !== d || h !== k) && $c(b2, g2, d, k), Dc = false, h = b2.memoizedState, x = g2.state = h, K = b2.updateQueue, K !== null && (Nc(b2, K, d, g2, e2), x = b2.memoizedState), l2 !== d || h !== x || B.current || Dc ? (typeof p === "function" && (Uc(b2, c2, p, d), x = b2.memoizedState), (p = Dc || Yc(b2, c2, l2, d, h, x, k)) ? (D || typeof g2.UNSAFE_componentWillUpdate !== "function" && typeof g2.componentWillUpdate !== "function" || (typeof g2.componentWillUpdate === "function" && g2.componentWillUpdate(d, x, k), typeof g2.UNSAFE_componentWillUpdate === "function" && g2.UNSAFE_componentWillUpdate(d, x, k)), typeof g2.componentDidUpdate === "function" && (b2.effectTag |= 4), typeof g2.getSnapshotBeforeUpdate === "function" && (b2.effectTag |= 256)) : (typeof g2.componentDidUpdate !== "function" || l2 === a2.memoizedProps && h === a2.memoizedState || (b2.effectTag |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || l2 === a2.memoizedProps && h === a2.memoizedState || (b2.effectTag |= 256), b2.memoizedProps = d, b2.memoizedState = x), g2.props = d, g2.state = x, g2.context = k, d = p) : (typeof g2.componentDidUpdate !== "function" || l2 === a2.memoizedProps && h === a2.memoizedState || (b2.effectTag |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || l2 === a2.memoizedProps && h === a2.memoizedState || (b2.effectTag |= 256), d = false);
        return ye(a2, b2, c2, d, f, e2);
      }
      function ye(a2, b2, c2, d, e2, f) {
        we(a2, b2);
        var g2 = (b2.effectTag & 64) !== 0;
        if (!d && !g2)
          return e2 && Lb(b2, c2, false), re(a2, b2, f);
        d = b2.stateNode;
        pe.current = b2;
        var l2 = g2 && typeof c2.getDerivedStateFromError !== "function" ? null : d.render();
        b2.effectTag |= 1;
        a2 !== null && g2 ? (b2.child = kd(b2, a2.child, null, f), b2.child = kd(b2, null, l2, f)) : Q(a2, b2, l2, f);
        b2.memoizedState = d.state;
        e2 && Lb(b2, c2, true);
        return b2.child;
      }
      function ze(a2) {
        var b2 = a2.stateNode;
        b2.pendingContext ? Ib(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && Ib(a2, b2.context, false);
        qd(a2, b2.containerInfo);
      }
      var Ae = { dehydrated: null, retryTime: 0 };
      function Be(a2, b2, c2) {
        var d = b2.mode, e2 = b2.pendingProps, f = I.current, g2 = false, l2;
        (l2 = (b2.effectTag & 64) !== 0) || (l2 = (f & 2) !== 0 && (a2 === null || a2.memoizedState !== null));
        l2 ? (g2 = true, b2.effectTag &= -65) : a2 !== null && a2.memoizedState === null || e2.fallback === void 0 || e2.unstable_avoidThisFallback === true || (f |= 1);
        z(I, f & 1, b2);
        if (a2 === null) {
          e2.fallback !== void 0 && je(b2);
          if (g2) {
            g2 = e2.fallback;
            e2 = jd(null, d, 0, null);
            e2.return = b2;
            if ((b2.mode & 2) === 0)
              for (a2 = b2.memoizedState !== null ? b2.child.child : b2.child, e2.child = a2; a2 !== null; )
                a2.return = e2, a2 = a2.sibling;
            c2 = jd(g2, d, c2, null);
            c2.return = b2;
            e2.sibling = c2;
            b2.memoizedState = Ae;
            b2.child = e2;
            return c2;
          }
          d = e2.children;
          b2.memoizedState = null;
          return b2.child = ld(b2, null, d, c2);
        }
        if (a2.memoizedState !== null) {
          a2 = a2.child;
          d = a2.sibling;
          if (g2) {
            e2 = e2.fallback;
            c2 = fd(a2, a2.pendingProps, 0);
            c2.return = b2;
            if ((b2.mode & 2) === 0 && (g2 = b2.memoizedState !== null ? b2.child.child : b2.child, g2 !== a2.child))
              for (c2.child = g2; g2 !== null; )
                g2.return = c2, g2 = g2.sibling;
            d = fd(d, e2, d.expirationTime);
            d.return = b2;
            c2.sibling = d;
            c2.childExpirationTime = 0;
            b2.memoizedState = Ae;
            b2.child = c2;
            return d;
          }
          c2 = kd(b2, a2.child, e2.children, c2);
          b2.memoizedState = null;
          return b2.child = c2;
        }
        a2 = a2.child;
        if (g2) {
          g2 = e2.fallback;
          e2 = jd(null, d, 0, null);
          e2.return = b2;
          e2.child = a2;
          a2 !== null && (a2.return = e2);
          if ((b2.mode & 2) === 0)
            for (a2 = b2.memoizedState !== null ? b2.child.child : b2.child, e2.child = a2; a2 !== null; )
              a2.return = e2, a2 = a2.sibling;
          c2 = jd(g2, d, c2, null);
          c2.return = b2;
          e2.sibling = c2;
          c2.effectTag |= 2;
          e2.childExpirationTime = 0;
          b2.memoizedState = Ae;
          b2.child = e2;
          return c2;
        }
        b2.memoizedState = null;
        return b2.child = kd(b2, a2, e2.children, c2);
      }
      function Ce(a2, b2) {
        a2.expirationTime < b2 && (a2.expirationTime = b2);
        var c2 = a2.alternate;
        c2 !== null && c2.expirationTime < b2 && (c2.expirationTime = b2);
        zc(a2.return, b2);
      }
      function De(a2, b2, c2, d, e2, f) {
        var g2 = a2.memoizedState;
        g2 === null ? a2.memoizedState = { isBackwards: b2, rendering: null, last: d, tail: c2, tailExpiration: 0, tailMode: e2, lastEffect: f } : (g2.isBackwards = b2, g2.rendering = null, g2.last = d, g2.tail = c2, g2.tailExpiration = 0, g2.tailMode = e2, g2.lastEffect = f);
      }
      function Ee(a2, b2, c2) {
        var d = b2.pendingProps, e2 = d.revealOrder, f = d.tail;
        Q(a2, b2, d.children, c2);
        d = I.current;
        if ((d & 2) !== 0)
          d = d & 1 | 2, b2.effectTag |= 64;
        else {
          if (a2 !== null && (a2.effectTag & 64) !== 0)
            a:
              for (a2 = b2.child; a2 !== null; ) {
                if (a2.tag === 13)
                  a2.memoizedState !== null && Ce(a2, c2);
                else if (a2.tag === 19)
                  Ce(a2, c2);
                else if (a2.child !== null) {
                  a2.child.return = a2;
                  a2 = a2.child;
                  continue;
                }
                if (a2 === b2)
                  break a;
                for (; a2.sibling === null; ) {
                  if (a2.return === null || a2.return === b2)
                    break a;
                  a2 = a2.return;
                }
                a2.sibling.return = a2.return;
                a2 = a2.sibling;
              }
          d &= 1;
        }
        z(I, d, b2);
        if ((b2.mode & 2) === 0)
          b2.memoizedState = null;
        else
          switch (e2) {
            case "forwards":
              c2 = b2.child;
              for (e2 = null; c2 !== null; )
                a2 = c2.alternate, a2 !== null && ud(a2) === null && (e2 = c2), c2 = c2.sibling;
              c2 = e2;
              c2 === null ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
              De(b2, false, e2, c2, f, b2.lastEffect);
              break;
            case "backwards":
              c2 = null;
              e2 = b2.child;
              for (b2.child = null; e2 !== null; ) {
                a2 = e2.alternate;
                if (a2 !== null && ud(a2) === null) {
                  b2.child = e2;
                  break;
                }
                a2 = e2.sibling;
                e2.sibling = c2;
                c2 = e2;
                e2 = a2;
              }
              De(b2, true, c2, null, f, b2.lastEffect);
              break;
            case "together":
              De(b2, false, null, null, void 0, b2.lastEffect);
              break;
            default:
              b2.memoizedState = null;
          }
        return b2.child;
      }
      function re(a2, b2, c2) {
        a2 !== null && (b2.dependencies = a2.dependencies);
        var d = b2.expirationTime;
        d !== 0 && Pc(d);
        if (b2.childExpirationTime < c2)
          return null;
        if (a2 !== null && b2.child !== a2.child)
          throw Error(n2(153));
        if (b2.child !== null) {
          a2 = b2.child;
          c2 = fd(a2, a2.pendingProps, a2.expirationTime);
          b2.child = c2;
          for (c2.return = b2; a2.sibling !== null; )
            a2 = a2.sibling, c2 = c2.sibling = fd(a2, a2.pendingProps, a2.expirationTime), c2.return = b2;
          c2.sibling = null;
        }
        return b2.child;
      }
      function Fe(a2) {
        a2.effectTag |= 4;
      }
      var Ge, He, Ie, Je;
      if (Qa)
        Ge = function(a2, b2) {
          for (var c2 = b2.child; c2 !== null; ) {
            if (c2.tag === 5 || c2.tag === 6)
              Fa(a2, c2.stateNode);
            else if (c2.tag !== 4 && c2.child !== null) {
              c2.child.return = c2;
              c2 = c2.child;
              continue;
            }
            if (c2 === b2)
              break;
            for (; c2.sibling === null; ) {
              if (c2.return === null || c2.return === b2)
                return;
              c2 = c2.return;
            }
            c2.sibling.return = c2.return;
            c2 = c2.sibling;
          }
        }, He = function() {
        }, Ie = function(a2, b2, c2, d, e2) {
          a2 = a2.memoizedProps;
          if (a2 !== d) {
            var f = b2.stateNode, g2 = pd(H.current);
            c2 = Ia(f, c2, a2, d, e2, g2);
            (b2.updateQueue = c2) && Fe(b2);
          }
        }, Je = function(a2, b2, c2, d) {
          c2 !== d && Fe(b2);
        };
      else if (Ra) {
        Ge = function(a2, b2, c2, d) {
          for (var e2 = b2.child; e2 !== null; ) {
            if (e2.tag === 5) {
              var f = e2.stateNode;
              c2 && d && (f = mb(f, e2.type, e2.memoizedProps, e2));
              Fa(a2, f);
            } else if (e2.tag === 6)
              f = e2.stateNode, c2 && d && (f = nb(f, e2.memoizedProps, e2)), Fa(a2, f);
            else if (e2.tag !== 4) {
              if (e2.tag === 13 && (e2.effectTag & 4) !== 0 && (f = e2.memoizedState !== null)) {
                var g2 = e2.child;
                if (g2 !== null && (g2.child !== null && (g2.child.return = g2, Ge(a2, g2, true, f)), f = g2.sibling, f !== null)) {
                  f.return = e2;
                  e2 = f;
                  continue;
                }
              }
              if (e2.child !== null) {
                e2.child.return = e2;
                e2 = e2.child;
                continue;
              }
            }
            if (e2 === b2)
              break;
            for (; e2.sibling === null; ) {
              if (e2.return === null || e2.return === b2)
                return;
              e2 = e2.return;
            }
            e2.sibling.return = e2.return;
            e2 = e2.sibling;
          }
        };
        var Ke = function(a2, b2, c2, d) {
          for (var e2 = b2.child; e2 !== null; ) {
            if (e2.tag === 5) {
              var f = e2.stateNode;
              c2 && d && (f = mb(f, e2.type, e2.memoizedProps, e2));
              ib(a2, f);
            } else if (e2.tag === 6)
              f = e2.stateNode, c2 && d && (f = nb(f, e2.memoizedProps, e2)), ib(a2, f);
            else if (e2.tag !== 4) {
              if (e2.tag === 13 && (e2.effectTag & 4) !== 0 && (f = e2.memoizedState !== null)) {
                var g2 = e2.child;
                if (g2 !== null && (g2.child !== null && (g2.child.return = g2, Ke(a2, g2, true, f)), f = g2.sibling, f !== null)) {
                  f.return = e2;
                  e2 = f;
                  continue;
                }
              }
              if (e2.child !== null) {
                e2.child.return = e2;
                e2 = e2.child;
                continue;
              }
            }
            if (e2 === b2)
              break;
            for (; e2.sibling === null; ) {
              if (e2.return === null || e2.return === b2)
                return;
              e2 = e2.return;
            }
            e2.sibling.return = e2.return;
            e2 = e2.sibling;
          }
        };
        He = function(a2) {
          var b2 = a2.stateNode;
          if (a2.firstEffect !== null) {
            var c2 = b2.containerInfo, d = hb(c2);
            Ke(d, a2, false, false);
            b2.pendingChildren = d;
            Fe(a2);
            kb(c2, d);
          }
        };
        Ie = function(a2, b2, c2, d, e2) {
          var f = a2.stateNode, g2 = a2.memoizedProps;
          if ((a2 = b2.firstEffect === null) && g2 === d)
            b2.stateNode = f;
          else {
            var l2 = b2.stateNode, h = pd(H.current), k = null;
            g2 !== d && (k = Ia(l2, c2, g2, d, e2, h));
            a2 && k === null ? b2.stateNode = f : (f = gb(f, k, c2, g2, d, b2, a2, l2), Ga(f, c2, d, e2, h) && Fe(b2), b2.stateNode = f, a2 ? Fe(b2) : Ge(f, b2, false, false));
          }
        };
        Je = function(a2, b2, c2, d) {
          c2 !== d && (a2 = pd(od.current), c2 = pd(H.current), b2.stateNode = La(d, a2, c2, b2), Fe(b2));
        };
      } else
        He = function() {
        }, Ie = function() {
        }, Je = function() {
        };
      function Le(a2, b2) {
        switch (a2.tailMode) {
          case "hidden":
            b2 = a2.tail;
            for (var c2 = null; b2 !== null; )
              b2.alternate !== null && (c2 = b2), b2 = b2.sibling;
            c2 === null ? a2.tail = null : c2.sibling = null;
            break;
          case "collapsed":
            c2 = a2.tail;
            for (var d = null; c2 !== null; )
              c2.alternate !== null && (d = c2), c2 = c2.sibling;
            d === null ? b2 || a2.tail === null ? a2.tail = null : a2.tail.sibling = null : d.sibling = null;
        }
      }
      function Me(a2) {
        switch (a2.tag) {
          case 1:
            C(a2.type) && Gb(a2);
            var b2 = a2.effectTag;
            return b2 & 4096 ? (a2.effectTag = b2 & -4097 | 64, a2) : null;
          case 3:
            rd(a2);
            Hb(a2);
            b2 = a2.effectTag;
            if ((b2 & 64) !== 0)
              throw Error(n2(285));
            a2.effectTag = b2 & -4097 | 64;
            return a2;
          case 5:
            return td(a2), null;
          case 13:
            return y2(I, a2), b2 = a2.effectTag, b2 & 4096 ? (a2.effectTag = b2 & -4097 | 64, a2) : null;
          case 19:
            return y2(I, a2), null;
          case 4:
            return rd(a2), null;
          case 10:
            return yc(a2), null;
          default:
            return null;
        }
      }
      function Ne(a2, b2) {
        return { value: a2, source: b2, stack: Ab(b2) };
      }
      var Oe = typeof WeakSet === "function" ? WeakSet : Set;
      function Pe(a2, b2) {
        var c2 = b2.source, d = b2.stack;
        d === null && c2 !== null && (d = Ab(c2));
        c2 !== null && ta(c2.type);
        b2 = b2.value;
        a2 !== null && a2.tag === 1 && ta(a2.type);
        try {
          console.error(b2);
        } catch (e2) {
          setTimeout(function() {
            throw e2;
          });
        }
      }
      function Qe(a2, b2) {
        try {
          b2.props = a2.memoizedProps, b2.state = a2.memoizedState, b2.componentWillUnmount();
        } catch (c2) {
          Re(a2, c2);
        }
      }
      function Se(a2) {
        var b2 = a2.ref;
        if (b2 !== null)
          if (typeof b2 === "function")
            try {
              b2(null);
            } catch (c2) {
              Re(a2, c2);
            }
          else
            b2.current = null;
      }
      function Te(a2, b2) {
        switch (b2.tag) {
          case 0:
          case 11:
          case 15:
            Ue(2, 0, b2);
            break;
          case 1:
            if (b2.effectTag & 256 && a2 !== null) {
              var c2 = a2.memoizedProps, d = a2.memoizedState;
              a2 = b2.stateNode;
              b2 = a2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? c2 : rc(b2.type, c2), d);
              a2.__reactInternalSnapshotBeforeUpdate = b2;
            }
            break;
          case 3:
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error(n2(163));
        }
      }
      function Ue(a2, b2, c2) {
        c2 = c2.updateQueue;
        c2 = c2 !== null ? c2.lastEffect : null;
        if (c2 !== null) {
          var d = c2 = c2.next;
          do {
            if ((d.tag & a2) !== 0) {
              var e2 = d.destroy;
              d.destroy = void 0;
              e2 !== void 0 && e2();
            }
            (d.tag & b2) !== 0 && (e2 = d.create, d.destroy = e2());
            d = d.next;
          } while (d !== c2);
        }
      }
      function Ve(a2, b2, c2) {
        typeof We === "function" && We(b2);
        switch (b2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            a2 = b2.updateQueue;
            if (a2 !== null && (a2 = a2.lastEffect, a2 !== null)) {
              var d = a2.next;
              hc(97 < c2 ? 97 : c2, function() {
                var a3 = d;
                do {
                  var c3 = a3.destroy;
                  if (c3 !== void 0) {
                    var g2 = b2;
                    try {
                      c3();
                    } catch (l2) {
                      Re(g2, l2);
                    }
                  }
                  a3 = a3.next;
                } while (a3 !== d);
              });
            }
            break;
          case 1:
            Se(b2);
            c2 = b2.stateNode;
            typeof c2.componentWillUnmount === "function" && Qe(b2, c2);
            break;
          case 5:
            Se(b2);
            break;
          case 4:
            Qa ? Xe(a2, b2, c2) : Ra && Ye(b2);
        }
      }
      function Ze(a2, b2, c2) {
        for (var d = b2; ; )
          if (Ve(a2, d, c2), d.child === null || Qa && d.tag === 4) {
            if (d === b2)
              break;
            for (; d.sibling === null; ) {
              if (d.return === null || d.return === b2)
                return;
              d = d.return;
            }
            d.sibling.return = d.return;
            d = d.sibling;
          } else
            d.child.return = d, d = d.child;
      }
      function $e(a2) {
        var b2 = a2.alternate;
        a2.return = null;
        a2.child = null;
        a2.memoizedState = null;
        a2.updateQueue = null;
        a2.dependencies = null;
        a2.alternate = null;
        a2.firstEffect = null;
        a2.lastEffect = null;
        a2.pendingProps = null;
        a2.memoizedProps = null;
        b2 !== null && $e(b2);
      }
      function Ye(a2) {
        if (Ra) {
          a2 = a2.stateNode.containerInfo;
          var b2 = hb(a2);
          lb(a2, b2);
        }
      }
      function af(a2) {
        return a2.tag === 5 || a2.tag === 3 || a2.tag === 4;
      }
      function bf(a2) {
        if (Qa) {
          a: {
            for (var b2 = a2.return; b2 !== null; ) {
              if (af(b2)) {
                var c2 = b2;
                break a;
              }
              b2 = b2.return;
            }
            throw Error(n2(160));
          }
          b2 = c2.stateNode;
          switch (c2.tag) {
            case 5:
              var d = false;
              break;
            case 3:
              b2 = b2.containerInfo;
              d = true;
              break;
            case 4:
              b2 = b2.containerInfo;
              d = true;
              break;
            default:
              throw Error(n2(161));
          }
          c2.effectTag & 16 && (bb(b2), c2.effectTag &= -17);
          a:
            b:
              for (c2 = a2; ; ) {
                for (; c2.sibling === null; ) {
                  if (c2.return === null || af(c2.return)) {
                    c2 = null;
                    break a;
                  }
                  c2 = c2.return;
                }
                c2.sibling.return = c2.return;
                for (c2 = c2.sibling; c2.tag !== 5 && c2.tag !== 6 && c2.tag !== 18; ) {
                  if (c2.effectTag & 2)
                    continue b;
                  if (c2.child === null || c2.tag === 4)
                    continue b;
                  else
                    c2.child.return = c2, c2 = c2.child;
                }
                if (!(c2.effectTag & 2)) {
                  c2 = c2.stateNode;
                  break a;
                }
              }
          for (var e2 = a2; ; ) {
            var f = e2.tag === 5 || e2.tag === 6;
            if (f)
              f = f ? e2.stateNode : e2.stateNode.instance, c2 ? d ? Za(b2, f, c2) : Ya(b2, f, c2) : d ? Ua(b2, f) : Ta(b2, f);
            else if (e2.tag !== 4 && e2.child !== null) {
              e2.child.return = e2;
              e2 = e2.child;
              continue;
            }
            if (e2 === a2)
              break;
            for (; e2.sibling === null; ) {
              if (e2.return === null || e2.return === a2)
                return;
              e2 = e2.return;
            }
            e2.sibling.return = e2.return;
            e2 = e2.sibling;
          }
        }
      }
      function Xe(a2, b2, c2) {
        for (var d = b2, e2 = false, f, g2; ; ) {
          if (!e2) {
            e2 = d.return;
            a:
              for (; ; ) {
                if (e2 === null)
                  throw Error(n2(160));
                f = e2.stateNode;
                switch (e2.tag) {
                  case 5:
                    g2 = false;
                    break a;
                  case 3:
                    f = f.containerInfo;
                    g2 = true;
                    break a;
                  case 4:
                    f = f.containerInfo;
                    g2 = true;
                    break a;
                }
                e2 = e2.return;
              }
            e2 = true;
          }
          if (d.tag === 5 || d.tag === 6)
            Ze(a2, d, c2), g2 ? ab(f, d.stateNode) : $a(f, d.stateNode);
          else if (d.tag === 4) {
            if (d.child !== null) {
              f = d.stateNode.containerInfo;
              g2 = true;
              d.child.return = d;
              d = d.child;
              continue;
            }
          } else if (Ve(a2, d, c2), d.child !== null) {
            d.child.return = d;
            d = d.child;
            continue;
          }
          if (d === b2)
            break;
          for (; d.sibling === null; ) {
            if (d.return === null || d.return === b2)
              return;
            d = d.return;
            d.tag === 4 && (e2 = false);
          }
          d.sibling.return = d.return;
          d = d.sibling;
        }
      }
      function cf(a2, b2) {
        if (Qa)
          switch (b2.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              Ue(4, 8, b2);
              break;
            case 1:
              break;
            case 5:
              var c2 = b2.stateNode;
              if (c2 != null) {
                var d = b2.memoizedProps;
                a2 = a2 !== null ? a2.memoizedProps : d;
                var e2 = b2.type, f = b2.updateQueue;
                b2.updateQueue = null;
                f !== null && Xa(c2, f, e2, a2, d, b2);
              }
              break;
            case 6:
              if (b2.stateNode === null)
                throw Error(n2(162));
              c2 = b2.memoizedProps;
              Va(b2.stateNode, a2 !== null ? a2.memoizedProps : c2, c2);
              break;
            case 3:
              Sa && (b2 = b2.stateNode, b2.hydrate && (b2.hydrate = false, xb(b2.containerInfo)));
              break;
            case 12:
              break;
            case 13:
              df(b2);
              ef(b2);
              break;
            case 19:
              ef(b2);
              break;
            case 17:
              break;
            case 20:
              break;
            case 21:
              break;
            default:
              throw Error(n2(163));
          }
        else {
          switch (b2.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              Ue(4, 8, b2);
              return;
            case 12:
              return;
            case 13:
              df(b2);
              ef(b2);
              return;
            case 19:
              ef(b2);
              return;
            case 3:
              Sa && (c2 = b2.stateNode, c2.hydrate && (c2.hydrate = false, xb(c2.containerInfo)));
          }
          a:
            if (Ra)
              switch (b2.tag) {
                case 1:
                case 5:
                case 6:
                case 20:
                  break a;
                case 3:
                case 4:
                  b2 = b2.stateNode;
                  lb(b2.containerInfo, b2.pendingChildren);
                  break a;
                default:
                  throw Error(n2(163));
              }
        }
      }
      function df(a2) {
        var b2 = a2;
        if (a2.memoizedState === null)
          var c2 = false;
        else
          c2 = true, b2 = a2.child, ff = E();
        if (Qa && b2 !== null)
          a:
            if (a2 = b2, Qa)
              for (b2 = a2; ; ) {
                if (b2.tag === 5) {
                  var d = b2.stateNode;
                  c2 ? cb(d) : eb(b2.stateNode, b2.memoizedProps);
                } else if (b2.tag === 6)
                  d = b2.stateNode, c2 ? db(d) : fb(d, b2.memoizedProps);
                else if (b2.tag === 13 && b2.memoizedState !== null && b2.memoizedState.dehydrated === null) {
                  d = b2.child.sibling;
                  d.return = b2;
                  b2 = d;
                  continue;
                } else if (b2.child !== null) {
                  b2.child.return = b2;
                  b2 = b2.child;
                  continue;
                }
                if (b2 === a2)
                  break a;
                for (; b2.sibling === null; ) {
                  if (b2.return === null || b2.return === a2)
                    break a;
                  b2 = b2.return;
                }
                b2.sibling.return = b2.return;
                b2 = b2.sibling;
              }
      }
      function ef(a2) {
        var b2 = a2.updateQueue;
        if (b2 !== null) {
          a2.updateQueue = null;
          var c2 = a2.stateNode;
          c2 === null && (c2 = a2.stateNode = new Oe());
          b2.forEach(function(b3) {
            var d = gf.bind(null, a2, b3);
            c2.has(b3) || (c2.add(b3), b3.then(d, d));
          });
        }
      }
      var hf = typeof WeakMap === "function" ? WeakMap : Map;
      function jf(a2, b2, c2) {
        c2 = Gc(c2, null);
        c2.tag = 3;
        c2.payload = { element: null };
        var d = b2.value;
        c2.callback = function() {
          kf || (kf = true, lf = d);
          Pe(a2, b2);
        };
        return c2;
      }
      function mf(a2, b2, c2) {
        c2 = Gc(c2, null);
        c2.tag = 3;
        var d = a2.type.getDerivedStateFromError;
        if (typeof d === "function") {
          var e2 = b2.value;
          c2.payload = function() {
            Pe(a2, b2);
            return d(e2);
          };
        }
        var f = a2.stateNode;
        f !== null && typeof f.componentDidCatch === "function" && (c2.callback = function() {
          typeof d !== "function" && (nf === null ? nf = new Set([this]) : nf.add(this), Pe(a2, b2));
          var c3 = b2.stack;
          this.componentDidCatch(b2.value, { componentStack: c3 !== null ? c3 : "" });
        });
        return c2;
      }
      var of = Math.ceil, pf = q.ReactCurrentDispatcher, qf = q.ReactCurrentOwner, R = 0, rf = 8, S = 16, sf = 32, tf = 0, uf = 1, vf = 2, wf = 3, xf = 4, yf = 5, T = R, U = null, V = null, W = 0, X = tf, zf = null, Af = 1073741823, Bf = 1073741823, Cf = null, Df = 0, Ef = false, ff = 0, Ff = 500, Y = null, kf = false, lf = null, nf = null, Gf = false, Hf = null, If = 90, Jf = null, Kf = 0, Lf = null, Mf = 0;
      function G() {
        return (T & (S | sf)) !== R ? 1073741821 - (E() / 10 | 0) : Mf !== 0 ? Mf : Mf = 1073741821 - (E() / 10 | 0);
      }
      function Vc(a2, b2, c2) {
        b2 = b2.mode;
        if ((b2 & 2) === 0)
          return 1073741823;
        var d = fc();
        if ((b2 & 4) === 0)
          return d === 99 ? 1073741823 : 1073741822;
        if ((T & S) !== R)
          return W;
        if (c2 !== null)
          a2 = mc(a2, c2.timeoutMs | 0 || 5e3, 250);
        else
          switch (d) {
            case 99:
              a2 = 1073741823;
              break;
            case 98:
              a2 = mc(a2, 150, 100);
              break;
            case 97:
            case 96:
              a2 = mc(a2, 5e3, 250);
              break;
            case 95:
              a2 = 2;
              break;
            default:
              throw Error(n2(326));
          }
        U !== null && a2 === W && --a2;
        return a2;
      }
      function Wc(a2, b2) {
        if (50 < Kf)
          throw Kf = 0, Lf = null, Error(n2(185));
        a2 = Nf(a2, b2);
        if (a2 !== null) {
          var c2 = fc();
          b2 === 1073741823 ? (T & rf) !== R && (T & (S | sf)) === R ? Of(a2) : (Z(a2), T === R && F()) : Z(a2);
          (T & 4) === R || c2 !== 98 && c2 !== 99 || (Jf === null ? Jf = new Map([[a2, b2]]) : (c2 = Jf.get(a2), (c2 === void 0 || c2 > b2) && Jf.set(a2, b2)));
        }
      }
      function Nf(a2, b2) {
        a2.expirationTime < b2 && (a2.expirationTime = b2);
        var c2 = a2.alternate;
        c2 !== null && c2.expirationTime < b2 && (c2.expirationTime = b2);
        var d = a2.return, e2 = null;
        if (d === null && a2.tag === 3)
          e2 = a2.stateNode;
        else
          for (; d !== null; ) {
            c2 = d.alternate;
            d.childExpirationTime < b2 && (d.childExpirationTime = b2);
            c2 !== null && c2.childExpirationTime < b2 && (c2.childExpirationTime = b2);
            if (d.return === null && d.tag === 3) {
              e2 = d.stateNode;
              break;
            }
            d = d.return;
          }
        e2 !== null && (U === e2 && (Pc(b2), X === xf && Pf(e2, W)), Qf(e2, b2));
        return e2;
      }
      function Rf(a2) {
        var b2 = a2.lastExpiredTime;
        if (b2 !== 0)
          return b2;
        b2 = a2.firstPendingTime;
        if (!Sf(a2, b2))
          return b2;
        b2 = a2.lastPingedTime;
        a2 = a2.nextKnownPendingLevel;
        return b2 > a2 ? b2 : a2;
      }
      function Z(a2) {
        if (a2.lastExpiredTime !== 0)
          a2.callbackExpirationTime = 1073741823, a2.callbackPriority = 99, a2.callbackNode = jc(Of.bind(null, a2));
        else {
          var b2 = Rf(a2), c2 = a2.callbackNode;
          if (b2 === 0)
            c2 !== null && (a2.callbackNode = null, a2.callbackExpirationTime = 0, a2.callbackPriority = 90);
          else {
            var d = G();
            b2 === 1073741823 ? d = 99 : b2 === 1 || b2 === 2 ? d = 95 : (d = 10 * (1073741821 - b2) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);
            if (c2 !== null) {
              var e2 = a2.callbackPriority;
              if (a2.callbackExpirationTime === b2 && e2 >= d)
                return;
              c2 !== $b && Ob(c2);
            }
            a2.callbackExpirationTime = b2;
            a2.callbackPriority = d;
            b2 = b2 === 1073741823 ? jc(Of.bind(null, a2)) : ic(d, Tf.bind(null, a2), { timeout: 10 * (1073741821 - b2) - E() });
            a2.callbackNode = b2;
          }
        }
      }
      function Tf(a2, b2) {
        Mf = 0;
        if (b2)
          return b2 = G(), Uf(a2, b2), Z(a2), null;
        var c2 = Rf(a2);
        if (c2 !== 0) {
          b2 = a2.callbackNode;
          if ((T & (S | sf)) !== R)
            throw Error(n2(327));
          Vf();
          a2 === U && c2 === W || Wf(a2, c2);
          if (V !== null) {
            var d = T;
            T |= S;
            var e2 = Xf(a2);
            do
              try {
                Yf();
                break;
              } catch (l2) {
                Zf(a2, l2);
              }
            while (1);
            wc();
            T = d;
            pf.current = e2;
            if (X === uf)
              throw b2 = zf, Wf(a2, c2), Pf(a2, c2), Z(a2), b2;
            if (V === null)
              switch (e2 = a2.finishedWork = a2.current.alternate, a2.finishedExpirationTime = c2, d = X, U = null, d) {
                case tf:
                case uf:
                  throw Error(n2(345));
                case vf:
                  Uf(a2, 2 < c2 ? 2 : c2);
                  break;
                case wf:
                  Pf(a2, c2);
                  d = a2.lastSuspendedTime;
                  c2 === d && (a2.nextKnownPendingLevel = $f(e2));
                  if (Af === 1073741823 && (e2 = ff + Ff - E(), 10 < e2)) {
                    if (Ef) {
                      var f = a2.lastPingedTime;
                      if (f === 0 || f >= c2) {
                        a2.lastPingedTime = c2;
                        Wf(a2, c2);
                        break;
                      }
                    }
                    f = Rf(a2);
                    if (f !== 0 && f !== c2)
                      break;
                    if (d !== 0 && d !== c2) {
                      a2.lastPingedTime = d;
                      break;
                    }
                    a2.timeoutHandle = Ma(ag.bind(null, a2), e2);
                    break;
                  }
                  ag(a2);
                  break;
                case xf:
                  Pf(a2, c2);
                  d = a2.lastSuspendedTime;
                  c2 === d && (a2.nextKnownPendingLevel = $f(e2));
                  if (Ef && (e2 = a2.lastPingedTime, e2 === 0 || e2 >= c2)) {
                    a2.lastPingedTime = c2;
                    Wf(a2, c2);
                    break;
                  }
                  e2 = Rf(a2);
                  if (e2 !== 0 && e2 !== c2)
                    break;
                  if (d !== 0 && d !== c2) {
                    a2.lastPingedTime = d;
                    break;
                  }
                  Bf !== 1073741823 ? d = 10 * (1073741821 - Bf) - E() : Af === 1073741823 ? d = 0 : (d = 10 * (1073741821 - Af) - 5e3, e2 = E(), c2 = 10 * (1073741821 - c2) - e2, d = e2 - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * of(d / 1960)) - d, c2 < d && (d = c2));
                  if (10 < d) {
                    a2.timeoutHandle = Ma(ag.bind(null, a2), d);
                    break;
                  }
                  ag(a2);
                  break;
                case yf:
                  if (Af !== 1073741823 && Cf !== null) {
                    f = Af;
                    var g2 = Cf;
                    d = g2.busyMinDurationMs | 0;
                    0 >= d ? d = 0 : (e2 = g2.busyDelayMs | 0, f = E() - (10 * (1073741821 - f) - (g2.timeoutMs | 0 || 5e3)), d = f <= e2 ? 0 : e2 + d - f);
                    if (10 < d) {
                      Pf(a2, c2);
                      a2.timeoutHandle = Ma(ag.bind(null, a2), d);
                      break;
                    }
                  }
                  ag(a2);
                  break;
                default:
                  throw Error(n2(329));
              }
            Z(a2);
            if (a2.callbackNode === b2)
              return Tf.bind(null, a2);
          }
        }
        return null;
      }
      function Of(a2) {
        var b2 = a2.lastExpiredTime;
        b2 = b2 !== 0 ? b2 : 1073741823;
        if (a2.finishedExpirationTime === b2)
          ag(a2);
        else {
          if ((T & (S | sf)) !== R)
            throw Error(n2(327));
          Vf();
          a2 === U && b2 === W || Wf(a2, b2);
          if (V !== null) {
            var c2 = T;
            T |= S;
            var d = Xf(a2);
            do
              try {
                bg();
                break;
              } catch (e2) {
                Zf(a2, e2);
              }
            while (1);
            wc();
            T = c2;
            pf.current = d;
            if (X === uf)
              throw c2 = zf, Wf(a2, b2), Pf(a2, b2), Z(a2), c2;
            if (V !== null)
              throw Error(n2(261));
            a2.finishedWork = a2.current.alternate;
            a2.finishedExpirationTime = b2;
            U = null;
            ag(a2);
            Z(a2);
          }
        }
        return null;
      }
      function cg(a2, b2) {
        Uf(a2, b2);
        Z(a2);
        (T & (S | sf)) === R && F();
      }
      function dg() {
        if (Jf !== null) {
          var a2 = Jf;
          Jf = null;
          a2.forEach(function(a3, c2) {
            Uf(c2, a3);
            Z(c2);
          });
          F();
        }
      }
      function eg(a2, b2) {
        if ((T & (S | sf)) !== R)
          throw Error(n2(187));
        var c2 = T;
        T |= 1;
        try {
          return hc(99, a2.bind(null, b2));
        } finally {
          T = c2, F();
        }
      }
      function Wf(a2, b2) {
        a2.finishedWork = null;
        a2.finishedExpirationTime = 0;
        var c2 = a2.timeoutHandle;
        c2 !== Oa && (a2.timeoutHandle = Oa, Na(c2));
        if (V !== null)
          for (c2 = V.return; c2 !== null; ) {
            var d = c2;
            switch (d.tag) {
              case 1:
                var e2 = d.type.childContextTypes;
                e2 !== null && e2 !== void 0 && Gb(d);
                break;
              case 3:
                rd(d);
                Hb(d);
                break;
              case 5:
                td(d);
                break;
              case 4:
                rd(d);
                break;
              case 13:
                y2(I, d);
                break;
              case 19:
                y2(I, d);
                break;
              case 10:
                yc(d);
            }
            c2 = c2.return;
          }
        U = a2;
        V = fd(a2.current, null, b2);
        W = b2;
        X = tf;
        zf = null;
        Bf = Af = 1073741823;
        Cf = null;
        Df = 0;
        Ef = false;
      }
      function Zf(a2, b2) {
        do {
          try {
            wc();
            Nd();
            if (V === null || V.return === null)
              return X = uf, zf = b2, null;
            a: {
              var c2 = a2, d = V.return, e2 = V, f = b2;
              b2 = W;
              e2.effectTag |= 2048;
              e2.firstEffect = e2.lastEffect = null;
              if (f !== null && typeof f === "object" && typeof f.then === "function") {
                var g2 = f, l2 = (I.current & 1) !== 0, h = d;
                do {
                  var k;
                  if (k = h.tag === 13) {
                    var p = h.memoizedState;
                    if (p !== null)
                      k = p.dehydrated !== null ? true : false;
                    else {
                      var D = h.memoizedProps;
                      k = D.fallback === void 0 ? false : D.unstable_avoidThisFallback !== true ? true : l2 ? false : true;
                    }
                  }
                  if (k) {
                    var x = h.updateQueue;
                    if (x === null) {
                      var K = new Set();
                      K.add(g2);
                      h.updateQueue = K;
                    } else
                      x.add(g2);
                    if ((h.mode & 2) === 0) {
                      h.effectTag |= 64;
                      e2.effectTag &= -2981;
                      if (e2.tag === 1)
                        if (e2.alternate === null)
                          e2.tag = 17;
                        else {
                          var Ha = Gc(1073741823, null);
                          Ha.tag = 2;
                          Ic(e2, Ha);
                        }
                      e2.expirationTime = 1073741823;
                      break a;
                    }
                    f = void 0;
                    e2 = b2;
                    var O = c2.pingCache;
                    O === null ? (O = c2.pingCache = new hf(), f = new Set(), O.set(g2, f)) : (f = O.get(g2), f === void 0 && (f = new Set(), O.set(g2, f)));
                    if (!f.has(e2)) {
                      f.add(e2);
                      var w = fg.bind(null, c2, g2, e2);
                      g2.then(w, w);
                    }
                    h.effectTag |= 4096;
                    h.expirationTime = b2;
                    break a;
                  }
                  h = h.return;
                } while (h !== null);
                f = Error((ta(e2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + Ab(e2));
              }
              X !== yf && (X = vf);
              f = Ne(f, e2);
              h = d;
              do {
                switch (h.tag) {
                  case 3:
                    g2 = f;
                    h.effectTag |= 4096;
                    h.expirationTime = b2;
                    var r2 = jf(h, g2, b2);
                    Jc(h, r2);
                    break a;
                  case 1:
                    g2 = f;
                    var t2 = h.type, N = h.stateNode;
                    if ((h.effectTag & 64) === 0 && (typeof t2.getDerivedStateFromError === "function" || N !== null && typeof N.componentDidCatch === "function" && (nf === null || !nf.has(N)))) {
                      h.effectTag |= 4096;
                      h.expirationTime = b2;
                      var Mc = mf(h, g2, b2);
                      Jc(h, Mc);
                      break a;
                    }
                }
                h = h.return;
              } while (h !== null);
            }
            V = gg(V);
          } catch (Sb) {
            b2 = Sb;
            continue;
          }
          break;
        } while (1);
      }
      function Xf() {
        var a2 = pf.current;
        pf.current = Md;
        return a2 === null ? Md : a2;
      }
      function Oc(a2, b2) {
        a2 < Af && 2 < a2 && (Af = a2);
        b2 !== null && a2 < Bf && 2 < a2 && (Bf = a2, Cf = b2);
      }
      function Pc(a2) {
        a2 > Df && (Df = a2);
      }
      function bg() {
        for (; V !== null; )
          V = hg(V);
      }
      function Yf() {
        for (; V !== null && !Pb(); )
          V = hg(V);
      }
      function hg(a2) {
        var b2 = ig(a2.alternate, a2, W);
        a2.memoizedProps = a2.pendingProps;
        b2 === null && (b2 = gg(a2));
        qf.current = null;
        return b2;
      }
      function gg(a2) {
        V = a2;
        do {
          var b2 = V.alternate;
          a2 = V.return;
          if ((V.effectTag & 2048) === 0) {
            a: {
              var c2 = b2;
              b2 = V;
              var d = W, e2 = b2.pendingProps;
              switch (b2.tag) {
                case 2:
                  break;
                case 16:
                  break;
                case 15:
                case 0:
                  break;
                case 1:
                  C(b2.type) && Gb(b2);
                  break;
                case 3:
                  rd(b2);
                  Hb(b2);
                  e2 = b2.stateNode;
                  e2.pendingContext && (e2.context = e2.pendingContext, e2.pendingContext = null);
                  (c2 === null || c2.child === null) && ne(b2) && Fe(b2);
                  He(b2);
                  break;
                case 5:
                  td(b2);
                  var f = pd(od.current);
                  d = b2.type;
                  if (c2 !== null && b2.stateNode != null)
                    Ie(c2, b2, d, e2, f), c2.ref !== b2.ref && (b2.effectTag |= 128);
                  else if (e2) {
                    c2 = pd(H.current);
                    if (ne(b2)) {
                      e2 = b2;
                      if (!Sa)
                        throw Error(n2(175));
                      c2 = ub(e2.stateNode, e2.type, e2.memoizedProps, f, c2, e2);
                      e2.updateQueue = c2;
                      c2 = c2 !== null ? true : false;
                      c2 && Fe(b2);
                    } else {
                      var g2 = Ea(d, e2, f, c2, b2);
                      Ge(g2, b2, false, false);
                      b2.stateNode = g2;
                      Ga(g2, d, e2, f, c2) && Fe(b2);
                    }
                    b2.ref !== null && (b2.effectTag |= 128);
                  } else if (b2.stateNode === null)
                    throw Error(n2(166));
                  break;
                case 6:
                  if (c2 && b2.stateNode != null)
                    Je(c2, b2, c2.memoizedProps, e2);
                  else {
                    if (typeof e2 !== "string" && b2.stateNode === null)
                      throw Error(n2(166));
                    c2 = pd(od.current);
                    f = pd(H.current);
                    if (ne(b2)) {
                      c2 = b2;
                      if (!Sa)
                        throw Error(n2(176));
                      (c2 = vb(c2.stateNode, c2.memoizedProps, c2)) && Fe(b2);
                    } else
                      b2.stateNode = La(e2, c2, f, b2);
                  }
                  break;
                case 11:
                  break;
                case 13:
                  y2(I, b2);
                  e2 = b2.memoizedState;
                  if ((b2.effectTag & 64) !== 0) {
                    b2.expirationTime = d;
                    break a;
                  }
                  e2 = e2 !== null;
                  f = false;
                  c2 === null ? b2.memoizedProps.fallback !== void 0 && ne(b2) : (d = c2.memoizedState, f = d !== null, e2 || d === null || (d = c2.child.sibling, d !== null && (g2 = b2.firstEffect, g2 !== null ? (b2.firstEffect = d, d.nextEffect = g2) : (b2.firstEffect = b2.lastEffect = d, d.nextEffect = null), d.effectTag = 8)));
                  if (e2 && !f && (b2.mode & 2) !== 0)
                    if (c2 === null && b2.memoizedProps.unstable_avoidThisFallback !== true || (I.current & 1) !== 0)
                      X === tf && (X = wf);
                    else {
                      if (X === tf || X === wf)
                        X = xf;
                      Df !== 0 && U !== null && (Pf(U, W), Qf(U, Df));
                    }
                  Ra && e2 && (b2.effectTag |= 4);
                  Qa && (e2 || f) && (b2.effectTag |= 4);
                  break;
                case 7:
                  break;
                case 8:
                  break;
                case 12:
                  break;
                case 4:
                  rd(b2);
                  He(b2);
                  break;
                case 10:
                  yc(b2);
                  break;
                case 9:
                  break;
                case 14:
                  break;
                case 17:
                  C(b2.type) && Gb(b2);
                  break;
                case 19:
                  y2(I, b2);
                  e2 = b2.memoizedState;
                  if (e2 === null)
                    break;
                  f = (b2.effectTag & 64) !== 0;
                  g2 = e2.rendering;
                  if (g2 === null)
                    if (f)
                      Le(e2, false);
                    else {
                      if (X !== tf || c2 !== null && (c2.effectTag & 64) !== 0)
                        for (c2 = b2.child; c2 !== null; ) {
                          g2 = ud(c2);
                          if (g2 !== null) {
                            b2.effectTag |= 64;
                            Le(e2, false);
                            c2 = g2.updateQueue;
                            c2 !== null && (b2.updateQueue = c2, b2.effectTag |= 4);
                            e2.lastEffect === null && (b2.firstEffect = null);
                            b2.lastEffect = e2.lastEffect;
                            c2 = d;
                            for (e2 = b2.child; e2 !== null; )
                              f = e2, d = c2, f.effectTag &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g2 = f.alternate, g2 === null ? (f.childExpirationTime = 0, f.expirationTime = d, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null) : (f.childExpirationTime = g2.childExpirationTime, f.expirationTime = g2.expirationTime, f.child = g2.child, f.memoizedProps = g2.memoizedProps, f.memoizedState = g2.memoizedState, f.updateQueue = g2.updateQueue, d = g2.dependencies, f.dependencies = d === null ? null : { expirationTime: d.expirationTime, firstContext: d.firstContext, responders: d.responders }), e2 = e2.sibling;
                            z(I, I.current & 1 | 2, b2);
                            b2 = b2.child;
                            break a;
                          }
                          c2 = c2.sibling;
                        }
                    }
                  else {
                    if (!f)
                      if (c2 = ud(g2), c2 !== null) {
                        if (b2.effectTag |= 64, f = true, c2 = c2.updateQueue, c2 !== null && (b2.updateQueue = c2, b2.effectTag |= 4), Le(e2, true), e2.tail === null && e2.tailMode === "hidden" && !g2.alternate) {
                          b2 = b2.lastEffect = e2.lastEffect;
                          b2 !== null && (b2.nextEffect = null);
                          break;
                        }
                      } else
                        E() > e2.tailExpiration && 1 < d && (b2.effectTag |= 64, f = true, Le(e2, false), b2.expirationTime = b2.childExpirationTime = d - 1);
                    e2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = e2.last, c2 !== null ? c2.sibling = g2 : b2.child = g2, e2.last = g2);
                  }
                  if (e2.tail !== null) {
                    e2.tailExpiration === 0 && (e2.tailExpiration = E() + 500);
                    c2 = e2.tail;
                    e2.rendering = c2;
                    e2.tail = c2.sibling;
                    e2.lastEffect = b2.lastEffect;
                    c2.sibling = null;
                    e2 = I.current;
                    e2 = f ? e2 & 1 | 2 : e2 & 1;
                    z(I, e2, b2);
                    b2 = c2;
                    break a;
                  }
                  break;
                case 20:
                  break;
                case 21:
                  break;
                default:
                  throw Error(n2(156, b2.tag));
              }
              b2 = null;
            }
            c2 = V;
            if (W === 1 || c2.childExpirationTime !== 1) {
              e2 = 0;
              for (f = c2.child; f !== null; )
                d = f.expirationTime, g2 = f.childExpirationTime, d > e2 && (e2 = d), g2 > e2 && (e2 = g2), f = f.sibling;
              c2.childExpirationTime = e2;
            }
            if (b2 !== null)
              return b2;
            a2 !== null && (a2.effectTag & 2048) === 0 && (a2.firstEffect === null && (a2.firstEffect = V.firstEffect), V.lastEffect !== null && (a2.lastEffect !== null && (a2.lastEffect.nextEffect = V.firstEffect), a2.lastEffect = V.lastEffect), 1 < V.effectTag && (a2.lastEffect !== null ? a2.lastEffect.nextEffect = V : a2.firstEffect = V, a2.lastEffect = V));
          } else {
            b2 = Me(V, W);
            if (b2 !== null)
              return b2.effectTag &= 2047, b2;
            a2 !== null && (a2.firstEffect = a2.lastEffect = null, a2.effectTag |= 2048);
          }
          b2 = V.sibling;
          if (b2 !== null)
            return b2;
          V = a2;
        } while (V !== null);
        X === tf && (X = yf);
        return null;
      }
      function $f(a2) {
        var b2 = a2.expirationTime;
        a2 = a2.childExpirationTime;
        return b2 > a2 ? b2 : a2;
      }
      function ag(a2) {
        var b2 = fc();
        hc(99, jg.bind(null, a2, b2));
        return null;
      }
      function jg(a2, b2) {
        do
          Vf();
        while (Hf !== null);
        if ((T & (S | sf)) !== R)
          throw Error(n2(327));
        var c2 = a2.finishedWork, d = a2.finishedExpirationTime;
        if (c2 === null)
          return null;
        a2.finishedWork = null;
        a2.finishedExpirationTime = 0;
        if (c2 === a2.current)
          throw Error(n2(177));
        a2.callbackNode = null;
        a2.callbackExpirationTime = 0;
        a2.callbackPriority = 90;
        a2.nextKnownPendingLevel = 0;
        var e2 = $f(c2);
        a2.firstPendingTime = e2;
        d <= a2.lastSuspendedTime ? a2.firstSuspendedTime = a2.lastSuspendedTime = a2.nextKnownPendingLevel = 0 : d <= a2.firstSuspendedTime && (a2.firstSuspendedTime = d - 1);
        d <= a2.lastPingedTime && (a2.lastPingedTime = 0);
        d <= a2.lastExpiredTime && (a2.lastExpiredTime = 0);
        a2 === U && (V = U = null, W = 0);
        1 < c2.effectTag ? c2.lastEffect !== null ? (c2.lastEffect.nextEffect = c2, e2 = c2.firstEffect) : e2 = c2 : e2 = c2.firstEffect;
        if (e2 !== null) {
          var f = T;
          T |= sf;
          qf.current = null;
          Ca(a2.containerInfo);
          Y = e2;
          do
            try {
              kg();
            } catch (jb) {
              if (Y === null)
                throw Error(n2(330));
              Re(Y, jb);
              Y = Y.nextEffect;
            }
          while (Y !== null);
          Y = e2;
          do
            try {
              for (var g2 = a2, l2 = b2; Y !== null; ) {
                var h = Y.effectTag;
                h & 16 && Qa && bb(Y.stateNode);
                if (h & 128) {
                  var k = Y.alternate;
                  if (k !== null) {
                    var p = k.ref;
                    p !== null && (typeof p === "function" ? p(null) : p.current = null);
                  }
                }
                switch (h & 1038) {
                  case 2:
                    bf(Y);
                    Y.effectTag &= -3;
                    break;
                  case 6:
                    bf(Y);
                    Y.effectTag &= -3;
                    cf(Y.alternate, Y);
                    break;
                  case 1024:
                    Y.effectTag &= -1025;
                    break;
                  case 1028:
                    Y.effectTag &= -1025;
                    cf(Y.alternate, Y);
                    break;
                  case 4:
                    cf(Y.alternate, Y);
                    break;
                  case 8:
                    var D = g2, x = Y, K = l2;
                    Qa ? Xe(D, x, K) : Ze(D, x, K);
                    $e(x);
                }
                Y = Y.nextEffect;
              }
            } catch (jb) {
              if (Y === null)
                throw Error(n2(330));
              Re(Y, jb);
              Y = Y.nextEffect;
            }
          while (Y !== null);
          Da(a2.containerInfo);
          a2.current = c2;
          Y = e2;
          do
            try {
              for (h = d; Y !== null; ) {
                var Ha = Y.effectTag;
                if (Ha & 36) {
                  var O = Y.alternate;
                  k = Y;
                  p = h;
                  switch (k.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Ue(16, 32, k);
                      break;
                    case 1:
                      var w = k.stateNode;
                      if (k.effectTag & 4)
                        if (O === null)
                          w.componentDidMount();
                        else {
                          var r2 = k.elementType === k.type ? O.memoizedProps : rc(k.type, O.memoizedProps);
                          w.componentDidUpdate(r2, O.memoizedState, w.__reactInternalSnapshotBeforeUpdate);
                        }
                      var t2 = k.updateQueue;
                      t2 !== null && Qc(k, t2, w, p);
                      break;
                    case 3:
                      var N = k.updateQueue;
                      if (N !== null) {
                        g2 = null;
                        if (k.child !== null)
                          switch (k.child.tag) {
                            case 5:
                              g2 = za(k.child.stateNode);
                              break;
                            case 1:
                              g2 = k.child.stateNode;
                          }
                        Qc(k, N, g2, p);
                      }
                      break;
                    case 5:
                      var Mc = k.stateNode;
                      O === null && k.effectTag & 4 && Wa(Mc, k.type, k.memoizedProps, k);
                      break;
                    case 6:
                      break;
                    case 4:
                      break;
                    case 12:
                      break;
                    case 13:
                      if (Sa && k.memoizedState === null) {
                        var Sb = k.alternate;
                        if (Sb !== null) {
                          var le = Sb.memoizedState;
                          if (le !== null) {
                            var me = le.dehydrated;
                            me !== null && yb(me);
                          }
                        }
                      }
                      break;
                    case 19:
                    case 17:
                    case 20:
                    case 21:
                      break;
                    default:
                      throw Error(n2(163));
                  }
                }
                if (Ha & 128) {
                  k = void 0;
                  var Tb = Y.ref;
                  if (Tb !== null) {
                    var v = Y.stateNode;
                    switch (Y.tag) {
                      case 5:
                        k = za(v);
                        break;
                      default:
                        k = v;
                    }
                    typeof Tb === "function" ? Tb(k) : Tb.current = k;
                  }
                }
                Y = Y.nextEffect;
              }
            } catch (jb) {
              if (Y === null)
                throw Error(n2(330));
              Re(Y, jb);
              Y = Y.nextEffect;
            }
          while (Y !== null);
          Y = null;
          ac();
          T = f;
        } else
          a2.current = c2;
        if (Gf)
          Gf = false, Hf = a2, If = b2;
        else
          for (Y = e2; Y !== null; )
            b2 = Y.nextEffect, Y.nextEffect = null, Y = b2;
        b2 = a2.firstPendingTime;
        b2 === 0 && (nf = null);
        b2 === 1073741823 ? a2 === Lf ? Kf++ : (Kf = 0, Lf = a2) : Kf = 0;
        typeof lg === "function" && lg(c2.stateNode, d);
        Z(a2);
        if (kf)
          throw kf = false, a2 = lf, lf = null, a2;
        if ((T & rf) !== R)
          return null;
        F();
        return null;
      }
      function kg() {
        for (; Y !== null; ) {
          var a2 = Y.effectTag;
          (a2 & 256) !== 0 && Te(Y.alternate, Y);
          (a2 & 512) === 0 || Gf || (Gf = true, ic(97, function() {
            Vf();
            return null;
          }));
          Y = Y.nextEffect;
        }
      }
      function Vf() {
        if (If !== 90) {
          var a2 = 97 < If ? 97 : If;
          If = 90;
          return hc(a2, mg);
        }
      }
      function mg() {
        if (Hf === null)
          return false;
        var a2 = Hf;
        Hf = null;
        if ((T & (S | sf)) !== R)
          throw Error(n2(331));
        var b2 = T;
        T |= sf;
        for (a2 = a2.current.firstEffect; a2 !== null; ) {
          try {
            var c2 = a2;
            if ((c2.effectTag & 512) !== 0)
              switch (c2.tag) {
                case 0:
                case 11:
                case 15:
                  Ue(128, 0, c2), Ue(0, 64, c2);
              }
          } catch (d) {
            if (a2 === null)
              throw Error(n2(330));
            Re(a2, d);
          }
          c2 = a2.nextEffect;
          a2.nextEffect = null;
          a2 = c2;
        }
        T = b2;
        F();
        return true;
      }
      function ng(a2, b2, c2) {
        b2 = Ne(c2, b2);
        b2 = jf(a2, b2, 1073741823);
        Ic(a2, b2);
        a2 = Nf(a2, 1073741823);
        a2 !== null && Z(a2);
      }
      function Re(a2, b2) {
        if (a2.tag === 3)
          ng(a2, a2, b2);
        else
          for (var c2 = a2.return; c2 !== null; ) {
            if (c2.tag === 3) {
              ng(c2, a2, b2);
              break;
            } else if (c2.tag === 1) {
              var d = c2.stateNode;
              if (typeof c2.type.getDerivedStateFromError === "function" || typeof d.componentDidCatch === "function" && (nf === null || !nf.has(d))) {
                a2 = Ne(b2, a2);
                a2 = mf(c2, a2, 1073741823);
                Ic(c2, a2);
                c2 = Nf(c2, 1073741823);
                c2 !== null && Z(c2);
                break;
              }
            }
            c2 = c2.return;
          }
      }
      function fg(a2, b2, c2) {
        var d = a2.pingCache;
        d !== null && d.delete(b2);
        U === a2 && W === c2 ? X === xf || X === wf && Af === 1073741823 && E() - ff < Ff ? Wf(a2, W) : Ef = true : Sf(a2, c2) && (b2 = a2.lastPingedTime, b2 !== 0 && b2 < c2 || (a2.lastPingedTime = c2, a2.finishedExpirationTime === c2 && (a2.finishedExpirationTime = 0, a2.finishedWork = null), Z(a2)));
      }
      function gf(a2, b2) {
        var c2 = a2.stateNode;
        c2 !== null && c2.delete(b2);
        b2 = 0;
        b2 === 0 && (b2 = G(), b2 = Vc(b2, a2, null));
        a2 = Nf(a2, b2);
        a2 !== null && Z(a2);
      }
      var ig;
      ig = function(a2, b2, c2) {
        var d = b2.expirationTime;
        if (a2 !== null) {
          var e2 = b2.pendingProps;
          if (a2.memoizedProps !== e2 || B.current)
            Bc = true;
          else {
            if (d < c2) {
              Bc = false;
              switch (b2.tag) {
                case 3:
                  ze(b2);
                  oe();
                  break;
                case 5:
                  sd(b2);
                  if (b2.mode & 4 && c2 !== 1 && Ka(b2.type, e2))
                    return b2.expirationTime = b2.childExpirationTime = 1, null;
                  break;
                case 1:
                  C(b2.type) && Kb(b2);
                  break;
                case 4:
                  qd(b2, b2.stateNode.containerInfo);
                  break;
                case 10:
                  xc(b2, b2.memoizedProps.value);
                  break;
                case 13:
                  if (b2.memoizedState !== null) {
                    d = b2.child.childExpirationTime;
                    if (d !== 0 && d >= c2)
                      return Be(a2, b2, c2);
                    z(I, I.current & 1, b2);
                    b2 = re(a2, b2, c2);
                    return b2 !== null ? b2.sibling : null;
                  }
                  z(I, I.current & 1, b2);
                  break;
                case 19:
                  d = b2.childExpirationTime >= c2;
                  if ((a2.effectTag & 64) !== 0) {
                    if (d)
                      return Ee(a2, b2, c2);
                    b2.effectTag |= 64;
                  }
                  e2 = b2.memoizedState;
                  e2 !== null && (e2.rendering = null, e2.tail = null);
                  z(I, I.current, b2);
                  if (!d)
                    return null;
              }
              return re(a2, b2, c2);
            }
            Bc = false;
          }
        } else
          Bc = false;
        b2.expirationTime = 0;
        switch (b2.tag) {
          case 2:
            d = b2.type;
            a2 !== null && (a2.alternate = null, b2.alternate = null, b2.effectTag |= 2);
            a2 = b2.pendingProps;
            e2 = Fb(b2, A.current);
            Ac(b2, c2);
            e2 = Jd(null, b2, d, a2, e2, c2);
            b2.effectTag |= 1;
            if (typeof e2 === "object" && e2 !== null && typeof e2.render === "function" && e2.$$typeof === void 0) {
              b2.tag = 1;
              Nd();
              if (C(d)) {
                var f = true;
                Kb(b2);
              } else
                f = false;
              b2.memoizedState = e2.state !== null && e2.state !== void 0 ? e2.state : null;
              var g2 = d.getDerivedStateFromProps;
              typeof g2 === "function" && Uc(b2, d, g2, a2);
              e2.updater = Xc;
              b2.stateNode = e2;
              e2._reactInternalFiber = b2;
              ad(b2, d, a2, c2);
              b2 = ye(null, b2, d, true, f, c2);
            } else
              b2.tag = 0, Q(null, b2, e2, c2), b2 = b2.child;
            return b2;
          case 16:
            e2 = b2.elementType;
            a2 !== null && (a2.alternate = null, b2.alternate = null, b2.effectTag |= 2);
            a2 = b2.pendingProps;
            sa(e2);
            if (e2._status !== 1)
              throw e2._result;
            e2 = e2._result;
            b2.type = e2;
            f = b2.tag = og(e2);
            a2 = rc(e2, a2);
            switch (f) {
              case 0:
                b2 = ve(null, b2, e2, a2, c2);
                break;
              case 1:
                b2 = xe(null, b2, e2, a2, c2);
                break;
              case 11:
                b2 = qe(null, b2, e2, a2, c2);
                break;
              case 14:
                b2 = se(null, b2, e2, rc(e2.type, a2), d, c2);
                break;
              default:
                throw Error(n2(306, e2, ""));
            }
            return b2;
          case 0:
            return d = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d ? e2 : rc(d, e2), ve(a2, b2, d, e2, c2);
          case 1:
            return d = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d ? e2 : rc(d, e2), xe(a2, b2, d, e2, c2);
          case 3:
            ze(b2);
            d = b2.updateQueue;
            if (d === null)
              throw Error(n2(282));
            e2 = b2.memoizedState;
            e2 = e2 !== null ? e2.element : null;
            Nc(b2, d, b2.pendingProps, null, c2);
            d = b2.memoizedState.element;
            if (d === e2)
              oe(), b2 = re(a2, b2, c2);
            else {
              if (e2 = b2.stateNode.hydrate)
                Sa ? (ee = tb(b2.stateNode.containerInfo), de = b2, e2 = fe = true) : e2 = false;
              if (e2)
                for (c2 = ld(b2, null, d, c2), b2.child = c2; c2; )
                  c2.effectTag = c2.effectTag & -3 | 1024, c2 = c2.sibling;
              else
                Q(a2, b2, d, c2), oe();
              b2 = b2.child;
            }
            return b2;
          case 5:
            return sd(b2), a2 === null && je(b2), d = b2.type, e2 = b2.pendingProps, f = a2 !== null ? a2.memoizedProps : null, g2 = e2.children, Ja(d, e2) ? g2 = null : f !== null && Ja(d, f) && (b2.effectTag |= 16), we(a2, b2), b2.mode & 4 && c2 !== 1 && Ka(d, e2) ? (b2.expirationTime = b2.childExpirationTime = 1, b2 = null) : (Q(a2, b2, g2, c2), b2 = b2.child), b2;
          case 6:
            return a2 === null && je(b2), null;
          case 13:
            return Be(a2, b2, c2);
          case 4:
            return qd(b2, b2.stateNode.containerInfo), d = b2.pendingProps, a2 === null ? b2.child = kd(b2, null, d, c2) : Q(a2, b2, d, c2), b2.child;
          case 11:
            return d = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d ? e2 : rc(d, e2), qe(a2, b2, d, e2, c2);
          case 7:
            return Q(a2, b2, b2.pendingProps, c2), b2.child;
          case 8:
            return Q(a2, b2, b2.pendingProps.children, c2), b2.child;
          case 12:
            return Q(a2, b2, b2.pendingProps.children, c2), b2.child;
          case 10:
            a: {
              d = b2.type._context;
              e2 = b2.pendingProps;
              g2 = b2.memoizedProps;
              f = e2.value;
              xc(b2, f);
              if (g2 !== null) {
                var l2 = g2.value;
                f = oc(l2, f) ? 0 : (typeof d._calculateChangedBits === "function" ? d._calculateChangedBits(l2, f) : 1073741823) | 0;
                if (f === 0) {
                  if (g2.children === e2.children && !B.current) {
                    b2 = re(a2, b2, c2);
                    break a;
                  }
                } else
                  for (l2 = b2.child, l2 !== null && (l2.return = b2); l2 !== null; ) {
                    var h = l2.dependencies;
                    if (h !== null) {
                      g2 = l2.child;
                      for (var k = h.firstContext; k !== null; ) {
                        if (k.context === d && (k.observedBits & f) !== 0) {
                          l2.tag === 1 && (k = Gc(c2, null), k.tag = 2, Ic(l2, k));
                          l2.expirationTime < c2 && (l2.expirationTime = c2);
                          k = l2.alternate;
                          k !== null && k.expirationTime < c2 && (k.expirationTime = c2);
                          zc(l2.return, c2);
                          h.expirationTime < c2 && (h.expirationTime = c2);
                          break;
                        }
                        k = k.next;
                      }
                    } else
                      g2 = l2.tag === 10 ? l2.type === b2.type ? null : l2.child : l2.child;
                    if (g2 !== null)
                      g2.return = l2;
                    else
                      for (g2 = l2; g2 !== null; ) {
                        if (g2 === b2) {
                          g2 = null;
                          break;
                        }
                        l2 = g2.sibling;
                        if (l2 !== null) {
                          l2.return = g2.return;
                          g2 = l2;
                          break;
                        }
                        g2 = g2.return;
                      }
                    l2 = g2;
                  }
              }
              Q(a2, b2, e2.children, c2);
              b2 = b2.child;
            }
            return b2;
          case 9:
            return e2 = b2.type, f = b2.pendingProps, d = f.children, Ac(b2, c2), e2 = Cc(e2, f.unstable_observedBits), d = d(e2), b2.effectTag |= 1, Q(a2, b2, d, c2), b2.child;
          case 14:
            return e2 = b2.type, f = rc(e2, b2.pendingProps), f = rc(e2.type, f), se(a2, b2, e2, f, d, c2);
          case 15:
            return ue(a2, b2, b2.type, b2.pendingProps, d, c2);
          case 17:
            return d = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d ? e2 : rc(d, e2), a2 !== null && (a2.alternate = null, b2.alternate = null, b2.effectTag |= 2), b2.tag = 1, C(d) ? (a2 = true, Kb(b2)) : a2 = false, Ac(b2, c2), Zc(b2, d, e2, c2), ad(b2, d, e2, c2), ye(null, b2, d, true, a2, c2);
          case 19:
            return Ee(a2, b2, c2);
        }
        throw Error(n2(156, b2.tag));
      };
      var lg = null, We = null;
      function pg(a2) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined")
          return false;
        var b2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (b2.isDisabled || !b2.supportsFiber)
          return true;
        try {
          var c2 = b2.inject(a2);
          lg = function(a3) {
            try {
              b2.onCommitFiberRoot(c2, a3, void 0, (a3.current.effectTag & 64) === 64);
            } catch (e2) {
            }
          };
          We = function(a3) {
            try {
              b2.onCommitFiberUnmount(c2, a3);
            } catch (e2) {
            }
          };
        } catch (d) {
        }
        return true;
      }
      function qg(a2, b2, c2, d) {
        this.tag = a2;
        this.key = c2;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b2;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d;
        this.effectTag = 0;
        this.lastEffect = this.firstEffect = this.nextEffect = null;
        this.childExpirationTime = this.expirationTime = 0;
        this.alternate = null;
      }
      function he(a2, b2, c2, d) {
        return new qg(a2, b2, c2, d);
      }
      function te(a2) {
        a2 = a2.prototype;
        return !(!a2 || !a2.isReactComponent);
      }
      function og(a2) {
        if (typeof a2 === "function")
          return te(a2) ? 1 : 0;
        if (a2 !== void 0 && a2 !== null) {
          a2 = a2.$$typeof;
          if (a2 === la)
            return 11;
          if (a2 === oa)
            return 14;
        }
        return 2;
      }
      function fd(a2, b2) {
        var c2 = a2.alternate;
        c2 === null ? (c2 = he(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.effectTag = 0, c2.nextEffect = null, c2.firstEffect = null, c2.lastEffect = null);
        c2.childExpirationTime = a2.childExpirationTime;
        c2.expirationTime = a2.expirationTime;
        c2.child = a2.child;
        c2.memoizedProps = a2.memoizedProps;
        c2.memoizedState = a2.memoizedState;
        c2.updateQueue = a2.updateQueue;
        b2 = a2.dependencies;
        c2.dependencies = b2 === null ? null : {
          expirationTime: b2.expirationTime,
          firstContext: b2.firstContext,
          responders: b2.responders
        };
        c2.sibling = a2.sibling;
        c2.index = a2.index;
        c2.ref = a2.ref;
        return c2;
      }
      function hd(a2, b2, c2, d, e2, f) {
        var g2 = 2;
        d = a2;
        if (typeof a2 === "function")
          te(a2) && (g2 = 1);
        else if (typeof a2 === "string")
          g2 = 5;
        else
          a:
            switch (a2) {
              case ea:
                return jd(c2.children, e2, f, b2);
              case ka:
                g2 = 8;
                e2 |= 7;
                break;
              case fa:
                g2 = 8;
                e2 |= 1;
                break;
              case ha:
                return a2 = he(12, c2, b2, e2 | 8), a2.elementType = ha, a2.type = ha, a2.expirationTime = f, a2;
              case ma:
                return a2 = he(13, c2, b2, e2), a2.type = ma, a2.elementType = ma, a2.expirationTime = f, a2;
              case na:
                return a2 = he(19, c2, b2, e2), a2.elementType = na, a2.expirationTime = f, a2;
              default:
                if (typeof a2 === "object" && a2 !== null)
                  switch (a2.$$typeof) {
                    case ia:
                      g2 = 10;
                      break a;
                    case ja:
                      g2 = 9;
                      break a;
                    case la:
                      g2 = 11;
                      break a;
                    case oa:
                      g2 = 14;
                      break a;
                    case pa:
                      g2 = 16;
                      d = null;
                      break a;
                  }
                throw Error(n2(130, a2 == null ? a2 : typeof a2, ""));
            }
        b2 = he(g2, c2, b2, e2);
        b2.elementType = a2;
        b2.type = d;
        b2.expirationTime = f;
        return b2;
      }
      function jd(a2, b2, c2, d) {
        a2 = he(7, a2, d, b2);
        a2.expirationTime = c2;
        return a2;
      }
      function gd(a2, b2, c2) {
        a2 = he(6, a2, null, b2);
        a2.expirationTime = c2;
        return a2;
      }
      function id(a2, b2, c2) {
        b2 = he(4, a2.children !== null ? a2.children : [], a2.key, b2);
        b2.expirationTime = c2;
        b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
        return b2;
      }
      function rg(a2, b2, c2) {
        this.tag = b2;
        this.current = null;
        this.containerInfo = a2;
        this.pingCache = this.pendingChildren = null;
        this.finishedExpirationTime = 0;
        this.finishedWork = null;
        this.timeoutHandle = Oa;
        this.pendingContext = this.context = null;
        this.hydrate = c2;
        this.callbackNode = null;
        this.callbackPriority = 90;
        this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
      }
      function Sf(a2, b2) {
        var c2 = a2.firstSuspendedTime;
        a2 = a2.lastSuspendedTime;
        return c2 !== 0 && c2 >= b2 && a2 <= b2;
      }
      function Pf(a2, b2) {
        var c2 = a2.firstSuspendedTime, d = a2.lastSuspendedTime;
        c2 < b2 && (a2.firstSuspendedTime = b2);
        if (d > b2 || c2 === 0)
          a2.lastSuspendedTime = b2;
        b2 <= a2.lastPingedTime && (a2.lastPingedTime = 0);
        b2 <= a2.lastExpiredTime && (a2.lastExpiredTime = 0);
      }
      function Qf(a2, b2) {
        b2 > a2.firstPendingTime && (a2.firstPendingTime = b2);
        var c2 = a2.firstSuspendedTime;
        c2 !== 0 && (b2 >= c2 ? a2.firstSuspendedTime = a2.lastSuspendedTime = a2.nextKnownPendingLevel = 0 : b2 >= a2.lastSuspendedTime && (a2.lastSuspendedTime = b2 + 1), b2 > a2.nextKnownPendingLevel && (a2.nextKnownPendingLevel = b2));
      }
      function Uf(a2, b2) {
        var c2 = a2.lastExpiredTime;
        if (c2 === 0 || c2 > b2)
          a2.lastExpiredTime = b2;
      }
      function sg(a2) {
        var b2 = a2._reactInternalFiber;
        if (b2 === void 0) {
          if (typeof a2.render === "function")
            throw Error(n2(188));
          throw Error(n2(268, Object.keys(a2)));
        }
        a2 = xa(b2);
        return a2 === null ? null : a2.stateNode;
      }
      function tg(a2, b2) {
        a2 = a2.memoizedState;
        a2 !== null && a2.dehydrated !== null && a2.retryTime < b2 && (a2.retryTime = b2);
      }
      function ug(a2, b2) {
        tg(a2, b2);
        (a2 = a2.alternate) && tg(a2, b2);
      }
      var vg = { createContainer: function(a2, b2, c2) {
        a2 = new rg(a2, b2, c2);
        b2 = he(3, null, null, b2 === 2 ? 7 : b2 === 1 ? 3 : 0);
        a2.current = b2;
        return b2.stateNode = a2;
      }, updateContainer: function(a2, b2, c2, d) {
        var e2 = b2.current, f = G(), g2 = Sc.suspense;
        f = Vc(f, e2, g2);
        a:
          if (c2) {
            c2 = c2._reactInternalFiber;
            b: {
              if (ua(c2) !== c2 || c2.tag !== 1)
                throw Error(n2(170));
              var l2 = c2;
              do {
                switch (l2.tag) {
                  case 3:
                    l2 = l2.stateNode.context;
                    break b;
                  case 1:
                    if (C(l2.type)) {
                      l2 = l2.stateNode.__reactInternalMemoizedMergedChildContext;
                      break b;
                    }
                }
                l2 = l2.return;
              } while (l2 !== null);
              throw Error(n2(171));
            }
            if (c2.tag === 1) {
              var h = c2.type;
              if (C(h)) {
                c2 = Jb(c2, h, l2);
                break a;
              }
            }
            c2 = l2;
          } else
            c2 = Db;
        b2.context === null ? b2.context = c2 : b2.pendingContext = c2;
        b2 = Gc(f, g2);
        b2.payload = { element: a2 };
        d = d === void 0 ? null : d;
        d !== null && (b2.callback = d);
        Ic(e2, b2);
        Wc(e2, f);
        return f;
      }, batchedEventUpdates: function(a2, b2) {
        var c2 = T;
        T |= 2;
        try {
          return a2(b2);
        } finally {
          T = c2, T === R && F();
        }
      }, batchedUpdates: function(a2, b2) {
        var c2 = T;
        T |= 1;
        try {
          return a2(b2);
        } finally {
          T = c2, T === R && F();
        }
      }, unbatchedUpdates: function(a2, b2) {
        var c2 = T;
        T &= -2;
        T |= rf;
        try {
          return a2(b2);
        } finally {
          T = c2, T === R && F();
        }
      }, deferredUpdates: function(a2) {
        return hc(97, a2);
      }, syncUpdates: function(a2, b2, c2, d) {
        return hc(99, a2.bind(null, b2, c2, d));
      }, discreteUpdates: function(a2, b2, c2, d) {
        var e2 = T;
        T |= 4;
        try {
          return hc(98, a2.bind(null, b2, c2, d));
        } finally {
          T = e2, T === R && F();
        }
      }, flushDiscreteUpdates: function() {
        (T & (1 | S | sf)) === R && (dg(), Vf());
      }, flushControlled: function(a2) {
        var b2 = T;
        T |= 1;
        try {
          hc(99, a2);
        } finally {
          T = b2, T === R && F();
        }
      }, flushSync: eg, flushPassiveEffects: Vf, IsThisRendererActing: { current: false }, getPublicRootInstance: function(a2) {
        a2 = a2.current;
        if (!a2.child)
          return null;
        switch (a2.child.tag) {
          case 5:
            return za(a2.child.stateNode);
          default:
            return a2.child.stateNode;
        }
      }, attemptSynchronousHydration: function(a2) {
        switch (a2.tag) {
          case 3:
            var b2 = a2.stateNode;
            b2.hydrate && cg(b2, b2.firstPendingTime);
            break;
          case 13:
            eg(function() {
              return Wc(a2, 1073741823);
            }), b2 = mc(G(), 150, 100), ug(a2, b2);
        }
      }, attemptUserBlockingHydration: function(a2) {
        if (a2.tag === 13) {
          var b2 = mc(G(), 150, 100);
          Wc(a2, b2);
          ug(a2, b2);
        }
      }, attemptContinuousHydration: function(a2) {
        if (a2.tag === 13) {
          G();
          var b2 = lc++;
          Wc(a2, b2);
          ug(a2, b2);
        }
      }, attemptHydrationAtCurrentPriority: function(a2) {
        if (a2.tag === 13) {
          var b2 = G();
          b2 = Vc(b2, a2, null);
          Wc(a2, b2);
          ug(a2, b2);
        }
      }, findHostInstance: sg, findHostInstanceWithWarning: function(a2) {
        return sg(a2);
      }, findHostInstanceWithNoPortals: function(a2) {
        a2 = ya(a2);
        return a2 === null ? null : a2.tag === 20 ? a2.stateNode.instance : a2.stateNode;
      }, shouldSuspend: function() {
        return false;
      }, injectIntoDevTools: function(a2) {
        var b2 = a2.findFiberByHostInstance;
        return pg(aa({}, a2, { overrideHookState: null, overrideProps: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: q.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
          a3 = xa(a3);
          return a3 === null ? null : a3.stateNode;
        }, findFiberByHostInstance: function(a3) {
          return b2 ? b2(a3) : null;
        }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null }));
      } };
      module2.exports = vg.default || vg;
      var $$$renderer = module2.exports;
      module2.exports = $$$reconciler;
      return $$$renderer;
    };
  }
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (process.env.NODE_ENV !== "production") {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (process.env.NODE_ENV !== "production") {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.production.min.js
var require_scheduler_tracing_production_min = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.production.min.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var b2 = 0;
    exports2.__interactionsRef = null;
    exports2.__subscriberRef = null;
    exports2.unstable_clear = function(a2) {
      return a2();
    };
    exports2.unstable_getCurrent = function() {
      return null;
    };
    exports2.unstable_getThreadID = function() {
      return ++b2;
    };
    exports2.unstable_trace = function(a2, d, c2) {
      return c2();
    };
    exports2.unstable_wrap = function(a2) {
      return a2;
    };
    exports2.unstable_subscribe = function() {
    };
    exports2.unstable_unsubscribe = function() {
    };
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var enableSchedulerTracing = true;
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports2.__interactionsRef = null;
        exports2.__subscriberRef = null;
        if (enableSchedulerTracing) {
          exports2.__interactionsRef = {
            current: new Set()
          };
          exports2.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          if (!enableSchedulerTracing) {
            return callback();
          }
          var prevInteractions = exports2.__interactionsRef.current;
          exports2.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports2.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          if (!enableSchedulerTracing) {
            return null;
          } else {
            return exports2.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          if (!enableSchedulerTracing) {
            return callback();
          }
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports2.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports2.__interactionsRef.current = interactions;
          var subscriber = exports2.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports2.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          if (!enableSchedulerTracing) {
            return callback;
          }
          var wrappedInteractions = exports2.__interactionsRef.current;
          var subscriber = exports2.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = wrappedInteractions;
            subscriber = exports2.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports2.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        if (enableSchedulerTracing) {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          if (enableSchedulerTracing) {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports2.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          if (enableSchedulerTracing) {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports2.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports2.unstable_clear = unstable_clear;
        exports2.unstable_getCurrent = unstable_getCurrent;
        exports2.unstable_getThreadID = unstable_getThreadID;
        exports2.unstable_trace = unstable_trace;
        exports2.unstable_wrap = unstable_wrap;
        exports2.unstable_subscribe = unstable_subscribe;
        exports2.unstable_unsubscribe = unstable_unsubscribe;
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/tracing.js
var require_tracing = __commonJS({
  "node_modules/.pnpm/scheduler@0.18.0/node_modules/scheduler/tracing.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_tracing_production_min();
    } else {
      module2.exports = require_scheduler_tracing_development();
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.development.js
var require_react_reconciler_development = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/cjs/react-reconciler.development.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      module2.exports = function $$$reconciler($$$hostConfig) {
        "use strict";
        var _assign = require_object_assign();
        var React4 = require_react();
        var checkPropTypes = require_checkPropTypes();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var warningWithoutStack = function() {
        };
        {
          warningWithoutStack = function(condition, format) {
            for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }
            if (format === void 0) {
              throw new Error("`warningWithoutStack(condition, format, ...args)` requires a warning message argument");
            }
            if (args.length > 8) {
              throw new Error("warningWithoutStack() currently supports at most 8 arguments.");
            }
            if (condition) {
              return;
            }
            if (typeof console !== "undefined") {
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console.error, console, argsWithFormat);
            }
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          };
        }
        var warningWithoutStack$1 = warningWithoutStack;
        function get(key) {
          return key._reactInternalFiber;
        }
        function set(key, value) {
          key._reactInternalFiber = value;
        }
        var ReactSharedInternals = React4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var warning = warningWithoutStack$1;
        {
          warning = function(condition, format) {
            if (condition) {
              return;
            }
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }
            warningWithoutStack$1.apply(void 0, [false, format + "%s"].concat(args, [stack]));
          };
        }
        var warning$1 = warning;
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    warning$1(false, "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            });
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              warningWithoutStack$1(false, "Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var enableUserTimingAPI = true;
        var debugRenderPhaseSideEffectsForStrictMode = true;
        var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
        var warnAboutDeprecatedLifecycles = true;
        var enableProfilerTimer = true;
        var enableSchedulerTracing = true;
        var enableSuspenseServerRenderer = false;
        var enableFlareAPI = false;
        var enableFundamentalAPI = false;
        var enableScopeAPI = false;
        var warnAboutUnmockedScheduler = false;
        var flushSuspenseFallbacksInTests = true;
        var enableSuspenseCallback = false;
        var warnAboutDefaultPropsOnFunctionComponents = false;
        var warnAboutStringRefs = false;
        var disableLegacyContext = false;
        var disableSchedulerTimeoutBasedOnReactExpirationTime = false;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component") : void 0;
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a2.alternate === b2)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a2.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var getPublicInstance = $$$hostConfig.getPublicInstance;
        var getRootHostContext = $$$hostConfig.getRootHostContext;
        var getChildHostContext = $$$hostConfig.getChildHostContext;
        var prepareForCommit = $$$hostConfig.prepareForCommit;
        var resetAfterCommit = $$$hostConfig.resetAfterCommit;
        var createInstance = $$$hostConfig.createInstance;
        var appendInitialChild = $$$hostConfig.appendInitialChild;
        var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
        var prepareUpdate = $$$hostConfig.prepareUpdate;
        var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
        var shouldDeprioritizeSubtree = $$$hostConfig.shouldDeprioritizeSubtree;
        var createTextInstance = $$$hostConfig.createTextInstance;
        var scheduleTimeout = $$$hostConfig.setTimeout;
        var cancelTimeout = $$$hostConfig.clearTimeout;
        var noTimeout = $$$hostConfig.noTimeout;
        var now = $$$hostConfig.now;
        var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
        var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
        var supportsMutation = $$$hostConfig.supportsMutation;
        var supportsPersistence = $$$hostConfig.supportsPersistence;
        var supportsHydration = $$$hostConfig.supportsHydration;
        var mountResponderInstance = $$$hostConfig.mountResponderInstance;
        var unmountResponderInstance = $$$hostConfig.unmountResponderInstance;
        var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
        var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
        var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
        var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
        var appendChild = $$$hostConfig.appendChild;
        var appendChildToContainer = $$$hostConfig.appendChildToContainer;
        var commitTextUpdate = $$$hostConfig.commitTextUpdate;
        var commitMount = $$$hostConfig.commitMount;
        var commitUpdate = $$$hostConfig.commitUpdate;
        var insertBefore = $$$hostConfig.insertBefore;
        var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
        var removeChild = $$$hostConfig.removeChild;
        var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
        var resetTextContent = $$$hostConfig.resetTextContent;
        var hideInstance = $$$hostConfig.hideInstance;
        var hideTextInstance = $$$hostConfig.hideTextInstance;
        var unhideInstance = $$$hostConfig.unhideInstance;
        var unhideTextInstance = $$$hostConfig.unhideTextInstance;
        var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
        var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent;
        var cloneInstance = $$$hostConfig.cloneInstance;
        var createContainerChildSet = $$$hostConfig.createContainerChildSet;
        var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
        var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
        var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
        var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
        var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
        var cloneFundamentalInstance = $$$hostConfig.cloneInstance;
        var canHydrateInstance = $$$hostConfig.canHydrateInstance;
        var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
        var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
        var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
        var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
        var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
        var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
        var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
        var hydrateInstance = $$$hostConfig.hydrateInstance;
        var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
        var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
        var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
        var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
        var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
        var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
        var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
        var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
        var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
        var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
        var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
        var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
        var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
        var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
        var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
        var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
        var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        var describeComponentFrame = function(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        };
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var phase = null;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
          return "";
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            phase = null;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            phase = null;
          }
        }
        function setCurrentPhase(lifeCyclePhase) {
          {
            phase = lifeCyclePhase;
          }
        }
        var reactEmoji = "\u269B";
        var warningEmoji = "\u26D4";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning2) {
          var prefix = warning2 ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning2 ? " Warning: " + warning2 : "";
          return "" + prefix + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning2) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning2);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase2) {
          if (phase2 === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase2;
          }
        };
        var beginFiberMark = function(fiber, phase2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase2);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase2);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase2, warning2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase2);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning2);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          if (enableUserTimingAPI) {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          if (enableUserTimingAPI) {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning2 = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning2);
          }
        }
        function startPhaseTimer(fiber, phase2) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase2)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase2;
          }
        }
        function stopPhaseTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning2);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          if (enableUserTimingAPI) {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning2 = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning2 = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning2 = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning2);
          }
        }
        function startCommitTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning2 = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning2 = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning2);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              warningWithoutStack$1(false, "Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              warningWithoutStack$1(false, "Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          if (disableLegacyContext) {
            return emptyContextObject;
          } else {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          if (disableLegacyContext) {
            return;
          } else {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          if (disableLegacyContext) {
            return emptyContextObject;
          } else {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          if (disableLegacyContext) {
            return false;
          } else {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          if (disableLegacyContext) {
            return false;
          } else {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          if (disableLegacyContext) {
            return;
          } else {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          if (disableLegacyContext) {
            return;
          } else {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          if (disableLegacyContext) {
            return;
          } else {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          if (disableLegacyContext) {
            return parentContext;
          } else {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  warningWithoutStack$1(false, "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            {
              setCurrentPhase("getChildContext");
            }
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            {
              setCurrentPhase(null);
            }
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          if (disableLegacyContext) {
            return false;
          } else {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          if (disableLegacyContext) {
            return;
          } else {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          if (disableLegacyContext) {
            return emptyContextObject;
          } else {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
        var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
        var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
        var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
        var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
        var Scheduler_now = Scheduler.unstable_now;
        var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
        var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
        var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        if (enableSchedulerTracing) {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now$1 = initialTimeMs < 1e4 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            try {
              var _isSync = true;
              var queue = syncQueue;
              runWithPriority(ImmediatePriority, function() {
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms) {
          return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5e3;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function computeContinuousHydrationExpiration(currentTime) {
          return ContinuousHydration++;
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        function is(x, y2) {
          return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
        }
        var is$1 = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (is$1(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            if (!hasOwnProperty2.call(objB, keysA[i2]) || !is$1(objA[keysA[i2]], objB[keysA[i2]])) {
              return false;
            }
          }
          return true;
        }
        var lowPriorityWarningWithoutStack = function() {
        };
        {
          var printWarning = function(format) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = "Warning: " + format.replace(/%s/g, function() {
              return args[argIndex++];
            });
            if (typeof console !== "undefined") {
              console.warn(message);
            }
            try {
              throw new Error(message);
            } catch (x) {
            }
          };
          lowPriorityWarningWithoutStack = function(condition, format) {
            if (format === void 0) {
              throw new Error("`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning message argument");
            }
            if (!condition) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
              }
              printWarning.apply(void 0, [format].concat(args));
            }
          };
        }
        var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              warningWithoutStack$1(false, "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              warningWithoutStack$1(false, "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              warningWithoutStack$1(false, "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              lowPriorityWarningWithoutStack$1(false, "componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              lowPriorityWarningWithoutStack$1(false, "componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              lowPriorityWarningWithoutStack$1(false, "componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              warningWithoutStack$1(false, "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
              warningWithoutStack$1(false, "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, strictRootComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root, element) {
          {
            if (root.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
              default:
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
              default:
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          if (isPrimaryRenderer) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              !(context._currentRenderer === void 0 || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.") : void 0;
              context._currentRenderer = rendererSigil;
            }
          } else {
            push(valueCursor, context._currentValue2, providerFiber);
            context._currentValue2 = nextValue;
            {
              !(context._currentRenderer2 === void 0 || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.") : void 0;
              context._currentRenderer2 = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          if (isPrimaryRenderer) {
            context._currentValue = currentValue;
          } else {
            context._currentValue2 = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (is$1(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits) : void 0;
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(renderExpirationTime2, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list.expirationTime < renderExpirationTime2) {
                    list.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (!(parentSuspense !== null)) {
                {
                  throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
              }
              if (parentSuspense.expirationTime < renderExpirationTime2) {
                parentSuspense.expirationTime = renderExpirationTime2;
              }
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null && _alternate.expirationTime < renderExpirationTime2) {
                _alternate.expirationTime = renderExpirationTime2;
              }
              scheduleWorkOnParentPath(parentSuspense, renderExpirationTime2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            !!isDisallowedContextReadInDEV ? warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().") : void 0;
          }
          if (lastContextWithAllBitsObserved === context) {
          } else if (observedBits === false || observedBits === 0) {
          } else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return isPrimaryRenderer ? context._currentValue : context._currentValue2;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function createUpdateQueue(baseState) {
          var queue = {
            baseState,
            firstUpdate: null,
            lastUpdate: null,
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
          };
          return queue;
        }
        function cloneUpdateQueue(currentQueue) {
          var queue = {
            baseState: currentQueue.baseState,
            firstUpdate: currentQueue.firstUpdate,
            lastUpdate: currentQueue.lastUpdate,
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
          };
          return queue;
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null,
            nextEffect: null
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          return update;
        }
        function appendUpdateToQueue(queue, update) {
          if (queue.lastUpdate === null) {
            queue.firstUpdate = queue.lastUpdate = update;
          } else {
            queue.lastUpdate.next = update;
            queue.lastUpdate = update;
          }
        }
        function enqueueUpdate(fiber, update) {
          var alternate = fiber.alternate;
          var queue1;
          var queue2;
          if (alternate === null) {
            queue1 = fiber.updateQueue;
            queue2 = null;
            if (queue1 === null) {
              queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            }
          } else {
            queue1 = fiber.updateQueue;
            queue2 = alternate.updateQueue;
            if (queue1 === null) {
              if (queue2 === null) {
                queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
                queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
              } else {
                queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
              }
            } else {
              if (queue2 === null) {
                queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
              } else {
              }
            }
          }
          if (queue2 === null || queue1 === queue2) {
            appendUpdateToQueue(queue1, update);
          } else {
            if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
              appendUpdateToQueue(queue1, update);
              appendUpdateToQueue(queue2, update);
            } else {
              appendUpdateToQueue(queue1, update);
              queue2.lastUpdate = update;
            }
          }
          {
            if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
              warningWithoutStack$1(false, "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update) {
          var workInProgressQueue = workInProgress2.updateQueue;
          if (workInProgressQueue === null) {
            workInProgressQueue = workInProgress2.updateQueue = createUpdateQueue(workInProgress2.memoizedState);
          } else {
            workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress2, workInProgressQueue);
          }
          if (workInProgressQueue.lastCapturedUpdate === null) {
            workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
          } else {
            workInProgressQueue.lastCapturedUpdate.next = update;
            workInProgressQueue.lastCapturedUpdate = update;
          }
        }
        function ensureWorkInProgressQueueIsAClone(workInProgress2, queue) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            if (queue === current2.updateQueue) {
              queue = workInProgress2.updateQueue = cloneUpdateQueue(queue);
            }
          }
          return queue;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, queue, props, instance, renderExpirationTime2) {
          hasForceUpdate = false;
          queue = ensureWorkInProgressQueueIsAClone(workInProgress2, queue);
          {
            currentlyProcessingQueue = queue;
          }
          var newBaseState = queue.baseState;
          var newFirstUpdate = null;
          var newExpirationTime = NoWork;
          var update = queue.firstUpdate;
          var resultState = newBaseState;
          while (update !== null) {
            var updateExpirationTime = update.expirationTime;
            if (updateExpirationTime < renderExpirationTime2) {
              if (newFirstUpdate === null) {
                newFirstUpdate = update;
                newBaseState = resultState;
              }
              if (newExpirationTime < updateExpirationTime) {
                newExpirationTime = updateExpirationTime;
              }
            } else {
              markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
              resultState = getStateFromUpdate(workInProgress2, queue, update, resultState, props, instance);
              var callback = update.callback;
              if (callback !== null) {
                workInProgress2.effectTag |= Callback;
                update.nextEffect = null;
                if (queue.lastEffect === null) {
                  queue.firstEffect = queue.lastEffect = update;
                } else {
                  queue.lastEffect.nextEffect = update;
                  queue.lastEffect = update;
                }
              }
            }
            update = update.next;
          }
          var newFirstCapturedUpdate = null;
          update = queue.firstCapturedUpdate;
          while (update !== null) {
            var _updateExpirationTime = update.expirationTime;
            if (_updateExpirationTime < renderExpirationTime2) {
              if (newFirstCapturedUpdate === null) {
                newFirstCapturedUpdate = update;
                if (newFirstUpdate === null) {
                  newBaseState = resultState;
                }
              }
              if (newExpirationTime < _updateExpirationTime) {
                newExpirationTime = _updateExpirationTime;
              }
            } else {
              resultState = getStateFromUpdate(workInProgress2, queue, update, resultState, props, instance);
              var _callback = update.callback;
              if (_callback !== null) {
                workInProgress2.effectTag |= Callback;
                update.nextEffect = null;
                if (queue.lastCapturedEffect === null) {
                  queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                } else {
                  queue.lastCapturedEffect.nextEffect = update;
                  queue.lastCapturedEffect = update;
                }
              }
            }
            update = update.next;
          }
          if (newFirstUpdate === null) {
            queue.lastUpdate = null;
          }
          if (newFirstCapturedUpdate === null) {
            queue.lastCapturedUpdate = null;
          } else {
            workInProgress2.effectTag |= Callback;
          }
          if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
            newBaseState = resultState;
          }
          queue.baseState = newBaseState;
          queue.firstUpdate = newFirstUpdate;
          queue.firstCapturedUpdate = newFirstCapturedUpdate;
          markUnprocessedUpdateTime(newExpirationTime);
          workInProgress2.expirationTime = newExpirationTime;
          workInProgress2.memoizedState = resultState;
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime2) {
          if (finishedQueue.firstCapturedUpdate !== null) {
            if (finishedQueue.lastUpdate !== null) {
              finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
              finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
            }
            finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
          }
          commitUpdateEffects(finishedQueue.firstEffect, instance);
          finishedQueue.firstEffect = finishedQueue.lastEffect = null;
          commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
          finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
        }
        function commitUpdateEffects(effect, instance) {
          while (effect !== null) {
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
            effect = effect.nextEffect;
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray$1 = Array.isArray;
        var emptyRefsObject = new React4.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              warningWithoutStack$1(false, "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                warningWithoutStack$1(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          var updateQueue = workInProgress2.updateQueue;
          if (updateQueue !== null && workInProgress2.expirationTime === NoWork) {
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              !(shouldUpdate !== void 0) ? warningWithoutStack$1(false, "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component") : void 0;
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            !noGetInitialStateOnES6 ? warningWithoutStack$1(false, "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name) : void 0;
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name) : void 0;
            var noInstancePropTypes = !instance.propTypes;
            !noInstancePropTypes ? warningWithoutStack$1(false, "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name) : void 0;
            var noInstanceContextType = !instance.contextType;
            !noInstanceContextType ? warningWithoutStack$1(false, "contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name) : void 0;
            if (disableLegacyContext) {
              if (ctor.childContextTypes) {
                warningWithoutStack$1(false, "%s uses the legacy childContextTypes API which is no longer supported. Use React.createContext() instead.", name);
              }
              if (ctor.contextTypes) {
                warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with static contextType instead.", name);
              }
            } else {
              var noInstanceContextTypes = !instance.contextTypes;
              !noInstanceContextTypes ? warningWithoutStack$1(false, "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name) : void 0;
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                warningWithoutStack$1(false, "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            !noComponentShouldUpdate ? warningWithoutStack$1(false, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name) : void 0;
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warningWithoutStack$1(false, "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            !noComponentDidUnmount ? warningWithoutStack$1(false, "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name) : void 0;
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            !noComponentDidReceiveProps ? warningWithoutStack$1(false, "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name) : void 0;
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            !noComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name) : void 0;
            var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== "function";
            !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name) : void 0;
            var hasMutatedProps = instance.props !== newProps;
            !(instance.props === void 0 || !hasMutatedProps) ? warningWithoutStack$1(false, "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name) : void 0;
            var noInstanceDefaultProps = !instance.defaultProps;
            !noInstanceDefaultProps ? warningWithoutStack$1(false, "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name) : void 0;
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== "function";
            !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name) : void 0;
            var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== "function";
            !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name) : void 0;
            var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== "function";
            !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name) : void 0;
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray$1(_state))) {
              warningWithoutStack$1(false, "%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function") {
              !(typeof ctor.childContextTypes === "object") ? warningWithoutStack$1(false, "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name) : void 0;
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props, renderExpirationTime2) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                warningWithoutStack$1(false, "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else if (!disableLegacyContext) {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              new ctor(props, context);
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                warningWithoutStack$1(false, "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  warningWithoutStack$1(false, "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              warningWithoutStack$1(false, "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                warningWithoutStack$1(false, "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else if (disableLegacyContext) {
            instance.context = emptyContextObject;
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                warningWithoutStack$1(false, "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          var updateQueue = workInProgress2.updateQueue;
          if (updateQueue !== null) {
            processUpdateQueue(workInProgress2, updateQueue, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            updateQueue = workInProgress2.updateQueue;
            if (updateQueue !== null) {
              processUpdateQueue(workInProgress2, updateQueue, newProps, instance, renderExpirationTime2);
              instance.state = workInProgress2.memoizedState;
            }
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else if (!disableLegacyContext) {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          var updateQueue = workInProgress2.updateQueue;
          if (updateQueue !== null) {
            processUpdateQueue(workInProgress2, updateQueue, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
          }
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else if (!disableLegacyContext) {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          var updateQueue = workInProgress2.updateQueue;
          if (updateQueue !== null) {
            processUpdateQueue(workInProgress2, updateQueue, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
          }
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            warning$1(false, 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray = Array.isArray;
        function coerceRef(returnFiber, current$$1, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  if (warnAboutStringRefs) {
                    warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  } else {
                    warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === "function" && current$$1.ref._stringRef === stringRef) {
                return current$$1.ref;
              }
              var ref2 = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref2._stringRef = stringRef;
              return ref2;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
          if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
          warning$1(false, "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps, expirationTime) {
            var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current$$1 = newFiber.alternate;
            if (current$$1 !== null) {
              var oldIndex = current$$1.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current$$1, textContent, expirationTime);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current$$1, element, expirationTime) {
            if (current$$1 !== null && (current$$1.elementType === element.type || isCompatibleFamilyForHotReloading(current$$1, element))) {
              var existing = useFiber(current$$1, element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, current$$1, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
              created.ref = coerceRef(returnFiber, current$$1, element);
              created.return = returnFiber;
              return created;
            }
          }
          function updatePortal(returnFiber, current$$1, portal, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current$$1, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current$$1, fragment, expirationTime, key) {
            if (current$$1 === null || current$$1.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current$$1, fragment, expirationTime);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  warning$1(false, "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                default:
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                !didWarnAboutGenerators ? warning$1(false, "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.") : void 0;
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                !didWarnAboutMaps ? warning$1(false, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.") : void 0;
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent, expirationTime);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                  existing.ref = coerceRef(returnFiber, child, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || [], expirationTime);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component = returnFiber.type;
                  {
                    {
                      throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current$$1, workInProgress2) {
          if (!(current$$1 === null || workInProgress2.child === current$$1.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, renderExpirationTime2);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (!(c2 !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var emptyObject = {};
        var isArray$2 = Array.isArray;
        function createResponderInstance(responder, responderProps, responderState, fiber) {
          return {
            fiber,
            props: responderProps,
            responder,
            rootEventTypes: null,
            state: responderState
          };
        }
        function mountEventResponder(responder, responderProps, fiber, respondersMap, rootContainerInstance) {
          var responderState = emptyObject;
          var getInitialState = responder.getInitialState;
          if (getInitialState !== null) {
            responderState = getInitialState(responderProps);
          }
          var responderInstance = createResponderInstance(responder, responderProps, responderState, fiber);
          if (!rootContainerInstance) {
            var node = fiber;
            while (node !== null) {
              var tag = node.tag;
              if (tag === HostComponent) {
                rootContainerInstance = node.stateNode;
                break;
              } else if (tag === HostRoot) {
                rootContainerInstance = node.stateNode.containerInfo;
                break;
              }
              node = node.return;
            }
          }
          mountResponderInstance(responder, responderInstance, responderProps, responderState, rootContainerInstance);
          respondersMap.set(responder, responderInstance);
        }
        function updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance) {
          var responder;
          var props;
          if (listener) {
            responder = listener.responder;
            props = listener.props;
          }
          if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
            {
              throw Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().");
            }
          }
          var listenerProps = props;
          if (visistedResponders.has(responder)) {
            {
              warning$1(false, 'Duplicate event responder "%s" found in event listeners. Event listeners passed to elements cannot use the same event responder more than once.', responder.displayName);
            }
            return;
          }
          visistedResponders.add(responder);
          var responderInstance = respondersMap.get(responder);
          if (responderInstance === void 0) {
            mountEventResponder(responder, listenerProps, fiber, respondersMap, rootContainerInstance);
          } else {
            responderInstance.props = listenerProps;
            responderInstance.fiber = fiber;
          }
        }
        function updateEventListeners(listeners, fiber, rootContainerInstance) {
          var visistedResponders = new Set();
          var dependencies = fiber.dependencies;
          if (listeners != null) {
            if (dependencies === null) {
              dependencies = fiber.dependencies = {
                expirationTime: NoWork,
                firstContext: null,
                responders: new Map()
              };
            }
            var respondersMap = dependencies.responders;
            if (respondersMap === null) {
              respondersMap = new Map();
            }
            if (isArray$2(listeners)) {
              for (var i2 = 0, length = listeners.length; i2 < length; i2++) {
                var listener = listeners[i2];
                updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance);
              }
            } else {
              updateEventListener(listeners, fiber, visistedResponders, respondersMap, rootContainerInstance);
            }
          }
          if (dependencies !== null) {
            var _respondersMap = dependencies.responders;
            if (_respondersMap !== null) {
              var mountedResponders = Array.from(_respondersMap.keys());
              for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
                var mountedResponder = mountedResponders[_i];
                if (!visistedResponders.has(mountedResponder)) {
                  var responderInstance = _respondersMap.get(mountedResponder);
                  unmountResponderInstance(responderInstance);
                  _respondersMap.delete(mountedResponder);
                }
              }
            }
          }
        }
        function createResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var NoEffect$1 = 0;
        var UnmountSnapshot = 2;
        var UnmountMutation = 4;
        var MountMutation = 8;
        var UnmountLayout = 16;
        var MountLayout = 32;
        var MountPassive = 64;
        var UnmountPassive = 128;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderExpirationTime$1 = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var nextCurrentHook = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var nextWorkInProgressHook = null;
        var remainingExpirationTime = NoWork;
        var componentUpdateQueue = null;
        var sideEffectTag = 0;
        var didScheduleRenderPhaseUpdate = false;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              warning$1(false, "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                warning$1(false, "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              warning$1(false, "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              warning$1(false, "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (is$1(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, refOrContext, nextRenderExpirationTime) {
          renderExpirationTime$1 = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          nextCurrentHook = current2 !== null ? current2.memoizedState : null;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          {
            if (nextCurrentHook !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, refOrContext);
          if (didScheduleRenderPhaseUpdate) {
            do {
              didScheduleRenderPhaseUpdate = false;
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              nextCurrentHook = current2 !== null ? current2.memoizedState : null;
              nextWorkInProgressHook = firstWorkInProgressHook;
              currentHook = null;
              workInProgressHook = null;
              componentUpdateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              children = Component(props, refOrContext);
            } while (didScheduleRenderPhaseUpdate);
            renderPhaseUpdates = null;
            numberOfReRenders = 0;
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          var renderedWork = currentlyRenderingFiber$1;
          renderedWork.memoizedState = firstWorkInProgressHook;
          renderedWork.expirationTime = remainingExpirationTime;
          renderedWork.updateQueue = componentUpdateQueue;
          renderedWork.effectTag |= sideEffectTag;
          {
            renderedWork._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime$1 = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          nextCurrentHook = null;
          firstWorkInProgressHook = null;
          workInProgressHook = null;
          nextWorkInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          remainingExpirationTime = NoWork;
          componentUpdateQueue = null;
          sideEffectTag = 0;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooks() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          renderExpirationTime$1 = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          nextCurrentHook = null;
          firstWorkInProgressHook = null;
          workInProgressHook = null;
          nextWorkInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          remainingExpirationTime = NoWork;
          componentUpdateQueue = null;
          sideEffectTag = 0;
          didScheduleRenderPhaseUpdate = false;
          renderPhaseUpdates = null;
          numberOfReRenders = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            queue: null,
            baseUpdate: null,
            next: null
          };
          if (workInProgressHook === null) {
            firstWorkInProgressHook = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
            nextCurrentHook = currentHook !== null ? currentHook.next : null;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              queue: currentHook.queue,
              baseUpdate: currentHook.baseUpdate,
              next: null
            };
            if (workInProgressHook === null) {
              workInProgressHook = firstWorkInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
            nextCurrentHook = currentHook.next;
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            last: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          if (numberOfReRenders > 0) {
            var _dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = hook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  newState = reducer(newState, action);
                  update = update.next;
                } while (update !== null);
                if (!is$1(newState, hook.memoizedState)) {
                  markWorkInProgressReceivedUpdate();
                }
                hook.memoizedState = newState;
                if (hook.baseUpdate === queue.last) {
                  hook.baseState = newState;
                }
                queue.lastRenderedState = newState;
                return [newState, _dispatch];
              }
            }
            return [hook.memoizedState, _dispatch];
          }
          var last = queue.last;
          var baseUpdate = hook.baseUpdate;
          var baseState = hook.baseState;
          var first;
          if (baseUpdate !== null) {
            if (last !== null) {
              last.next = null;
            }
            first = baseUpdate.next;
          } else {
            first = last !== null ? last.next : null;
          }
          if (first !== null) {
            var _newState = baseState;
            var newBaseState = null;
            var newBaseUpdate = null;
            var prevUpdate = baseUpdate;
            var _update = first;
            var didSkip = false;
            do {
              var updateExpirationTime = _update.expirationTime;
              if (updateExpirationTime < renderExpirationTime$1) {
                if (!didSkip) {
                  didSkip = true;
                  newBaseUpdate = prevUpdate;
                  newBaseState = _newState;
                }
                if (updateExpirationTime > remainingExpirationTime) {
                  remainingExpirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(remainingExpirationTime);
                }
              } else {
                markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig);
                if (_update.eagerReducer === reducer) {
                  _newState = _update.eagerState;
                } else {
                  var _action = _update.action;
                  _newState = reducer(_newState, _action);
                }
              }
              prevUpdate = _update;
              _update = _update.next;
            } while (_update !== null && _update !== first);
            if (!didSkip) {
              newBaseUpdate = prevUpdate;
              newBaseState = _newState;
            }
            if (!is$1(_newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = _newState;
            hook.baseUpdate = newBaseUpdate;
            hook.baseState = newBaseState;
            queue.lastRenderedState = _newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            last: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer, initialState);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref2 = {
            current: initialValue
          };
          {
            Object.seal(ref2);
          }
          hook.memoizedState = ref2;
          return ref2;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          sideEffectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(hookEffectTag, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(NoEffect$1, create, destroy, nextDeps);
                return;
              }
            }
          }
          sideEffectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
        }
        function imperativeHandleEffect(create, ref2) {
          if (typeof ref2 === "function") {
            var refCallback = ref2;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref2 !== null && ref2 !== void 0) {
            var refObject = ref2;
            {
              !refObject.hasOwnProperty("current") ? warning$1(false, "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}") : void 0;
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref2, create, deps) {
          {
            !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null") : void 0;
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref2), effectDeps);
        }
        function updateImperativeHandle(ref2, create, deps) {
          {
            !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null") : void 0;
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref2), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value, config) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            Scheduler.unstable_next(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }, [value, config]);
          return prevValue;
        }
        function updateDeferredValue(value, config) {
          var _updateState = updateState(value), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            Scheduler.unstable_next(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }, [value, config]);
          return prevValue;
        }
        function mountTransition(config) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var startTransition = mountCallback(function(callback) {
            setPending(true);
            Scheduler.unstable_next(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }, [config, isPending]);
          return [startTransition, isPending];
        }
        function updateTransition(config) {
          var _updateState2 = updateState(false), isPending = _updateState2[0], setPending = _updateState2[1];
          var startTransition = updateCallback(function(callback) {
            setPending(true);
            Scheduler.unstable_next(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }, [config, isPending]);
          return [startTransition, isPending];
        }
        function dispatchAction(fiber, queue, action) {
          if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
            {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
          }
          {
            !(typeof arguments[3] !== "function") ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().") : void 0;
          }
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              expirationTime: renderExpirationTime$1,
              suspenseConfig: null,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            {
              update.priority = getCurrentPriorityLevel();
            }
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          } else {
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var _update2 = {
              expirationTime,
              suspenseConfig,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            {
              _update2.priority = getCurrentPriorityLevel();
            }
            var last = queue.last;
            if (last === null) {
              _update2.next = _update2;
            } else {
              var first = last.next;
              if (first !== null) {
                _update2.next = first;
              }
              last.next = _update2;
            }
            queue.last = _update2;
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  _update2.eagerReducer = lastRenderedReducer;
                  _update2.eagerState = eagerState;
                  if (is$1(eagerState, currentState)) {
                    return;
                  }
                } catch (error) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if (typeof jest !== "undefined") {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            warning$1(false, "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            warning$1(false, "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue(value, formatterFn);
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue(value, formatterFn);
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue(value, formatterFn);
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue(value, formatterFn);
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue(value, formatterFn);
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
        }
        var now$2 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          if (!enableProfilerTimer) {
            return;
          }
          commitTime = now$2();
        }
        function startProfilerTimer(fiber) {
          if (!enableProfilerTimer) {
            return;
          }
          profilerStartTime = now$2();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$2();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          if (!enableProfilerTimer) {
            return;
          }
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (!enableProfilerTimer) {
            return;
          }
          if (profilerStartTime >= 0) {
            var elapsedTime = now$2() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function warnIfHydrating() {
          {
            !!isHydrating ? warning$1(false, "We should not be hydrating here. This is a bug in React. Please file a bug.") : void 0;
          }
        }
        function enterHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance) {
          if (!supportsHydration) {
            return false;
          }
          nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
          popToNextHostParent(fiber);
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type, props);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableContainerSuspenseInstance(parentContainer);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type, props);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              if (enableSuspenseServerRenderer) {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    retryTime: Never
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  return true;
                }
              }
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          if (!supportsHydration) {
            {
              {
                throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          if (!supportsHydration) {
            return;
          }
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutMaxDuration;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutMaxDuration = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current$$1 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current$$1.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current$$1, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current$$1.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var render2 = Component.render;
          var ref2 = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setCurrentPhase("render");
            nextChildren = renderWithHooks(current$$1, workInProgress2, render2, nextProps, ref2, renderExpirationTime2);
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current$$1, workInProgress2, render2, nextProps, ref2, renderExpirationTime2);
              }
            }
            setCurrentPhase(null);
          }
          if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current$$1, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current$$1 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current$$1, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
            }
          }
          var currentChild = current$$1.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current$$1.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime2);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current$$1, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
              }
            }
          }
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress2.ref && workInProgress2.type === current$$1.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2);
        }
        function updateFragment(current$$1, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current$$1, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current$$1, workInProgress2, renderExpirationTime2) {
          if (enableProfilerTimer) {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current$$1, workInProgress2) {
          var ref2 = workInProgress2.ref;
          if (current$$1 === null && ref2 !== null || current$$1 !== null && current$$1.ref !== ref2) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var context;
          if (!disableLegacyContext) {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setCurrentPhase("render");
            nextChildren = renderWithHooks(current$$1, workInProgress2, Component, nextProps, context, renderExpirationTime2);
            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current$$1, workInProgress2, Component, nextProps, context, renderExpirationTime2);
              }
            }
            setCurrentPhase(null);
          }
          if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current$$1 !== null) {
              current$$1.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current$$1 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current$$1, workInProgress2, Component, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current$$1, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              !didWarnAboutReassigningProps ? warning$1(false, "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component") : void 0;
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current$$1, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current$$1, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$2.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            if (enableProfilerTimer) {
              stopProfilerTimerIfRunning(workInProgress2);
            }
          } else {
            {
              setCurrentPhase("render");
              nextChildren = instance.render();
              if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setCurrentPhase(null);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current$$1 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root = workInProgress2.stateNode;
          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress2, root.context, false);
          }
          pushHostContainer(workInProgress2, root.containerInfo);
        }
        function updateHostRoot(current$$1, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          processUpdateQueue(workInProgress2, updateQueue, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
          }
          var root = workInProgress2.stateNode;
          if (root.hydrate && enterHydrationState(workInProgress2)) {
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current$$1, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current$$1 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current$$1, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            if (enableSchedulerTracing) {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current$$1, workInProgress2) {
          if (current$$1 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component = readLazyComponentType(elementType);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              break;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              break;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              break;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
              break;
            }
            default: {
              var hint = "";
              {
                if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                  hint = " Did you wrap a component in React.lazy() more than once?";
                }
              }
              {
                {
                  throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
                }
              }
            }
          }
          return child;
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          if (!disableLegacyContext) {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            ReactCurrentOwner$2.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                warningWithoutStack$1(false, "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            resetHooks();
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (disableLegacyContext && Component.contextTypes) {
                warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with React.useContext() instead.", getComponentName(Component) || "Unknown");
              }
              if (debugRenderPhaseSideEffectsForStrictMode && workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          if (Component) {
            !!Component.childContextTypes ? warningWithoutStack$1(false, "%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component") : void 0;
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || workInProgress2._debugID || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              warning$1(false, "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== void 0) {
            var componentName = getComponentName(Component) || "Unknown";
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
              warningWithoutStack$1(false, "%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName2 = getComponentName(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
              warningWithoutStack$1(false, "%s: Function components do not support getDerivedStateFromProps.", _componentName2);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName3 = getComponentName(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
              warningWithoutStack$1(false, "%s: Function components do not support contextType.", _componentName3);
              didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
        }
        function updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current$$1 === null || current$$1.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          {
            if ("maxDuration" in nextProps) {
              if (!didWarnAboutMaxDuration) {
                didWarnAboutMaxDuration = true;
                warning$1(false, "maxDuration has been removed from React. Remove the maxDuration prop.");
              }
            }
          }
          if (current$$1 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
              if (enableSuspenseServerRenderer) {
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null) {
                  var dehydrated = suspenseState.dehydrated;
                  if (dehydrated !== null) {
                    return mountDehydratedSuspenseComponent(workInProgress2, dehydrated, renderExpirationTime2);
                  }
                }
              }
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current$$1.memoizedState;
            if (prevState !== null) {
              if (enableSuspenseServerRenderer) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  if (!didSuspend) {
                    return updateDehydratedSuspenseComponent(current$$1, workInProgress2, _dehydrated, prevState, renderExpirationTime2);
                  } else if (workInProgress2.memoizedState !== null) {
                    workInProgress2.child = current$$1.child;
                    workInProgress2.effectTag |= DidCapture;
                    return null;
                  } else {
                    var _nextFallbackChildren = nextProps.fallback;
                    var _primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                    _primaryChildFragment.return = workInProgress2;
                    _primaryChildFragment.child = null;
                    if ((workInProgress2.mode & BlockingMode) === NoMode) {
                      var _progressedChild = _primaryChildFragment.child = workInProgress2.child;
                      while (_progressedChild !== null) {
                        _progressedChild.return = _primaryChildFragment;
                        _progressedChild = _progressedChild.sibling;
                      }
                    } else {
                      reconcileChildFibers(workInProgress2, current$$1.child, null, renderExpirationTime2);
                    }
                    if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                      var treeBaseDuration = 0;
                      var hiddenChild = _primaryChildFragment.child;
                      while (hiddenChild !== null) {
                        treeBaseDuration += hiddenChild.treeBaseDuration;
                        hiddenChild = hiddenChild.sibling;
                      }
                      _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                    }
                    var _fallbackChildFragment = createFiberFromFragment(_nextFallbackChildren, mode, renderExpirationTime2, null);
                    _fallbackChildFragment.return = workInProgress2;
                    _primaryChildFragment.sibling = _fallbackChildFragment;
                    _fallbackChildFragment.effectTag |= Placement;
                    _primaryChildFragment.childExpirationTime = NoWork;
                    workInProgress2.memoizedState = SUSPENDED_MARKER;
                    workInProgress2.child = _primaryChildFragment;
                    return _fallbackChildFragment;
                  }
                }
              }
              var currentPrimaryChildFragment = current$$1.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current$$1.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (enableProfilerTimer && workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2) {
          workInProgress2.memoizedState = null;
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderExpirationTime2) {
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            {
              warning$1(false, "Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOM.createBlockingRoot(container, { hydrate: true }).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.expirationTime = Sync;
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            var serverDisplayTime = requestCurrentTimeForUpdate();
            var newExpirationTime = computeAsyncExpiration(serverDisplayTime);
            if (enableSchedulerTracing) {
              markSpawnedWork(newExpirationTime);
            }
            workInProgress2.expirationTime = newExpirationTime;
          } else {
            workInProgress2.expirationTime = Never;
            if (enableSchedulerTracing) {
              markSpawnedWork(Never);
            }
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current$$1, workInProgress2, suspenseInstance, suspenseState, renderExpirationTime2) {
          warnIfHydrating();
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
          }
          var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime2;
          if (didReceiveUpdate || hasContextChanged$$1) {
            if (renderExpirationTime2 < Sync) {
              if (suspenseState.retryTime <= renderExpirationTime2) {
                var attemptHydrationAtExpirationTime = renderExpirationTime2 + 1;
                suspenseState.retryTime = attemptHydrationAtExpirationTime;
                scheduleWork(current$$1, attemptHydrationAtExpirationTime);
              } else {
              }
            }
            renderDidSuspendDelayIfPossible();
            return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress2, renderExpirationTime2);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.effectTag |= DidCapture;
            workInProgress2.child = current$$1.child;
            registerSuspenseInstanceRetry(suspenseInstance, retryDehydratedSuspenseBoundary.bind(null, current$$1));
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance);
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            var node = child;
            while (node) {
              node.effectTag |= Hydrating;
              node = node.sibling;
            }
            workInProgress2.child = child;
            return workInProgress2.child;
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              warning$1(false, "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current$$1, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current$$1 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current$$1, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current$$1, workInProgress2, renderExpirationTime2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  warning$1(false, "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            !(typeof render2 === "function") ? warningWithoutStack$1(false, "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.") : void 0;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setCurrentPhase("render");
            newChildren = render2(newValue);
            setCurrentPhase(null);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current$$1, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateFundamentalComponent$1(current$$1, workInProgress2, renderExpirationTime2) {
          var fundamentalImpl = workInProgress2.type.impl;
          if (fundamentalImpl.reconcileChildren === false) {
            return null;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateScopeComponent(current$$1, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current$$1, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current$$1 !== null) {
            workInProgress2.dependencies = current$$1.dependencies;
          }
          if (enableProfilerTimer) {
            stopProfilerTimerIfRunning(workInProgress2);
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current$$1, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current$$1.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current$$1;
              returnFiber.lastEffect = current$$1;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
            }
            current$$1.nextEffect = null;
            current$$1.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork$1(current$$1, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current$$1 !== null) {
              return remountFiber(current$$1, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current$$1 !== null) {
            var oldProps = current$$1.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current$$1.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    if (enableSchedulerTracing) {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  if (enableProfilerTimer) {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    if (enableSuspenseServerRenderer) {
                      if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        workInProgress2.effectTag |= DidCapture;
                        break;
                      }
                    }
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current$$1, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current$$1, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current$$1, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current$$1, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current$$1, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current$$1, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current$$1, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current$$1, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current$$1, workInProgress2, renderExpirationTime2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current$$1, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment:
              return updateFragment(current$$1, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current$$1, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current$$1, workInProgress2, renderExpirationTime2);
            case ContextProvider:
              return updateContextProvider(current$$1, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current$$1, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current$$1, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current$$1, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current$$1, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current$$1, workInProgress2, renderExpirationTime2);
            }
            case FundamentalComponent: {
              if (enableFundamentalAPI) {
                return updateFundamentalComponent$1(current$$1, workInProgress2, renderExpirationTime2);
              }
              break;
            }
            case ScopeComponent: {
              if (enableScopeAPI) {
                return updateScopeComponent(current$$1, workInProgress2, renderExpirationTime2);
              }
              break;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function createFundamentalStateInstance(currentFiber2, props, impl, state) {
          return {
            currentFiber: currentFiber2,
            impl,
            instance: null,
            prevProps: null,
            props,
            state
          };
        }
        function isFiberSuspenseAndTimedOut(fiber) {
          return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
        }
        function getSuspenseFallbackChild(fiber) {
          return fiber.child.sibling.child;
        }
        var emptyObject$1 = {};
        function collectScopedNodes(node, fn, scopedNodes) {
          if (enableScopeAPI) {
            if (node.tag === HostComponent) {
              var _type = node.type, memoizedProps = node.memoizedProps, stateNode = node.stateNode;
              var _instance = getPublicInstance(stateNode);
              if (_instance !== null && fn(_type, memoizedProps || emptyObject$1, _instance) === true) {
                scopedNodes.push(_instance);
              }
            }
            var child = node.child;
            if (isFiberSuspenseAndTimedOut(node)) {
              child = getSuspenseFallbackChild(node);
            }
            if (child !== null) {
              collectScopedNodesFromChildren(child, fn, scopedNodes);
            }
          }
        }
        function collectFirstScopedNode(node, fn) {
          if (enableScopeAPI) {
            if (node.tag === HostComponent) {
              var _type2 = node.type, memoizedProps = node.memoizedProps, stateNode = node.stateNode;
              var _instance2 = getPublicInstance(stateNode);
              if (_instance2 !== null && fn(_type2, memoizedProps, _instance2) === true) {
                return _instance2;
              }
            }
            var child = node.child;
            if (isFiberSuspenseAndTimedOut(node)) {
              child = getSuspenseFallbackChild(node);
            }
            if (child !== null) {
              return collectFirstScopedNodeFromChildren(child, fn);
            }
          }
          return null;
        }
        function collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {
          var child = startingChild;
          while (child !== null) {
            collectScopedNodes(child, fn, scopedNodes);
            child = child.sibling;
          }
        }
        function collectFirstScopedNodeFromChildren(startingChild, fn) {
          var child = startingChild;
          while (child !== null) {
            var scopedNode = collectFirstScopedNode(child, fn);
            if (scopedNode !== null) {
              return scopedNode;
            }
            child = child.sibling;
          }
          return null;
        }
        function collectNearestScopeMethods(node, scope, childrenScopes) {
          if (isValidScopeNode(node, scope)) {
            childrenScopes.push(node.stateNode.methods);
          } else {
            var child = node.child;
            if (isFiberSuspenseAndTimedOut(node)) {
              child = getSuspenseFallbackChild(node);
            }
            if (child !== null) {
              collectNearestChildScopeMethods(child, scope, childrenScopes);
            }
          }
        }
        function collectNearestChildScopeMethods(startingChild, scope, childrenScopes) {
          var child = startingChild;
          while (child !== null) {
            collectNearestScopeMethods(child, scope, childrenScopes);
            child = child.sibling;
          }
        }
        function isValidScopeNode(node, scope) {
          return node.tag === ScopeComponent && node.type === scope && node.stateNode !== null;
        }
        function createScopeMethods(scope, instance) {
          return {
            getChildren: function() {
              var currentFiber2 = instance.fiber;
              var child = currentFiber2.child;
              var childrenScopes = [];
              if (child !== null) {
                collectNearestChildScopeMethods(child, scope, childrenScopes);
              }
              return childrenScopes.length === 0 ? null : childrenScopes;
            },
            getChildrenFromRoot: function() {
              var currentFiber2 = instance.fiber;
              var node = currentFiber2;
              while (node !== null) {
                var parent = node.return;
                if (parent === null) {
                  break;
                }
                node = parent;
                if (node.tag === ScopeComponent && node.type === scope) {
                  break;
                }
              }
              var childrenScopes = [];
              collectNearestChildScopeMethods(node.child, scope, childrenScopes);
              return childrenScopes.length === 0 ? null : childrenScopes;
            },
            getParent: function() {
              var node = instance.fiber.return;
              while (node !== null) {
                if (node.tag === ScopeComponent && node.type === scope) {
                  return node.stateNode.methods;
                }
                node = node.return;
              }
              return null;
            },
            getProps: function() {
              var currentFiber2 = instance.fiber;
              return currentFiber2.memoizedProps;
            },
            queryAllNodes: function(fn) {
              var currentFiber2 = instance.fiber;
              var child = currentFiber2.child;
              var scopedNodes = [];
              if (child !== null) {
                collectScopedNodesFromChildren(child, fn, scopedNodes);
              }
              return scopedNodes.length === 0 ? null : scopedNodes;
            },
            queryFirstNode: function(fn) {
              var currentFiber2 = instance.fiber;
              var child = currentFiber2.child;
              if (child !== null) {
                return collectFirstScopedNodeFromChildren(child, fn);
              }
              return null;
            },
            containsNode: function(node) {
              var fiber = getInstanceFromNode(node);
              while (fiber !== null) {
                if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance) {
                  return true;
                }
                fiber = fiber.return;
              }
              return false;
            }
          };
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        if (supportsMutation) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                appendInitialChild(parent, node.stateNode.instance);
              } else if (node.tag === HostPortal) {
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        } else if (supportsPersistence) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              branches:
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (needsVisibilityToggle && isHidden) {
                    var props = node.memoizedProps;
                    var type = node.type;
                    instance = cloneHiddenInstance(instance, type, props, node);
                  }
                  appendInitialChild(parent, instance);
                } else if (node.tag === HostText) {
                  var _instance = node.stateNode;
                  if (needsVisibilityToggle && isHidden) {
                    var text = node.memoizedProps;
                    _instance = cloneHiddenTextInstance(_instance, text, node);
                  }
                  appendInitialChild(parent, _instance);
                } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                  var _instance2 = node.stateNode.instance;
                  if (needsVisibilityToggle && isHidden) {
                    var _props = node.memoizedProps;
                    var _type = node.type;
                    _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
                  }
                  appendInitialChild(parent, _instance2);
                } else if (node.tag === HostPortal) {
                } else if (node.tag === SuspenseComponent) {
                  if ((node.effectTag & Update) !== NoEffect) {
                    var newIsHidden = node.memoizedState !== null;
                    if (newIsHidden) {
                      var primaryChildParent = node.child;
                      if (primaryChildParent !== null) {
                        if (primaryChildParent.child !== null) {
                          primaryChildParent.child.return = primaryChildParent;
                          appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                        }
                        var fallbackChildParent = primaryChildParent.sibling;
                        if (fallbackChildParent !== null) {
                          fallbackChildParent.return = node;
                          node = fallbackChildParent;
                          continue;
                        }
                      }
                    }
                  }
                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          var appendAllChildrenToContainer = function(containerChildSet, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              branches:
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (needsVisibilityToggle && isHidden) {
                    var props = node.memoizedProps;
                    var type = node.type;
                    instance = cloneHiddenInstance(instance, type, props, node);
                  }
                  appendChildToContainerChildSet(containerChildSet, instance);
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (needsVisibilityToggle && isHidden) {
                    var text = node.memoizedProps;
                    _instance3 = cloneHiddenTextInstance(_instance3, text, node);
                  }
                  appendChildToContainerChildSet(containerChildSet, _instance3);
                } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                  var _instance4 = node.stateNode.instance;
                  if (needsVisibilityToggle && isHidden) {
                    var _props2 = node.memoizedProps;
                    var _type2 = node.type;
                    _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
                  }
                  appendChildToContainerChildSet(containerChildSet, _instance4);
                } else if (node.tag === HostPortal) {
                } else if (node.tag === SuspenseComponent) {
                  if ((node.effectTag & Update) !== NoEffect) {
                    var newIsHidden = node.memoizedState !== null;
                    if (newIsHidden) {
                      var primaryChildParent = node.child;
                      if (primaryChildParent !== null) {
                        if (primaryChildParent.child !== null) {
                          primaryChildParent.child.return = primaryChildParent;
                          appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                        }
                        var fallbackChildParent = primaryChildParent.sibling;
                        if (fallbackChildParent !== null) {
                          fallbackChildParent.return = node;
                          node = fallbackChildParent;
                          continue;
                        }
                      }
                    }
                  }
                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
            var portalOrRoot = workInProgress2.stateNode;
            var childrenUnchanged = workInProgress2.firstEffect === null;
            if (childrenUnchanged) {
            } else {
              var container = portalOrRoot.containerInfo;
              var newChildSet = createContainerChildSet(container);
              appendAllChildrenToContainer(newChildSet, workInProgress2, false, false);
              portalOrRoot.pendingChildren = newChildSet;
              markUpdate(workInProgress2);
              finalizeContainerChildren(container, newChildSet);
            }
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var currentInstance = current2.stateNode;
            var oldProps = current2.memoizedProps;
            var childrenUnchanged = workInProgress2.firstEffect === null;
            if (childrenUnchanged && oldProps === newProps) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var recyclableInstance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = null;
            if (oldProps !== newProps) {
              updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            }
            if (childrenUnchanged && updatePayload === null) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress2, childrenUnchanged, recyclableInstance);
            if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress2);
            }
            workInProgress2.stateNode = newInstance;
            if (childrenUnchanged) {
              markUpdate(workInProgress2);
            } else {
              appendAllChildren(newInstance, workInProgress2, false, false);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();
              workInProgress2.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress2);
              markUpdate(workInProgress2);
            }
          };
        } else {
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
              break;
            case LazyComponent:
              break;
            case SimpleMemoComponent:
            case FunctionComponent:
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              break;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (enableFlareAPI) {
                  var prevListeners = current2.memoizedProps.listeners;
                  var nextListeners = newProps.listeners;
                  if (prevListeners !== nextListeners) {
                    markUpdate(workInProgress2);
                  }
                }
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  break;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                  if (enableFlareAPI) {
                    var listeners = newProps.listeners;
                    if (listeners != null) {
                      updateEventListeners(listeners, workInProgress2, rootContainerInstance);
                    }
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (enableFlareAPI) {
                    var _listeners = newProps.listeners;
                    if (_listeners != null) {
                      updateEventListeners(_listeners, workInProgress2, rootContainerInstance);
                    }
                  }
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              break;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              break;
            }
            case ForwardRef:
              break;
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (enableSuspenseServerRenderer) {
                if (nextState !== null && nextState.dehydrated !== null) {
                  if (current2 === null) {
                    var _wasHydrated3 = popHydrationState(workInProgress2);
                    if (!_wasHydrated3) {
                      {
                        throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                      }
                    }
                    prepareToHydrateHostSuspenseInstance(workInProgress2);
                    if (enableSchedulerTracing) {
                      markSpawnedWork(Never);
                    }
                    return null;
                  } else {
                    resetHydrationState();
                    if ((workInProgress2.effectTag & DidCapture) === NoEffect) {
                      workInProgress2.memoizedState = null;
                    }
                    workInProgress2.effectTag |= Update;
                    return null;
                  }
                }
              }
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              if (supportsPersistence) {
                if (nextDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (supportsMutation) {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (enableSuspenseCallback && workInProgress2.updateQueue !== null && workInProgress2.memoizedProps.suspenseCallback != null) {
                workInProgress2.effectTag |= Update;
              }
              break;
            }
            case Fragment:
              break;
            case Mode:
              break;
            case Profiler:
              break;
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              break;
            case ContextProvider:
              popProvider(workInProgress2);
              break;
            case ContextConsumer:
              break;
            case MemoComponent:
              break;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              break;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                break;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now$1() > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    if (enableSchedulerTracing) {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now$1() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              break;
            }
            case FundamentalComponent: {
              if (enableFundamentalAPI) {
                var fundamentalImpl = workInProgress2.type.impl;
                var fundamentalInstance = workInProgress2.stateNode;
                if (fundamentalInstance === null) {
                  var getInitialState = fundamentalImpl.getInitialState;
                  var fundamentalState;
                  if (getInitialState !== void 0) {
                    fundamentalState = getInitialState(newProps);
                  }
                  fundamentalInstance = workInProgress2.stateNode = createFundamentalStateInstance(workInProgress2, newProps, fundamentalImpl, fundamentalState || {});
                  var _instance5 = getFundamentalComponentInstance(fundamentalInstance);
                  fundamentalInstance.instance = _instance5;
                  if (fundamentalImpl.reconcileChildren === false) {
                    return null;
                  }
                  appendAllChildren(_instance5, workInProgress2, false, false);
                  mountFundamentalComponent(fundamentalInstance);
                } else {
                  var prevProps = fundamentalInstance.props;
                  fundamentalInstance.prevProps = prevProps;
                  fundamentalInstance.props = newProps;
                  fundamentalInstance.currentFiber = workInProgress2;
                  if (supportsPersistence) {
                    var _instance6 = cloneFundamentalInstance(fundamentalInstance);
                    fundamentalInstance.instance = _instance6;
                    appendAllChildren(_instance6, workInProgress2, false, false);
                  }
                  var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);
                  if (shouldUpdate) {
                    markUpdate(workInProgress2);
                  }
                }
              }
              break;
            }
            case ScopeComponent: {
              if (enableScopeAPI) {
                if (current2 === null) {
                  var _type3 = workInProgress2.type;
                  var scopeInstance = {
                    fiber: workInProgress2,
                    methods: null
                  };
                  workInProgress2.stateNode = scopeInstance;
                  scopeInstance.methods = createScopeMethods(_type3, scopeInstance);
                  if (enableFlareAPI) {
                    var _listeners2 = newProps.listeners;
                    if (_listeners2 != null) {
                      var _rootContainerInstance2 = getRootHostContainer();
                      updateEventListeners(_listeners2, workInProgress2, _rootContainerInstance2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                    markUpdate(workInProgress2);
                  }
                } else {
                  if (enableFlareAPI) {
                    var _prevListeners = current2.memoizedProps.listeners;
                    var _nextListeners = newProps.listeners;
                    if (_prevListeners !== _nextListeners || workInProgress2.ref !== null) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    if (workInProgress2.ref !== null) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                }
              }
              break;
            }
            default: {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          return null;
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              if (enableSuspenseServerRenderer) {
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (!(workInProgress2.alternate !== null)) {
                    {
                      throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    }
                  }
                  resetHydrationState();
                }
              }
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            default:
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        var invokeGuardedCallbackImpl = function(name, func, context, a2, b2, c2, d, e2, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error) {
            this.onError(error);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name, func, context, a2, b2, c2, d, e2, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context, funcArgs);
                didError = false;
              }
              var error;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error != null && typeof error === "object") {
                    try {
                      error._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var reporter = {
          onError: function(error) {
            hasError = true;
            caughtError = error;
          }
        };
        function invokeGuardedCallback(name, func, context, a2, b2, c2, d, e2, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function showErrorDialog(capturedError) {
          return true;
        }
        function logCapturedError(capturedError) {
          var logError2 = showErrorDialog(capturedError);
          if (logError2 === false) {
            return;
          }
          var error = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error != null && error._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console.error(error);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console.error(combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current$$1, instance) {
          startPhaseTimer(current$$1, "componentWillUnmount");
          instance.props = current$$1.memoizedProps;
          instance.state = current$$1.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current$$1, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current$$1, unmountError);
            }
          }
        }
        function safelyDetachRef(current$$1) {
          var ref2 = current$$1.ref;
          if (ref2 !== null) {
            if (typeof ref2 === "function") {
              {
                invokeGuardedCallback(null, ref2, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current$$1, refError);
                }
              }
            } else {
              ref2.current = null;
            }
          }
        }
        function safelyCallDestroy(current$$1, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error = clearCaughtError();
              captureCommitPhaseError(current$$1, error);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current$$1 !== null) {
                  var prevProps = current$$1.memoizedProps;
                  var prevState = current$$1.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    }
                  }
                  var snapshot2 = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot2 === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      warningWithoutStack$1(false, "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot2;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
            default: {
              {
                {
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
        }
        function commitHookEffectList(unmountTag, mountTag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & unmountTag) !== NoEffect$1) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              if ((effect.tag & mountTag) !== NoEffect$1) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var _destroy = effect.destroy;
                  if (_destroy !== void 0 && typeof _destroy !== "function") {
                    var addendum = void 0;
                    if (_destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof _destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + _destroy;
                    }
                    warningWithoutStack$1(false, "An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
                commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
                break;
              }
              default:
                break;
            }
          }
        }
        function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current$$1 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                  var prevState = current$$1.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current$$1 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props, finishedWork);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              if (enableProfilerTimer) {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  if (enableSchedulerTracing) {
                    onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  } else {
                    onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
            default: {
              {
                {
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          if (supportsMutation) {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref2 = finishedWork.ref;
          if (ref2 !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
              instanceToUse = instance.methods;
            }
            if (typeof ref2 === "function") {
              ref2(instanceToUse);
            } else {
              {
                if (!ref2.hasOwnProperty("current")) {
                  warningWithoutStack$1(false, "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref2.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current$$1) {
          var currentRef = current$$1.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
          onCommitUnmount(current$$1);
          switch (current$$1.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              var updateQueue = current$$1.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                  runWithPriority(priorityLevel, function() {
                    var effect = firstEffect;
                    do {
                      var destroy = effect.destroy;
                      if (destroy !== void 0) {
                        safelyCallDestroy(current$$1, destroy);
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  });
                }
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(current$$1);
              var instance = current$$1.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current$$1, instance);
              }
              return;
            }
            case HostComponent: {
              if (enableFlareAPI) {
                var dependencies = current$$1.dependencies;
                if (dependencies !== null) {
                  var respondersMap = dependencies.responders;
                  if (respondersMap !== null) {
                    var responderInstances = Array.from(respondersMap.values());
                    for (var i2 = 0, length = responderInstances.length; i2 < length; i2++) {
                      var responderInstance = responderInstances[i2];
                      unmountResponderInstance(responderInstance);
                    }
                    dependencies.responders = null;
                  }
                }
              }
              safelyDetachRef(current$$1);
              return;
            }
            case HostPortal: {
              if (supportsMutation) {
                unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
              } else if (supportsPersistence) {
                emptyPortalContainer(current$$1);
              }
              return;
            }
            case FundamentalComponent: {
              if (enableFundamentalAPI) {
                var fundamentalInstance = current$$1.stateNode;
                if (fundamentalInstance !== null) {
                  unmountFundamentalComponent(fundamentalInstance);
                  current$$1.stateNode = null;
                }
              }
              return;
            }
            case DehydratedFragment: {
              if (enableSuspenseCallback) {
                var hydrationCallbacks = finishedRoot.hydrationCallbacks;
                if (hydrationCallbacks !== null) {
                  var onDeleted = hydrationCallbacks.onDeleted;
                  if (onDeleted) {
                    onDeleted(current$$1.stateNode);
                  }
                }
              }
              return;
            }
            case ScopeComponent: {
              if (enableScopeAPI) {
                safelyDetachRef(current$$1);
              }
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
          var node = root;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && (!supportsMutation || node.tag !== HostPortal)) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current$$1) {
          var alternate = current$$1.alternate;
          current$$1.return = null;
          current$$1.child = null;
          current$$1.memoizedState = null;
          current$$1.updateQueue = null;
          current$$1.dependencies = null;
          current$$1.alternate = null;
          current$$1.firstEffect = null;
          current$$1.lastEffect = null;
          current$$1.pendingProps = null;
          current$$1.memoizedProps = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function emptyPortalContainer(current$$1) {
          if (!supportsPersistence) {
            return;
          }
          var portal = current$$1.stateNode;
          var containerInfo = portal.containerInfo;
          var emptyChildSet = createContainerChildSet(containerInfo);
          replaceContainerChildren(containerInfo, emptyChildSet);
        }
        function commitContainer(finishedWork) {
          if (!supportsPersistence) {
            return;
          }
          switch (finishedWork.tag) {
            case ClassComponent:
            case HostComponent:
            case HostText:
            case FundamentalComponent: {
              return;
            }
            case HostRoot:
            case HostPortal: {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo, pendingChildren = portalOrRoot.pendingChildren;
              replaceContainerChildren(containerInfo, pendingChildren);
              return;
            }
            default: {
              {
                {
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          if (!supportsMutation) {
            return;
          }
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
              if (enableFundamentalAPI) {
                parent = parentStateNode.instance;
                isContainer = false;
              }
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          var node = finishedWork;
          while (true) {
            var isHost = node.tag === HostComponent || node.tag === HostText;
            if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, stateNode, before);
                } else {
                  insertBefore(parent, stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, stateNode);
                } else {
                  appendChild(parent, stateNode);
                }
              }
            } else if (node.tag === HostPortal) {
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
          var node = current$$1;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case FundamentalComponent:
                      if (enableFundamentalAPI) {
                        currentParent = parentStateNode.instance;
                        currentParentIsContainer = false;
                      }
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
              var fundamentalNode = node.stateNode.instance;
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, fundamentalNode);
              } else {
                removeChild(currentParent, fundamentalNode);
              }
            } else if (enableSuspenseServerRenderer && node.tag === DehydratedFragment) {
              if (enableSuspenseCallback) {
                var hydrationCallbacks = finishedRoot.hydrationCallbacks;
                if (hydrationCallbacks !== null) {
                  var onDeleted = hydrationCallbacks.onDeleted;
                  if (onDeleted) {
                    onDeleted(node.stateNode);
                  }
                }
              }
              if (currentParentIsContainer) {
                clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
              } else {
                clearSuspenseBoundary(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current$$1) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current$$1) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
          if (supportsMutation) {
            unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
          } else {
            commitNestedUnmounts(finishedRoot, current$$1, renderPriorityLevel);
          }
          detachFiber(current$$1);
        }
        function commitWork(current$$1, finishedWork) {
          if (!supportsMutation) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case HostRoot: {
                if (supportsHydration) {
                  var root = finishedWork.stateNode;
                  if (root.hydrate) {
                    root.hydrate = false;
                    commitHydratedContainer(root.containerInfo);
                  }
                }
                break;
              }
            }
            commitContainer(finishedWork);
            return;
          }
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                if (enableFlareAPI) {
                  var prevListeners = oldProps.listeners;
                  var nextListeners = newProps.listeners;
                  if (prevListeners !== nextListeners) {
                    updateEventListeners(nextListeners, finishedWork, null);
                  }
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              if (supportsHydration) {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              if (enableFundamentalAPI) {
                var fundamentalInstance = finishedWork.stateNode;
                updateFundamentalComponent(fundamentalInstance);
              }
              return;
            }
            case ScopeComponent: {
              if (enableScopeAPI) {
                var scopeInstance = finishedWork.stateNode;
                scopeInstance.fiber = finishedWork;
                if (enableFlareAPI) {
                  var _newProps = finishedWork.memoizedProps;
                  var _oldProps = current$$1 !== null ? current$$1.memoizedProps : _newProps;
                  var _prevListeners = _oldProps.listeners;
                  var _nextListeners = _newProps.listeners;
                  if (_prevListeners !== _nextListeners) {
                    updateEventListeners(_nextListeners, finishedWork, null);
                  }
                }
              }
              return;
            }
            default: {
              {
                {
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (supportsMutation && primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
          if (enableSuspenseCallback && newState !== null) {
            var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;
            if (typeof suspenseCallback === "function") {
              var thenables = finishedWork.updateQueue;
              if (thenables !== null) {
                suspenseCallback(new Set(thenables));
              }
            } else {
              if (suspenseCallback !== void 0) {
                warning$1(false, "Unexpected type for suspenseCallback.");
              }
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (!supportsHydration) {
            return;
          }
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current$$1 = finishedWork.alternate;
            if (current$$1 !== null) {
              var prevState = current$$1.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                  if (enableSuspenseCallback) {
                    var hydrationCallbacks = finishedRoot.hydrationCallbacks;
                    if (hydrationCallbacks !== null) {
                      var onHydrated = hydrationCallbacks.onHydrated;
                      if (onHydrated) {
                        onHydrated(suspenseInstance);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                if (enableSchedulerTracing) {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current$$1) {
          if (!supportsMutation) {
            return;
          }
          resetTextContent(current$$1.stateNode);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error);
            logError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error = errorInfo.value;
            update.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error2 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error2, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown") : void 0;
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root, renderExpirationTime2, thenable) {
          var pingCache = root.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var thenable = value;
            checkForWrongSuspensePriorityInDEV(sourceFiber);
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(Sync, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
              default:
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now$1());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now$1());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now$1());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
          var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root, expirationTime);
              performSyncWorkOnRoot(root);
            } else {
              ensureRootIsScheduled(root);
              schedulePendingInteractions(root, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root = null;
          if (node === null && fiber.tag === HostRoot) {
            root = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root !== null) {
            if (workInProgressRoot === root) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root, renderExpirationTime);
              }
            }
            markRootUpdatedAtTime(root, expirationTime);
          }
          return root;
        }
        function getNextRootExpirationTimeToWorkOn(root) {
          var lastExpiredTime = root.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root.firstPendingTime;
          if (!isRootSuspendedAtTime(root, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root.lastPingedTime;
          var nextKnownPendingLevel = root.nextKnownPendingLevel;
          return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
        }
        function ensureRootIsScheduled(root) {
          var lastExpiredTime = root.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root.callbackExpirationTime = Sync;
            root.callbackPriority = ImmediatePriority;
            root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root);
          var existingCallbackNode = root.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root.callbackNode = null;
              root.callbackExpirationTime = NoWork;
              root.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root.callbackPriority;
            var existingCallbackExpirationTime = root.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root.callbackExpirationTime = expirationTime;
          root.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          } else if (disableSchedulerTimeoutBasedOnReactExpirationTime) {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root));
          } else {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), {
              timeout: expirationTimeToMs(expirationTime) - now$1()
            });
          }
          root.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root, currentTime);
            ensureRootIsScheduled(root);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
              prepareFreshStack(root, expirationTime);
              startWorkOnPendingInteractions(root, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher(root);
              var prevInteractions = pushInteractions(root);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              if (enableSchedulerTracing) {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root, expirationTime);
                markRootSuspendedAtTime(root, expirationTime);
                ensureRootIsScheduled(root);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root.finishedWork = root.current.alternate;
                root.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root);
              if (root.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root, expirationTime);
              var lastSuspendedTime = root.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              flushSuspensePriorityWarningInDEV();
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !(flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root.lastPingedTime = expirationTime;
                      prepareFreshStack(root, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root, expirationTime);
              var _lastSuspendedTime = root.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              flushSuspensePriorityWarningInDEV();
              if (!(flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root.lastPingedTime = expirationTime;
                    prepareFreshStack(root, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now$1();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now$1();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root);
              break;
            }
            case RootCompleted: {
              if (!(flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root, expirationTime);
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root) {
          var lastExpiredTime = root.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (root.finishedExpirationTime === expirationTime) {
            commitRoot(root);
          } else {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
              prepareFreshStack(root, expirationTime);
              startWorkOnPendingInteractions(root, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher(root);
              var prevInteractions = pushInteractions(root);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopSync();
                  break;
                } catch (thrownValue) {
                  handleError(root, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              if (enableSchedulerTracing) {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root, expirationTime);
                markRootSuspendedAtTime(root, expirationTime);
                ensureRootIsScheduled(root);
                throw fatalError;
              }
              if (workInProgress !== null) {
                {
                  {
                    throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              } else {
                stopFinishedWorkLoopTimer();
                root.finishedWork = root.current.alternate;
                root.finishedExpirationTime = expirationTime;
                finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root);
            }
          }
          return null;
        }
        function finishSyncRender(root, exitStatus, expirationTime) {
          workInProgressRoot = null;
          {
            if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
              flushSuspensePriorityWarningInDEV();
            }
          }
          commitRoot(root);
        }
        function flushRoot(root, expirationTime) {
          markRootExpiredAtTime(root, expirationTime);
          ensureRootIsScheduled(root);
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbackQueue();
          }
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) {
              warning$1(false, "unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function deferredUpdates(fn) {
          return runWithPriority(NormalPriority, fn);
        }
        function syncUpdates(fn, a2, b2, c2) {
          return runWithPriority(ImmediatePriority, fn.bind(null, a2, b2, c2));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root) {
              markRootExpiredAtTime(root, expirationTime);
              ensureRootIsScheduled(root);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates(fn, a2, b2, c2) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority(UserBlockingPriority, fn.bind(null, a2, b2, c2));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a2) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority(ImmediatePriority, fn.bind(null, a2));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function flushControlled(fn) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            runWithPriority(ImmediatePriority, fn);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function prepareFreshStack(root, expirationTime) {
          root.finishedWork = null;
          root.finishedExpirationTime = NoWork;
          var timeoutHandle = root.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root;
          workInProgress = createWorkInProgress(root.current, null, expirationTime);
          renderExpirationTime = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          if (enableSchedulerTracing) {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
            componentsThatTriggeredHighPriSuspend = null;
          }
        }
        function handleError(root, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooks();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root) {
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
        function pushInteractions(root) {
          if (enableSchedulerTracing) {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root.memoizedInteractions;
            return prevInteractions;
          }
          return null;
        }
        function popInteractions(prevInteractions) {
          if (enableSchedulerTracing) {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now$1();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current$$1 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$1.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current$$1 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current$$1, workInProgress, renderExpirationTime);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current$$1, workInProgress, renderExpirationTime);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress, renderExpirationTime);
              if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child = workInProgress.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              var childUpdateExpirationTime = child.expirationTime;
              var childChildExpirationTime = child.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root.finishedWork;
          var expirationTime = root.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root.finishedWork = null;
          root.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root.callbackNode = null;
          root.callbackExpirationTime = NoWork;
          root.callbackPriority = NoPriority;
          root.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime = NoWork;
          } else {
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root);
            ReactCurrentOwner$1.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            if (enableProfilerTimer) {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root.containerInfo);
            root.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            if (enableSchedulerTracing) {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            if (enableProfilerTimer) {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime2 = root.firstPendingTime;
          if (remainingExpirationTime2 !== NoWork) {
            if (enableSchedulerTracing) {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                  scheduleInteractions(root, expirationTimes[i2], root.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root, remainingExpirationTime2);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          if (enableSchedulerTracing) {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root, expirationTime);
            }
          }
          if (remainingExpirationTime2 === Sync) {
            if (root === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current$$1 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current$$1, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current$$1 = nextEffect.alternate;
              if (current$$1 !== null) {
                commitDetachRef(current$$1);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current$$1 = nextEffect.alternate;
              commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          var effect = root.current.firstEffect;
          while (effect !== null) {
            {
              setCurrentFiber(effect);
              invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
              if (hasCaughtError()) {
                if (!(effect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error = clearCaughtError();
                captureCommitPhaseError(effect, error);
              }
              resetCurrentFiber();
            }
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            effect = nextNextEffect;
          }
          if (enableSchedulerTracing) {
            popInteractions(prevInteractions);
            finishPendingInteractions(root, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          var errorInfo = createCapturedValue(error, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update);
          var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root !== null) {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                enqueueUpdate(fiber, update);
                var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root !== null) {
                  ensureRootIsScheduled(root);
                  schedulePendingInteractions(root, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root, thenable, suspendedTime) {
          var pingCache = root.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root, renderExpirationTime);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root, suspendedTime)) {
            return;
          }
          var lastPingedTime = root.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root.lastPingedTime = suspendedTime;
          if (root.finishedExpirationTime === suspendedTime) {
            root.finishedExpirationTime = NoWork;
            root.finishedWork = null;
          }
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root !== null) {
            ensureRootIsScheduled(root);
            schedulePendingInteractions(root, retryTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryTime = NoWork;
          if (suspenseState !== null) {
            retryTime = suspenseState.retryTime;
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          if (enableSuspenseServerRenderer) {
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryTime = suspenseState.retryTime;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default: {
                {
                  throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
                }
              }
            }
          } else {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now$1();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              warning$1(false, "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$$1;
        if (replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          var dummyFiber = null;
          beginWork$$1 = function(current$$1, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork$1(current$$1, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooks();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        } else {
          beginWork$$1 = beginWork$1;
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInGetChildContext = false;
        function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
          {
            if (fiber.tag === ClassComponent) {
              switch (phase) {
                case "getChildContext":
                  if (didWarnAboutUpdateInGetChildContext) {
                    return;
                  }
                  warningWithoutStack$1(false, "setState(...): Cannot call setState() inside getChildContext()");
                  didWarnAboutUpdateInGetChildContext = true;
                  break;
                case "render":
                  if (didWarnAboutUpdateInRender) {
                    return;
                  }
                  warningWithoutStack$1(false, "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                  break;
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              warningWithoutStack$1(false, "An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              warningWithoutStack$1(false, "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                warningWithoutStack$1(false, `In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              } else if (warnAboutUnmockedScheduler === true) {
                didWarnAboutUnmockedScheduler = true;
                warningWithoutStack$1(false, `Starting from React v17, the "scheduler" module will need to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        var componentsThatTriggeredHighPriSuspend = null;
        function checkForWrongSuspensePriorityInDEV(sourceFiber) {
          {
            var currentPriorityLevel = getCurrentPriorityLevel();
            if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority || currentPriorityLevel === ImmediatePriority)) {
              var workInProgressNode = sourceFiber;
              while (workInProgressNode !== null) {
                var current$$1 = workInProgressNode.alternate;
                if (current$$1 !== null) {
                  switch (workInProgressNode.tag) {
                    case ClassComponent:
                      var updateQueue = current$$1.updateQueue;
                      if (updateQueue !== null) {
                        var update = updateQueue.firstUpdate;
                        while (update !== null) {
                          var priorityLevel = update.priority;
                          if (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority) {
                            if (componentsThatTriggeredHighPriSuspend === null) {
                              componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                            } else {
                              componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                            }
                            break;
                          }
                          update = update.next;
                        }
                      }
                      break;
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent:
                      if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                        var _update = workInProgressNode.memoizedState.baseUpdate;
                        while (_update !== null) {
                          var priority = _update.priority;
                          if (priority === UserBlockingPriority || priority === ImmediatePriority) {
                            if (componentsThatTriggeredHighPriSuspend === null) {
                              componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                            } else {
                              componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                            }
                            break;
                          }
                          if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                            break;
                          }
                          _update = _update.next;
                        }
                      }
                      break;
                    default:
                      break;
                  }
                }
                workInProgressNode = workInProgressNode.return;
              }
            }
          }
        }
        function flushSuspensePriorityWarningInDEV() {
          {
            if (componentsThatTriggeredHighPriSuspend !== null) {
              var componentNames = [];
              componentsThatTriggeredHighPriSuspend.forEach(function(name) {
                return componentNames.push(name);
              });
              componentsThatTriggeredHighPriSuspend = null;
              if (componentNames.length > 0) {
                warningWithoutStack$1(false, "%s triggered a user-blocking update that suspended.\n\nThe fix is to split the update into multiple parts: a user-blocking update to provide immediate feedback, and another update that triggers the bulk of the changes.\n\nRefer to the documentation for useTransition to learn how to implement this pattern.", componentNames.sort().join(", "));
              }
            }
          }
        }
        function computeThreadID(root, expirationTime) {
          return expirationTime * 1e3 + root.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (!enableSchedulerTracing) {
            return;
          }
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root, expirationTime, interactions) {
          if (!enableSchedulerTracing) {
            return;
          }
          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root, expirationTime) {
          if (!enableSchedulerTracing) {
            return;
          }
          scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root, expirationTime) {
          if (!enableSchedulerTracing) {
            return;
          }
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root, committedExpirationTime) {
          if (!enableSchedulerTracing) {
            return;
          }
          var earliestRemainingTimeAfterCommit = root.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root, committedExpirationTime);
              subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
          } catch (error) {
            scheduleCallback(ImmediatePriority, function() {
              throw error;
            });
          } finally {
            var pendingInteractionMap = root.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              warningWithoutStack$1(false, "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            onCommitFiberRoot = function(root, expirationTime) {
              try {
                var didError = (root.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                } else {
                  hook.onCommitFiberRoot(rendererID, root, void 0, didError);
                }
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
                }
              }
            };
          } catch (err) {
            {
              warningWithoutStack$1(false, "React DevTools encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onCommitRoot(root, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e2) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          if (enableProfilerTimer) {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          if (enableUserTimingAPI) {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps, expirationTime) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            if (enableProfilerTimer) {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          if (enableProfilerTimer) {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
              default:
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            if (enableProfilerTimer) {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            if (enableProfilerTimer) {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (enableProfilerTimer && isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_FUNDAMENTAL_TYPE:
                        if (enableFundamentalAPI) {
                          return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                        }
                        break;
                      case REACT_SCOPE_TYPE:
                        if (enableScopeAPI) {
                          return createFiberFromScope(type, pendingProps, mode, expirationTime, key);
                        }
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
          fiber.elementType = fundamentalComponent;
          fiber.type = fundamentalComponent;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(ScopeComponent, pendingProps, key, mode);
          fiber.type = scope;
          fiber.elementType = scope;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          if (enableProfilerTimer) {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          if (enableSchedulerTracing) {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          if (enableSuspenseCallback) {
            this.hydrationCallbacks = null;
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
          var root = new FiberRootNode(containerInfo, tag, hydrate);
          if (enableSuspenseCallback) {
            root.hydrationCallbacks = hydrationCallbacks;
          }
          var uninitializedFiber = createHostRootFiber(tag);
          root.current = uninitializedFiber;
          uninitializedFiber.stateNode = root;
          return root;
        }
        function isRootSuspendedAtTime(root, expirationTime) {
          var firstSuspendedTime = root.firstSuspendedTime;
          var lastSuspendedTime = root.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root, expirationTime) {
          var firstSuspendedTime = root.firstSuspendedTime;
          var lastSuspendedTime = root.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root.lastPingedTime) {
            root.lastPingedTime = NoWork;
          }
          if (expirationTime <= root.lastExpiredTime) {
            root.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root, expirationTime) {
          var firstPendingTime = root.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root.lastSuspendedTime) {
              root.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root.nextKnownPendingLevel) {
              root.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime2) {
          root.firstPendingTime = remainingExpirationTime2;
          if (finishedExpirationTime <= root.lastSuspendedTime) {
            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root.firstSuspendedTime) {
            root.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root.lastPingedTime) {
            root.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root.lastExpiredTime) {
            root.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root, expirationTime) {
          var lastExpiredTime = root.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root.lastExpiredTime = expirationTime;
          }
        }
        var ReactFiberInstrumentation = {
          debugTool: null
        };
        var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstance(component) {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            } else {
              {
                {
                  throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                }
              }
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  warningWithoutStack$1(false, "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
          return findHostInstance(component);
        }
        function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);
        }
        function updateContainer(element, container, parentComponent, callback) {
          var current$$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if (typeof jest !== "undefined") {
              warnIfUnmockedScheduler(current$$1);
              warnIfNotScopedWithMatchingAct(current$$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current$$1.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (phase === "render" && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warningWithoutStack$1(false, "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            !(typeof callback === "function") ? warningWithoutStack$1(false, "render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback) : void 0;
            update.callback = callback;
          }
          enqueueUpdate(current$$1, update);
          scheduleWork(current$$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration(fiber) {
          switch (fiber.tag) {
            case HostRoot:
              var root = fiber.stateNode;
              if (root.hydrate) {
                flushRoot(root, root.firstPendingTime);
              }
              break;
            case SuspenseComponent:
              flushSync(function() {
                return scheduleWork(fiber, Sync);
              });
              var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
              markRetryTimeIfNotHydrated(fiber, retryExpTime);
              break;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptHydrationAtCurrentPriority(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value) {
            if (idx >= path.length) {
              return value;
            }
            var key = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          overrideHookState = function(fiber, id, path, value) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        var ReactFiberReconciler = Object.freeze({
          createContainer,
          updateContainer,
          batchedEventUpdates,
          batchedUpdates,
          unbatchedUpdates,
          deferredUpdates,
          syncUpdates,
          discreteUpdates,
          flushDiscreteUpdates,
          flushControlled,
          flushSync,
          flushPassiveEffects,
          IsThisRendererActing,
          getPublicRootInstance,
          attemptSynchronousHydration,
          attemptUserBlockingHydration,
          attemptContinuousHydration,
          attemptHydrationAtCurrentPriority,
          findHostInstance,
          findHostInstanceWithWarning,
          findHostInstanceWithNoPortals,
          shouldSuspend,
          injectIntoDevTools
        });
        var reactReconciler = ReactFiberReconciler.default || ReactFiberReconciler;
        module2.exports = reactReconciler;
        var $$$renderer = module2.exports;
        module2.exports = $$$reconciler;
        return $$$renderer;
      };
    }
  }
});

// node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/index.js
var require_react_reconciler = __commonJS({
  "node_modules/.pnpm/react-reconciler@0.24.0_react@17.0.2/node_modules/react-reconciler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_reconciler_production_min();
    } else {
      module2.exports = require_react_reconciler_development();
    }
  }
});

// node_modules/.pnpm/ansi-regex@5.0.0/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "node_modules/.pnpm/ansi-regex@5.0.0/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = ({ onlyFirst = false } = {}) => {
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, onlyFirst ? void 0 : "g");
    };
  }
});

// node_modules/.pnpm/strip-ansi@6.0.0/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS({
  "node_modules/.pnpm/strip-ansi@6.0.0/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex();
    module2.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
  }
});

// node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS({
  "node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js"(exports2, module2) {
    "use strict";
    var isFullwidthCodePoint = (codePoint) => {
      if (Number.isNaN(codePoint)) {
        return false;
      }
      if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
        return true;
      }
      return false;
    };
    module2.exports = isFullwidthCodePoint;
    module2.exports.default = isFullwidthCodePoint;
  }
});

// node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/.pnpm/string-width@4.2.2/node_modules/string-width/index.js
var require_string_width = __commonJS({
  "node_modules/.pnpm/string-width@4.2.2/node_modules/string-width/index.js"(exports2, module2) {
    "use strict";
    var stripAnsi = require_strip_ansi();
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var emojiRegex = require_emoji_regex();
    var stringWidth = (string) => {
      if (typeof string !== "string" || string.length === 0) {
        return 0;
      }
      string = stripAnsi(string);
      if (string.length === 0) {
        return 0;
      }
      string = string.replace(emojiRegex(), "  ");
      let width = 0;
      for (let i2 = 0; i2 < string.length; i2++) {
        const code = string.codePointAt(i2);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i2++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
    module2.exports = stringWidth;
    module2.exports.default = stringWidth;
  }
});

// node_modules/.pnpm/widest-line@3.1.0/node_modules/widest-line/index.js
var require_widest_line = __commonJS({
  "node_modules/.pnpm/widest-line@3.1.0/node_modules/widest-line/index.js"(exports2, module2) {
    "use strict";
    var stringWidth = require_string_width();
    var widestLine = (input) => {
      let max = 0;
      for (const line of input.split("\n")) {
        max = Math.max(max, stringWidth(line));
      }
      return max;
    };
    module2.exports = widestLine;
    module2.exports.default = widestLine;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/measure-text.js
var require_measure_text = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/measure-text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var widest_line_1 = __importDefault(require_widest_line());
    var cache = {};
    exports2.default = (text) => {
      if (text.length === 0) {
        return {
          width: 0,
          height: 0
        };
      }
      if (cache[text]) {
        return cache[text];
      }
      const width = widest_line_1.default(text);
      const height = text.split("\n").length;
      cache[text] = { width, height };
      return { width, height };
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/styles.js
var require_styles = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/styles.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    var applyPositionStyles = (node, style) => {
      if ("position" in style) {
        node.setPositionType(style.position === "absolute" ? yoga_layout_prebuilt_1.default.POSITION_TYPE_ABSOLUTE : yoga_layout_prebuilt_1.default.POSITION_TYPE_RELATIVE);
      }
    };
    var applyMarginStyles = (node, style) => {
      if ("marginLeft" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_START, style.marginLeft || 0);
      }
      if ("marginRight" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_END, style.marginRight || 0);
      }
      if ("marginTop" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_TOP, style.marginTop || 0);
      }
      if ("marginBottom" in style) {
        node.setMargin(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.marginBottom || 0);
      }
    };
    var applyPaddingStyles = (node, style) => {
      if ("paddingLeft" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT, style.paddingLeft || 0);
      }
      if ("paddingRight" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT, style.paddingRight || 0);
      }
      if ("paddingTop" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_TOP, style.paddingTop || 0);
      }
      if ("paddingBottom" in style) {
        node.setPadding(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, style.paddingBottom || 0);
      }
    };
    var applyFlexStyles = (node, style) => {
      var _a;
      if ("flexGrow" in style) {
        node.setFlexGrow((_a = style.flexGrow) !== null && _a !== void 0 ? _a : 0);
      }
      if ("flexShrink" in style) {
        node.setFlexShrink(typeof style.flexShrink === "number" ? style.flexShrink : 1);
      }
      if ("flexDirection" in style) {
        if (style.flexDirection === "row") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW);
        }
        if (style.flexDirection === "row-reverse") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_ROW_REVERSE);
        }
        if (style.flexDirection === "column") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN);
        }
        if (style.flexDirection === "column-reverse") {
          node.setFlexDirection(yoga_layout_prebuilt_1.default.FLEX_DIRECTION_COLUMN_REVERSE);
        }
      }
      if ("flexBasis" in style) {
        if (typeof style.flexBasis === "number") {
          node.setFlexBasis(style.flexBasis);
        } else if (typeof style.flexBasis === "string") {
          node.setFlexBasisPercent(Number.parseInt(style.flexBasis, 10));
        } else {
          node.setFlexBasis(NaN);
        }
      }
      if ("alignItems" in style) {
        if (style.alignItems === "stretch" || !style.alignItems) {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_STRETCH);
        }
        if (style.alignItems === "flex-start") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
        }
        if (style.alignItems === "center") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
        }
        if (style.alignItems === "flex-end") {
          node.setAlignItems(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
        }
      }
      if ("alignSelf" in style) {
        if (style.alignSelf === "auto" || !style.alignSelf) {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_AUTO);
        }
        if (style.alignSelf === "flex-start") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_START);
        }
        if (style.alignSelf === "center") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_CENTER);
        }
        if (style.alignSelf === "flex-end") {
          node.setAlignSelf(yoga_layout_prebuilt_1.default.ALIGN_FLEX_END);
        }
      }
      if ("justifyContent" in style) {
        if (style.justifyContent === "flex-start" || !style.justifyContent) {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_START);
        }
        if (style.justifyContent === "center") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_CENTER);
        }
        if (style.justifyContent === "flex-end") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_FLEX_END);
        }
        if (style.justifyContent === "space-between") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_BETWEEN);
        }
        if (style.justifyContent === "space-around") {
          node.setJustifyContent(yoga_layout_prebuilt_1.default.JUSTIFY_SPACE_AROUND);
        }
      }
    };
    var applyDimensionStyles = (node, style) => {
      var _a, _b;
      if ("width" in style) {
        if (typeof style.width === "number") {
          node.setWidth(style.width);
        } else if (typeof style.width === "string") {
          node.setWidthPercent(Number.parseInt(style.width, 10));
        } else {
          node.setWidthAuto();
        }
      }
      if ("height" in style) {
        if (typeof style.height === "number") {
          node.setHeight(style.height);
        } else if (typeof style.height === "string") {
          node.setHeightPercent(Number.parseInt(style.height, 10));
        } else {
          node.setHeightAuto();
        }
      }
      if ("minWidth" in style) {
        if (typeof style.minWidth === "string") {
          node.setMinWidthPercent(Number.parseInt(style.minWidth, 10));
        } else {
          node.setMinWidth((_a = style.minWidth) !== null && _a !== void 0 ? _a : 0);
        }
      }
      if ("minHeight" in style) {
        if (typeof style.minHeight === "string") {
          node.setMinHeightPercent(Number.parseInt(style.minHeight, 10));
        } else {
          node.setMinHeight((_b = style.minHeight) !== null && _b !== void 0 ? _b : 0);
        }
      }
    };
    var applyDisplayStyles = (node, style) => {
      if ("display" in style) {
        node.setDisplay(style.display === "flex" ? yoga_layout_prebuilt_1.default.DISPLAY_FLEX : yoga_layout_prebuilt_1.default.DISPLAY_NONE);
      }
    };
    var applyBorderStyles = (node, style) => {
      if ("borderStyle" in style) {
        const borderWidth = typeof style.borderStyle === "string" ? 1 : 0;
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_TOP, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_BOTTOM, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT, borderWidth);
        node.setBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT, borderWidth);
      }
    };
    exports2.default = (node, style = {}) => {
      applyPositionStyles(node, style);
      applyMarginStyles(node, style);
      applyPaddingStyles(node, style);
      applyFlexStyles(node, style);
      applyDimensionStyles(node, style);
      applyDisplayStyles(node, style);
      applyBorderStyles(node, style);
    };
  }
});

// node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js"(exports2, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
    var convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    module2.exports = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const min = Math.min(r2, g2, b2);
      const max = Math.max(r2, g2, b2);
      const delta = max - min;
      let h;
      let s2;
      if (max === min) {
        h = 0;
      } else if (r2 === max) {
        h = (g2 - b2) / delta;
      } else if (g2 === max) {
        h = 2 + (b2 - r2) / delta;
      } else if (b2 === max) {
        h = 4 + (r2 - g2) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      const l2 = (min + max) / 2;
      if (max === min) {
        s2 = 0;
      } else if (l2 <= 0.5) {
        s2 = delta / (max + min);
      } else {
        s2 = delta / (2 - max - min);
      }
      return [h, s2 * 100, l2 * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h;
      let s2;
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const v = Math.max(r2, g2, b2);
      const diff = v - Math.min(r2, g2, b2);
      const diffc = function(c2) {
        return (v - c2) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = 0;
        s2 = 0;
      } else {
        s2 = diff / v;
        rdif = diffc(r2);
        gdif = diffc(g2);
        bdif = diffc(b2);
        if (r2 === v) {
          h = bdif - gdif;
        } else if (g2 === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b2 === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s2 * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r2 = rgb[0];
      const g2 = rgb[1];
      let b2 = rgb[2];
      const h = convert.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r2, Math.min(g2, b2));
      b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
      return [h, w * 100, b2 * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const k = Math.min(1 - r2, 1 - g2, 1 - b2);
      const c2 = (1 - r2 - k) / (1 - k) || 0;
      const m = (1 - g2 - k) / (1 - k) || 0;
      const y2 = (1 - b2 - k) / (1 - k) || 0;
      return [c2 * 100, m * 100, y2 * 100, k * 100];
    };
    function comparativeDistance(x, y2) {
      return (x[0] - y2[0]) ** 2 + (x[1] - y2[1]) ** 2 + (x[2] - y2[2]) ** 2;
    }
    convert.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      let r2 = rgb[0] / 255;
      let g2 = rgb[1] / 255;
      let b2 = rgb[2] / 255;
      r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
      g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92;
      b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
      const x = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
      const y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
      const z = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
      return [x * 100, y2 * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x = xyz[0];
      let y2 = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l2 = 116 * y2 - 16;
      const a2 = 500 * (x - y2);
      const b2 = 200 * (y2 - z);
      return [l2, a2, b2];
    };
    convert.hsl.rgb = function(hsl) {
      const h = hsl[0] / 360;
      const s2 = hsl[1] / 100;
      const l2 = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s2 === 0) {
        val = l2 * 255;
        return [val, val, val];
      }
      if (l2 < 0.5) {
        t2 = l2 * (1 + s2);
      } else {
        t2 = l2 + s2 - l2 * s2;
      }
      const t1 = 2 * l2 - t2;
      const rgb = [0, 0, 0];
      for (let i2 = 0; i2 < 3; i2++) {
        t3 = h + 1 / 3 * -(i2 - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i2] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h = hsl[0];
      let s2 = hsl[1] / 100;
      let l2 = hsl[2] / 100;
      let smin = s2;
      const lmin = Math.max(l2, 0.01);
      l2 *= 2;
      s2 *= l2 <= 1 ? l2 : 2 - l2;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l2 + s2) / 2;
      const sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h = hsv[0] / 60;
      const s2 = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h) % 6;
      const f = h - Math.floor(h);
      const p = 255 * v * (1 - s2);
      const q = 255 * v * (1 - s2 * f);
      const t2 = 255 * v * (1 - s2 * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t2, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t2];
        case 3:
          return [p, q, v];
        case 4:
          return [t2, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h = hsv[0];
      const s2 = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l2;
      l2 = (2 - s2) * v;
      const lmin = (2 - s2) * vmin;
      sl = s2 * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l2 /= 2;
      return [h, sl * 100, l2 * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i2 = Math.floor(6 * h);
      const v = 1 - bl;
      f = 6 * h - i2;
      if ((i2 & 1) !== 0) {
        f = 1 - f;
      }
      const n2 = wh + f * (v - wh);
      let r2;
      let g2;
      let b2;
      switch (i2) {
        default:
        case 6:
        case 0:
          r2 = v;
          g2 = n2;
          b2 = wh;
          break;
        case 1:
          r2 = n2;
          g2 = v;
          b2 = wh;
          break;
        case 2:
          r2 = wh;
          g2 = v;
          b2 = n2;
          break;
        case 3:
          r2 = wh;
          g2 = n2;
          b2 = v;
          break;
        case 4:
          r2 = n2;
          g2 = wh;
          b2 = v;
          break;
        case 5:
          r2 = v;
          g2 = wh;
          b2 = n2;
          break;
      }
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c2 = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y2 = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r2 = 1 - Math.min(1, c2 * (1 - k) + k);
      const g2 = 1 - Math.min(1, m * (1 - k) + k);
      const b2 = 1 - Math.min(1, y2 * (1 - k) + k);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x = xyz[0] / 100;
      const y2 = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r2;
      let g2;
      let b2;
      r2 = x * 3.2406 + y2 * -1.5372 + z * -0.4986;
      g2 = x * -0.9689 + y2 * 1.8758 + z * 0.0415;
      b2 = x * 0.0557 + y2 * -0.204 + z * 1.057;
      r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
      g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92;
      b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92;
      r2 = Math.min(Math.max(0, r2), 1);
      g2 = Math.min(Math.max(0, g2), 1);
      b2 = Math.min(Math.max(0, b2), 1);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x = xyz[0];
      let y2 = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l2 = 116 * y2 - 16;
      const a2 = 500 * (x - y2);
      const b2 = 200 * (y2 - z);
      return [l2, a2, b2];
    };
    convert.lab.xyz = function(lab) {
      const l2 = lab[0];
      const a2 = lab[1];
      const b2 = lab[2];
      let x;
      let y2;
      let z;
      y2 = (l2 + 16) / 116;
      x = a2 / 500 + y2;
      z = y2 - b2 / 200;
      const y22 = y2 ** 3;
      const x2 = x ** 3;
      const z2 = z ** 3;
      y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y2 *= 100;
      z *= 108.883;
      return [x, y2, z];
    };
    convert.lab.lch = function(lab) {
      const l2 = lab[0];
      const a2 = lab[1];
      const b2 = lab[2];
      let h;
      const hr = Math.atan2(b2, a2);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      const c2 = Math.sqrt(a2 * a2 + b2 * b2);
      return [l2, c2, h];
    };
    convert.lch.lab = function(lch) {
      const l2 = lch[0];
      const c2 = lch[1];
      const h = lch[2];
      const hr = h / 360 * 2 * Math.PI;
      const a2 = c2 * Math.cos(hr);
      const b2 = c2 * Math.sin(hr);
      return [l2, a2, b2];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r2, g2, b2] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r2 = args[0];
      const g2 = args[1];
      const b2 = args[2];
      if (r2 === g2 && g2 === b2) {
        if (r2 < 8) {
          return 16;
        }
        if (r2 > 248) {
          return 231;
        }
        return Math.round((r2 - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r2 = (color & 1) * mult * 255;
      const g2 = (color >> 1 & 1) * mult * 255;
      const b2 = (color >> 2 & 1) * mult * 255;
      return [r2, g2, b2];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c2 = (args - 232) * 10 + 8;
        return [c2, c2, c2];
      }
      args -= 16;
      let rem;
      const r2 = Math.floor(args / 36) / 5 * 255;
      const g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b2 = rem % 6 / 5 * 255;
      return [r2, g2, b2];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r2 = integer >> 16 & 255;
      const g2 = integer >> 8 & 255;
      const b2 = integer & 255;
      return [r2, g2, b2];
    };
    convert.rgb.hcg = function(rgb) {
      const r2 = rgb[0] / 255;
      const g2 = rgb[1] / 255;
      const b2 = rgb[2] / 255;
      const max = Math.max(Math.max(r2, g2), b2);
      const min = Math.min(Math.min(r2, g2), b2);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r2) {
        hue = (g2 - b2) / chroma % 6;
      } else if (max === g2) {
        hue = 2 + (b2 - r2) / chroma;
      } else {
        hue = 4 + (r2 - g2) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s2 = hsl[1] / 100;
      const l2 = hsl[2] / 100;
      const c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2);
      let f = 0;
      if (c2 < 1) {
        f = (l2 - 0.5 * c2) / (1 - c2);
      }
      return [hsl[0], c2 * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s2 = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c2 = s2 * v;
      let f = 0;
      if (c2 < 1) {
        f = (v - c2) / (1 - c2);
      }
      return [hsv[0], c2 * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h = hcg[0] / 360;
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      if (c2 === 0) {
        return [g2 * 255, g2 * 255, g2 * 255];
      }
      const pure = [0, 0, 0];
      const hi = h % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c2) * g2;
      return [
        (c2 * pure[0] + mg) * 255,
        (c2 * pure[1] + mg) * 255,
        (c2 * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const v = c2 + g2 * (1 - c2);
      let f = 0;
      if (v > 0) {
        f = c2 / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const l2 = g2 * (1 - c2) + 0.5 * c2;
      let s2 = 0;
      if (l2 > 0 && l2 < 0.5) {
        s2 = c2 / (2 * l2);
      } else if (l2 >= 0.5 && l2 < 1) {
        s2 = c2 / (2 * (1 - l2));
      }
      return [hcg[0], s2 * 100, l2 * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c2 = hcg[1] / 100;
      const g2 = hcg[2] / 100;
      const v = c2 + g2 * (1 - c2);
      return [hcg[0], (v - c2) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w = hwb[1] / 100;
      const b2 = hwb[2] / 100;
      const v = 1 - b2;
      const c2 = v - w;
      let g2 = 0;
      if (c2 < 1) {
        g2 = (v - c2) / (1 - c2);
      }
      return [hwb[0], c2 * 100, g2 * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"(exports2, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      const graph = {};
      const models = Object.keys(conversions);
      for (let len = models.length, i2 = 0; i2 < len; i2++) {
        graph[models[i2]] = {
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        const current = queue.pop();
        const adjacents = Object.keys(conversions[current]);
        for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
          const adjacent = adjacents[i2];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);
      for (let len = models.length, i2 = 0; i2 < len; i2++) {
        const toModel = models[i2];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js"(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn(args);
        if (typeof result === "object") {
          for (let len = result.length, i2 = 0; i2 < len; i2++) {
            result[i2] = Math.round(result[i2]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js"(exports2, module2) {
    "use strict";
    var wrapAnsi16 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => (...args) => {
      const rgb = fn(...args);
      return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    var ansi2ansi = (n2) => n2;
    var rgb2rgb = (r2, g2, b2) => [r2, g2, b2];
    var setLazyProperty = (object, property, get) => {
      Object.defineProperty(object, property, {
        get: () => {
          const value = get();
          Object.defineProperty(object, property, {
            value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    var colorConvert;
    var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
      if (colorConvert === void 0) {
        colorConvert = require_color_convert();
      }
      const offset = isBackground ? 10 : 0;
      const styles = {};
      for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
        const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
        if (sourceSpace === targetSpace) {
          styles[name] = wrap(identity, offset);
        } else if (typeof suite === "object") {
          styles[name] = wrap(suite[targetSpace], offset);
        }
      }
      return styles;
    };
    function assembleStyles() {
      const codes = new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `[${style[0]}m`,
            close: `[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "[39m";
      styles.bgColor.close = "[49m";
      setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
      setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS({
  "node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js"(exports2, module2) {
    "use strict";
    var stringWidth = require_string_width();
    var stripAnsi = require_strip_ansi();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = new Set([
      "",
      "\x9B"
    ]);
    var END_CODE = 39;
    var wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
    var wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
    var wrapWord = (rows, word, columns) => {
      const characters = [...word];
      let isInsideEscape = false;
      let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
      for (const [index, character] of characters.entries()) {
        const characterLength = stringWidth(character);
        if (visible + characterLength <= columns) {
          rows[rows.length - 1] += character;
        } else {
          rows.push(character);
          visible = 0;
        }
        if (ESCAPES.has(character)) {
          isInsideEscape = true;
        } else if (isInsideEscape && character === "m") {
          isInsideEscape = false;
          continue;
        }
        if (isInsideEscape) {
          continue;
        }
        visible += characterLength;
        if (visible === columns && index < characters.length - 1) {
          rows.push("");
          visible = 0;
        }
      }
      if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
        rows[rows.length - 2] += rows.pop();
      }
    };
    var stringVisibleTrimSpacesRight = (str) => {
      const words = str.split(" ");
      let last = words.length;
      while (last > 0) {
        if (stringWidth(words[last - 1]) > 0) {
          break;
        }
        last--;
      }
      if (last === words.length) {
        return str;
      }
      return words.slice(0, last).join(" ") + words.slice(last).join("");
    };
    var exec = (string, columns, options = {}) => {
      if (options.trim !== false && string.trim() === "") {
        return "";
      }
      let pre = "";
      let ret = "";
      let escapeCode;
      const lengths = wordLengths(string);
      let rows = [""];
      for (const [index, word] of string.split(" ").entries()) {
        if (options.trim !== false) {
          rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
        }
        let rowLength = stringWidth(rows[rows.length - 1]);
        if (index !== 0) {
          if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
            rows.push("");
            rowLength = 0;
          }
          if (rowLength > 0 || options.trim === false) {
            rows[rows.length - 1] += " ";
            rowLength++;
          }
        }
        if (options.hard && lengths[index] > columns) {
          const remainingColumns = columns - rowLength;
          const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
          const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
          if (breaksStartingNextLine < breaksStartingThisLine) {
            rows.push("");
          }
          wrapWord(rows, word, columns);
          continue;
        }
        if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
          if (options.wordWrap === false && rowLength < columns) {
            wrapWord(rows, word, columns);
            continue;
          }
          rows.push("");
        }
        if (rowLength + lengths[index] > columns && options.wordWrap === false) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows[rows.length - 1] += word;
      }
      if (options.trim !== false) {
        rows = rows.map(stringVisibleTrimSpacesRight);
      }
      pre = rows.join("\n");
      for (const [index, character] of [...pre].entries()) {
        ret += character;
        if (ESCAPES.has(character)) {
          const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
          escapeCode = code2 === END_CODE ? null : code2;
        }
        const code = ansiStyles.codes.get(Number(escapeCode));
        if (escapeCode && code) {
          if (pre[index + 1] === "\n") {
            ret += wrapAnsi(code);
          } else if (character === "\n") {
            ret += wrapAnsi(escapeCode);
          }
        }
      }
      return ret;
    };
    module2.exports = (string, columns, options) => {
      return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
    };
  }
});

// node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js
var require_astral_regex = __commonJS({
  "node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js"(exports2, module2) {
    "use strict";
    var regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
    var astralRegex = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
    module2.exports = astralRegex;
  }
});

// node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js
var require_slice_ansi = __commonJS({
  "node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js"(exports2, module2) {
    "use strict";
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var astralRegex = require_astral_regex();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = [
      "",
      "\x9B"
    ];
    var wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
    var checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
      let output = [];
      ansiCodes = [...ansiCodes];
      for (let ansiCode of ansiCodes) {
        const ansiCodeOrigin = ansiCode;
        if (ansiCode.match(";")) {
          ansiCode = ansiCode.split(";")[0][0] + "0";
        }
        const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
        if (item) {
          const indexEscape = ansiCodes.indexOf(item.toString());
          if (indexEscape >= 0) {
            ansiCodes.splice(indexEscape, 1);
          } else {
            output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
          }
        } else if (isEscapes) {
          output.push(wrapAnsi(0));
          break;
        } else {
          output.push(wrapAnsi(ansiCodeOrigin));
        }
      }
      if (isEscapes) {
        output = output.filter((element, index) => output.indexOf(element) === index);
        if (endAnsiCode !== void 0) {
          const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
          output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
        }
      }
      return output.join("");
    };
    module2.exports = (string, begin, end) => {
      const characters = [...string.normalize()];
      const ansiCodes = [];
      end = typeof end === "number" ? end : characters.length;
      let isInsideEscape = false;
      let ansiCode;
      let visible = 0;
      let output = "";
      for (const [index, character] of characters.entries()) {
        let leftEscape = false;
        if (ESCAPES.includes(character)) {
          const code = /\d[^m]*/.exec(string.slice(index, index + 18));
          ansiCode = code && code.length > 0 ? code[0] : void 0;
          if (visible < end) {
            isInsideEscape = true;
            if (ansiCode !== void 0) {
              ansiCodes.push(ansiCode);
            }
          }
        } else if (isInsideEscape && character === "m") {
          isInsideEscape = false;
          leftEscape = true;
        }
        if (!isInsideEscape && !leftEscape) {
          ++visible;
        }
        if (!astralRegex({ exact: true }).test(character) && isFullwidthCodePoint(character.codePointAt())) {
          ++visible;
        }
        if (visible > begin && visible <= end) {
          output += character;
        } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
          output = checkAnsi(ansiCodes);
        } else if (visible >= end) {
          output += checkAnsi(ansiCodes, true, ansiCode);
          break;
        }
      }
      return output;
    };
  }
});

// node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js
var require_cli_truncate = __commonJS({
  "node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js"(exports2, module2) {
    "use strict";
    var sliceAnsi = require_slice_ansi();
    var stringWidth = require_string_width();
    function getIndexOfNearestSpace(string, index, shouldSearchRight) {
      if (string.charAt(index) === " ") {
        return index;
      }
      for (let i2 = 1; i2 <= 3; i2++) {
        if (shouldSearchRight) {
          if (string.charAt(index + i2) === " ") {
            return index + i2;
          }
        } else if (string.charAt(index - i2) === " ") {
          return index - i2;
        }
      }
      return index;
    }
    module2.exports = (text, columns, options) => {
      options = __spreadValues({
        position: "end",
        preferTruncationOnSpace: false
      }, options);
      const { position, space, preferTruncationOnSpace } = options;
      let ellipsis = "\u2026";
      let ellipsisWidth = 1;
      if (typeof text !== "string") {
        throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
      }
      if (typeof columns !== "number") {
        throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
      }
      if (columns < 1) {
        return "";
      }
      if (columns === 1) {
        return ellipsis;
      }
      const length = stringWidth(text);
      if (length <= columns) {
        return text;
      }
      if (position === "start") {
        if (preferTruncationOnSpace) {
          const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
          return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
        }
        if (space === true) {
          ellipsis += " ";
          ellipsisWidth = 2;
        }
        return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
      }
      if (position === "middle") {
        if (space === true) {
          ellipsis = " " + ellipsis + " ";
          ellipsisWidth = 3;
        }
        const half = Math.floor(columns / 2);
        if (preferTruncationOnSpace) {
          const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
          const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
          return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
        }
        return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
      }
      if (position === "end") {
        if (preferTruncationOnSpace) {
          const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
          return sliceAnsi(text, 0, nearestSpace) + ellipsis;
        }
        if (space === true) {
          ellipsis = " " + ellipsis;
          ellipsisWidth = 2;
        }
        return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
      }
      throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/wrap-text.js
var require_wrap_text = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/wrap-text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var wrap_ansi_1 = __importDefault(require_wrap_ansi());
    var cli_truncate_1 = __importDefault(require_cli_truncate());
    var cache = {};
    exports2.default = (text, maxWidth, wrapType) => {
      const cacheKey = text + String(maxWidth) + String(wrapType);
      if (cache[cacheKey]) {
        return cache[cacheKey];
      }
      let wrappedText = text;
      if (wrapType === "wrap") {
        wrappedText = wrap_ansi_1.default(text, maxWidth, {
          trim: false,
          hard: true
        });
      }
      if (wrapType.startsWith("truncate")) {
        let position = "end";
        if (wrapType === "truncate-middle") {
          position = "middle";
        }
        if (wrapType === "truncate-start") {
          position = "start";
        }
        wrappedText = cli_truncate_1.default(text, maxWidth, { position });
      }
      cache[cacheKey] = wrappedText;
      return wrappedText;
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/squash-text-nodes.js
var require_squash_text_nodes = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/squash-text-nodes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var squashTextNodes = (node) => {
      let text = "";
      if (node.childNodes.length > 0) {
        for (const childNode of node.childNodes) {
          let nodeText = "";
          if (childNode.nodeName === "#text") {
            nodeText = childNode.nodeValue;
          } else {
            if (childNode.nodeName === "ink-text" || childNode.nodeName === "ink-virtual-text") {
              nodeText = squashTextNodes(childNode);
            }
            if (nodeText.length > 0 && typeof childNode.internal_transform === "function") {
              nodeText = childNode.internal_transform(nodeText);
            }
          }
          text += nodeText;
        }
      }
      return text;
    };
    exports2.default = squashTextNodes;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/dom.js
var require_dom = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/dom.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setTextNodeValue = exports2.createTextNode = exports2.setStyle = exports2.setAttribute = exports2.removeChildNode = exports2.insertBeforeNode = exports2.appendChildNode = exports2.createNode = exports2.TEXT_NAME = void 0;
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    var measure_text_1 = __importDefault(require_measure_text());
    var styles_1 = __importDefault(require_styles());
    var wrap_text_1 = __importDefault(require_wrap_text());
    var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
    exports2.TEXT_NAME = "#text";
    exports2.createNode = (nodeName) => {
      var _a;
      const node = {
        nodeName,
        style: {},
        attributes: {},
        childNodes: [],
        parentNode: null,
        yogaNode: nodeName === "ink-virtual-text" ? void 0 : yoga_layout_prebuilt_1.default.Node.create()
      };
      if (nodeName === "ink-text") {
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setMeasureFunc(measureTextNode.bind(null, node));
      }
      return node;
    };
    exports2.appendChildNode = (node, childNode) => {
      var _a;
      if (childNode.parentNode) {
        exports2.removeChildNode(childNode.parentNode, childNode);
      }
      childNode.parentNode = node;
      node.childNodes.push(childNode);
      if (childNode.yogaNode) {
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.insertChild(childNode.yogaNode, node.yogaNode.getChildCount());
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.insertBeforeNode = (node, newChildNode, beforeChildNode) => {
      var _a, _b;
      if (newChildNode.parentNode) {
        exports2.removeChildNode(newChildNode.parentNode, newChildNode);
      }
      newChildNode.parentNode = node;
      const index = node.childNodes.indexOf(beforeChildNode);
      if (index >= 0) {
        node.childNodes.splice(index, 0, newChildNode);
        if (newChildNode.yogaNode) {
          (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.insertChild(newChildNode.yogaNode, index);
        }
        return;
      }
      node.childNodes.push(newChildNode);
      if (newChildNode.yogaNode) {
        (_b = node.yogaNode) === null || _b === void 0 ? void 0 : _b.insertChild(newChildNode.yogaNode, node.yogaNode.getChildCount());
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.removeChildNode = (node, removeNode) => {
      var _a, _b;
      if (removeNode.yogaNode) {
        (_b = (_a = removeNode.parentNode) === null || _a === void 0 ? void 0 : _a.yogaNode) === null || _b === void 0 ? void 0 : _b.removeChild(removeNode.yogaNode);
      }
      removeNode.parentNode = null;
      const index = node.childNodes.indexOf(removeNode);
      if (index >= 0) {
        node.childNodes.splice(index, 1);
      }
      if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
        markNodeAsDirty(node);
      }
    };
    exports2.setAttribute = (node, key, value) => {
      node.attributes[key] = value;
    };
    exports2.setStyle = (node, style) => {
      node.style = style;
      if (node.yogaNode) {
        styles_1.default(node.yogaNode, style);
      }
    };
    exports2.createTextNode = (text) => {
      const node = {
        nodeName: "#text",
        nodeValue: text,
        yogaNode: void 0,
        parentNode: null,
        style: {}
      };
      exports2.setTextNodeValue(node, text);
      return node;
    };
    var measureTextNode = function(node, width) {
      var _a, _b;
      const text = node.nodeName === "#text" ? node.nodeValue : squash_text_nodes_1.default(node);
      const dimensions = measure_text_1.default(text);
      if (dimensions.width <= width) {
        return dimensions;
      }
      if (dimensions.width >= 1 && width > 0 && width < 1) {
        return dimensions;
      }
      const textWrap = (_b = (_a = node.style) === null || _a === void 0 ? void 0 : _a.textWrap) !== null && _b !== void 0 ? _b : "wrap";
      const wrappedText = wrap_text_1.default(text, width, textWrap);
      return measure_text_1.default(wrappedText);
    };
    var findClosestYogaNode = (node) => {
      var _a;
      if (!node || !node.parentNode) {
        return void 0;
      }
      return (_a = node.yogaNode) !== null && _a !== void 0 ? _a : findClosestYogaNode(node.parentNode);
    };
    var markNodeAsDirty = (node) => {
      const yogaNode = findClosestYogaNode(node);
      yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.markDirty();
    };
    exports2.setTextNodeValue = (node, text) => {
      if (typeof text !== "string") {
        text = String(text);
      }
      node.nodeValue = text;
      markNodeAsDirty(node);
    };
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      EMPTY_BUFFER: Buffer.alloc(0),
      NOOP: () => {
      }
    };
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/buffer-util.js"(exports2, module2) {
    "use strict";
    var { EMPTY_BUFFER } = require_constants();
    function concat(list, totalLength) {
      if (list.length === 0)
        return EMPTY_BUFFER;
      if (list.length === 1)
        return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i2 = 0; i2 < list.length; i2++) {
        const buf = list[i2];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength)
        return target.slice(0, offset);
      return target;
    }
    function _mask(source, mask, output, offset, length) {
      for (let i2 = 0; i2 < length; i2++) {
        output[offset + i2] = source[i2] ^ mask[i2 & 3];
      }
    }
    function _unmask(buffer, mask) {
      const length = buffer.length;
      for (let i2 = 0; i2 < length; i2++) {
        buffer[i2] ^= mask[i2 & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data))
        return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    try {
      const bufferUtil = require("bufferutil");
      const bu = bufferUtil.BufferUtil || bufferUtil;
      module2.exports = {
        concat,
        mask(source, mask, output, offset, length) {
          if (length < 48)
            _mask(source, mask, output, offset, length);
          else
            bu.mask(source, mask, output, offset, length);
        },
        toArrayBuffer,
        toBuffer,
        unmask(buffer, mask) {
          if (buffer.length < 32)
            _unmask(buffer, mask);
          else
            bu.unmask(buffer, mask);
        }
      };
    } catch (e2) {
      module2.exports = {
        concat,
        mask: _mask,
        toArrayBuffer,
        toBuffer,
        unmask: _unmask
      };
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/limiter.js"(exports2, module2) {
    "use strict";
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      [kRun]() {
        if (this.pending === this.concurrency)
          return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module2.exports = Limiter;
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/permessage-deflate.js"(exports2, module2) {
    "use strict";
    var zlib = require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode, NOOP } = require_constants();
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(new Error("The deflate stream was closed while data was being processed"));
          }
        }
      }
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        }
        return params;
      }
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value = params[key];
            if (value.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }
            value = value[0];
            if (key === "client_max_window_bits") {
              if (value !== true) {
                const num = +value;
                if (!Number.isInteger(num) || num < 8 || num > 15) {
                  throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
                }
                value = num;
              } else if (!this._isServer) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
            } else if (key === "server_max_window_bits") {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
              value = num;
            } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }
            params[key] = value;
          });
        });
        return configurations;
      }
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._inflate = zlib.createInflateRaw(__spreadProps(__spreadValues({}, this._options.zlibInflateOptions), {
            windowBits
          }));
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin)
          this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err = this._inflate[kError];
          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }
          const data2 = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._deflate = zlib.createDeflateRaw(__spreadProps(__spreadValues({}, this._options.zlibDeflateOptions), {
            windowBits
          }));
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("error", NOOP);
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);
          if (fin)
            data2 = data2.slice(0, data2.length - 4);
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module2.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err) {
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode] = 1007;
      this[kCallback](err);
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/validation.js"(exports2, module2) {
    "use strict";
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i2 = 0;
      while (i2 < len) {
        if ((buf[i2] & 128) === 0) {
          i2++;
        } else if ((buf[i2] & 224) === 192) {
          if (i2 + 1 === len || (buf[i2 + 1] & 192) !== 128 || (buf[i2] & 254) === 192) {
            return false;
          }
          i2 += 2;
        } else if ((buf[i2] & 240) === 224) {
          if (i2 + 2 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || buf[i2] === 224 && (buf[i2 + 1] & 224) === 128 || buf[i2] === 237 && (buf[i2 + 1] & 224) === 160) {
            return false;
          }
          i2 += 3;
        } else if ((buf[i2] & 248) === 240) {
          if (i2 + 3 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || (buf[i2 + 3] & 192) !== 128 || buf[i2] === 240 && (buf[i2 + 1] & 240) === 128 || buf[i2] === 244 && buf[i2 + 1] > 143 || buf[i2] > 244) {
            return false;
          }
          i2 += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    try {
      let isValidUTF8 = require("utf-8-validate");
      if (typeof isValidUTF8 === "object") {
        isValidUTF8 = isValidUTF8.Validation.isValidUTF8;
      }
      module2.exports = {
        isValidStatusCode,
        isValidUTF8(buf) {
          return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
        }
      };
    } catch (e2) {
      module2.exports = {
        isValidStatusCode,
        isValidUTF8: _isValidUTF8
      };
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var Receiver = class extends Writable {
      constructor(binaryType, extensions, isServer, maxPayload) {
        super();
        this._binaryType = binaryType || BINARY_TYPES[0];
        this[kWebSocket] = void 0;
        this._extensions = extensions || {};
        this._isServer = !!isServer;
        this._maxPayload = maxPayload | 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._state = GET_INFO;
        this._loop = false;
      }
      _write(chunk, encoding, cb) {
        if (this._opcode === 8 && this._state == GET_INFO)
          return cb();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }
      consume(n2) {
        this._bufferedBytes -= n2;
        if (n2 === this._buffers[0].length)
          return this._buffers.shift();
        if (n2 < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = buf.slice(n2);
          return buf.slice(0, n2);
        }
        const dst = Buffer.allocUnsafe(n2);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n2;
          if (n2 >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n2), offset);
            this._buffers[0] = buf.slice(n2);
          }
          n2 -= buf.length;
        } while (n2 > 0);
        return dst;
      }
      startLoop(cb) {
        let err;
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              err = this.getInfo();
              break;
            case GET_PAYLOAD_LENGTH_16:
              err = this.getPayloadLength16();
              break;
            case GET_PAYLOAD_LENGTH_64:
              err = this.getPayloadLength64();
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              err = this.getData(cb);
              break;
            default:
              this._loop = false;
              return;
          }
        } while (this._loop);
        cb(err);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          this._loop = false;
          return error(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            this._loop = false;
            return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          }
          if (!this._fragmented) {
            this._loop = false;
            return error(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            this._loop = false;
            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            this._loop = false;
            return error(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
          }
          if (compressed) {
            this._loop = false;
            return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          }
          if (this._payloadLength > 125) {
            this._loop = false;
            return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
          }
        } else {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
        }
        if (!this._fin && !this._fragmented)
          this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            this._loop = false;
            return error(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
          }
        } else if (this._masked) {
          this._loop = false;
          return error(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
        }
        if (this._payloadLength === 126)
          this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127)
          this._state = GET_PAYLOAD_LENGTH_64;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        return this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num = buf.readUInt32BE(0);
        if (num > Math.pow(2, 53 - 32) - 1) {
          this._loop = false;
          return error(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");
        }
        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
        return this.haveLength();
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            this._loop = false;
            return error(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
          }
        }
        if (this._masked)
          this._state = GET_MASK;
        else
          this._state = GET_DATA;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      getData(cb) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked)
            unmask(data, this._mask);
        }
        if (this._opcode > 7)
          return this.controlMessage(data);
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        return this.dataMessage();
      }
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err)
            return cb(err);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              return cb(error(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"));
            }
            this._fragments.push(buf);
          }
          const er = this.dataMessage();
          if (er)
            return cb(er);
          this.startLoop(cb);
        });
      }
      dataMessage() {
        if (this._fin) {
          const messageLength = this._messageLength;
          const fragments = this._fragments;
          this._totalPayloadLength = 0;
          this._messageLength = 0;
          this._fragmented = 0;
          this._fragments = [];
          if (this._opcode === 2) {
            let data;
            if (this._binaryType === "nodebuffer") {
              data = concat(fragments, messageLength);
            } else if (this._binaryType === "arraybuffer") {
              data = toArrayBuffer(concat(fragments, messageLength));
            } else {
              data = fragments;
            }
            this.emit("message", data);
          } else {
            const buf = concat(fragments, messageLength);
            if (!isValidUTF8(buf)) {
              this._loop = false;
              return error(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            }
            this.emit("message", buf.toString());
          }
        }
        this._state = GET_INFO;
      }
      controlMessage(data) {
        if (this._opcode === 8) {
          this._loop = false;
          if (data.length === 0) {
            this.emit("conclude", 1005, "");
            this.end();
          } else if (data.length === 1) {
            return error(RangeError, "invalid payload length 1", true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              return error(RangeError, `invalid status code ${code}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
            }
            const buf = data.slice(2);
            if (!isValidUTF8(buf)) {
              return error(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            }
            this.emit("conclude", code, buf.toString());
            this.end();
          }
        } else if (this._opcode === 9) {
          this.emit("ping", data);
        } else {
          this.emit("pong", data);
        }
        this._state = GET_INFO;
      }
    };
    module2.exports = Receiver;
    function error(ErrorCtor, message, prefix, statusCode, errorCode) {
      const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
      Error.captureStackTrace(err, error);
      err.code = errorCode;
      err[kStatusCode] = statusCode;
      return err;
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/sender.js"(exports2, module2) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var { randomFillSync } = require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER } = require_constants();
    var { isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var mask = Buffer.alloc(4);
    var Sender = class {
      constructor(socket, extensions) {
        this._extensions = extensions || {};
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }
      static frame(data, options) {
        const merge = options.mask && options.readOnly;
        let offset = options.mask ? 6 : 2;
        let payloadLength = data.length;
        if (data.length >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (data.length > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
        target[0] = options.fin ? options.opcode | 128 : options.opcode;
        if (options.rsv1)
          target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(data.length, 2);
        } else if (payloadLength === 127) {
          target.writeUInt32BE(0, 2);
          target.writeUInt32BE(data.length, 6);
        }
        if (!options.mask)
          return [target, data];
        randomFillSync(mask, 0, 4);
        target[1] |= 128;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];
        if (merge) {
          applyMask(data, mask, target, offset, data.length);
          return [target];
        }
        applyMask(data, mask, data, 0, data.length);
        return [target, data];
      }
      close(code, data, mask2, cb) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || data === "") {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          buf.write(data, 2);
        }
        if (this._deflating) {
          this.enqueue([this.doClose, buf, mask2, cb]);
        } else {
          this.doClose(buf, mask2, cb);
        }
      }
      doClose(data, mask2, cb) {
        this.sendFrame(Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 8,
          mask: mask2,
          readOnly: false
        }), cb);
      }
      ping(data, mask2, cb) {
        const buf = toBuffer(data);
        if (buf.length > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        if (this._deflating) {
          this.enqueue([this.doPing, buf, mask2, toBuffer.readOnly, cb]);
        } else {
          this.doPing(buf, mask2, toBuffer.readOnly, cb);
        }
      }
      doPing(data, mask2, readOnly, cb) {
        this.sendFrame(Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 9,
          mask: mask2,
          readOnly
        }), cb);
      }
      pong(data, mask2, cb) {
        const buf = toBuffer(data);
        if (buf.length > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        if (this._deflating) {
          this.enqueue([this.doPong, buf, mask2, toBuffer.readOnly, cb]);
        } else {
          this.doPong(buf, mask2, toBuffer.readOnly, cb);
        }
      }
      doPong(data, mask2, readOnly, cb) {
        this.sendFrame(Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 10,
          mask: mask2,
          readOnly
        }), cb);
      }
      send(data, options, cb) {
        const buf = toBuffer(data);
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate) {
            rsv1 = buf.length >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options.fin)
          this._firstFragment = true;
        if (perMessageDeflate) {
          const opts = {
            fin: options.fin,
            rsv1,
            opcode,
            mask: options.mask,
            readOnly: toBuffer.readOnly
          };
          if (this._deflating) {
            this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
          } else {
            this.dispatch(buf, this._compress, opts, cb);
          }
        } else {
          this.sendFrame(Sender.frame(buf, {
            fin: options.fin,
            rsv1: false,
            opcode,
            mask: options.mask,
            readOnly: toBuffer.readOnly
          }), cb);
        }
      }
      dispatch(data, compress, options, cb) {
        if (!compress) {
          this.sendFrame(Sender.frame(data, options), cb);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += data.length;
        this._deflating = true;
        perMessageDeflate.compress(data, options.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err = new Error("The socket was closed while data was being compressed");
            if (typeof cb === "function")
              cb(err);
            for (let i2 = 0; i2 < this._queue.length; i2++) {
              const callback = this._queue[i2][4];
              if (typeof callback === "function")
                callback(err);
            }
            return;
          }
          this._bufferedBytes -= data.length;
          this._deflating = false;
          options.readOnly = false;
          this.sendFrame(Sender.frame(buf, options), cb);
          this.dequeue();
        });
      }
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[1].length;
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      enqueue(params) {
        this._bufferedBytes += params[1].length;
        this._queue.push(params);
      }
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    };
    module2.exports = Sender;
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/event-target.js"(exports2, module2) {
    "use strict";
    var Event = class {
      constructor(type, target) {
        this.target = target;
        this.type = type;
      }
    };
    var MessageEvent = class extends Event {
      constructor(data, target) {
        super("message", target);
        this.data = data;
      }
    };
    var CloseEvent = class extends Event {
      constructor(code, reason, target) {
        super("close", target);
        this.wasClean = target._closeFrameReceived && target._closeFrameSent;
        this.reason = reason;
        this.code = code;
      }
    };
    var OpenEvent = class extends Event {
      constructor(target) {
        super("open", target);
      }
    };
    var ErrorEvent = class extends Event {
      constructor(error, target) {
        super("error", target);
        this.message = error.message;
        this.error = error;
      }
    };
    var EventTarget = {
      addEventListener(type, listener, options) {
        if (typeof listener !== "function")
          return;
        function onMessage(data) {
          listener.call(this, new MessageEvent(data, this));
        }
        function onClose(code, message) {
          listener.call(this, new CloseEvent(code, message, this));
        }
        function onError(error) {
          listener.call(this, new ErrorEvent(error, this));
        }
        function onOpen() {
          listener.call(this, new OpenEvent(this));
        }
        const method = options && options.once ? "once" : "on";
        if (type === "message") {
          onMessage._listener = listener;
          this[method](type, onMessage);
        } else if (type === "close") {
          onClose._listener = listener;
          this[method](type, onClose);
        } else if (type === "error") {
          onError._listener = listener;
          this[method](type, onError);
        } else if (type === "open") {
          onOpen._listener = listener;
          this[method](type, onOpen);
        } else {
          this[method](type, listener);
        }
      },
      removeEventListener(type, listener) {
        const listeners = this.listeners(type);
        for (let i2 = 0; i2 < listeners.length; i2++) {
          if (listeners[i2] === listener || listeners[i2]._listener === listener) {
            this.removeListener(type, listeners[i2]);
          }
        }
      }
    };
    module2.exports = EventTarget;
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/extension.js"(exports2, module2) {
    "use strict";
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
    ];
    function push(dest, name, elem) {
      if (dest[name] === void 0)
        dest[name] = [elem];
      else
        dest[name].push(elem);
    }
    function parse(header) {
      const offers = Object.create(null);
      if (header === void 0 || header === "")
        return offers;
      let params = Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let end = -1;
      let i2 = 0;
      for (; i2 < header.length; i2++) {
        const code = header.charCodeAt(i2);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i2);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (start === -1)
              start = i2;
            else if (!mustUnescape)
              mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1)
                start = i2;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i2;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
          } else if (code === 34 && header.charCodeAt(i2 - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        }
      }
      if (start === -1 || inQuotes) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1)
        end = i2;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations))
          configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(Object.keys(params).map((k) => {
            let values = params[k];
            if (!Array.isArray(values))
              values = [values];
            return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
          })).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module2.exports = { format, parse };
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/websocket.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var https = require("https");
    var http = require("http");
    var net = require("net");
    var tls = require("tls");
    var { randomBytes, createHash } = require("crypto");
    var { Readable } = require("stream");
    var { URL } = require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver = require_receiver();
    var Sender = require_sender();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants();
    var { addEventListener, removeEventListener } = require_event_target();
    var { format, parse } = require_extension();
    var { toBuffer } = require_buffer_util();
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var protocolVersions = [8, 13];
    var closeTimeout = 30 * 1e3;
    var WebSocket = class extends EventEmitter {
      constructor(address, protocols, options) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = "";
        this._closeTimer = null;
        this._extensions = {};
        this._protocol = "";
        this._readyState = WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (Array.isArray(protocols)) {
            protocols = protocols.join(", ");
          } else if (typeof protocols === "object" && protocols !== null) {
            options = protocols;
            protocols = void 0;
          }
          initAsClient(this, address, protocols, options);
        } else {
          this._isServer = true;
        }
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type) {
        if (!BINARY_TYPES.includes(type))
          return;
        this._binaryType = type;
        if (this._receiver)
          this._receiver._binaryType = type;
      }
      get bufferedAmount() {
        if (!this._socket)
          return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get onclose() {
        return void 0;
      }
      set onclose(listener) {
      }
      get onerror() {
        return void 0;
      }
      set onerror(listener) {
      }
      get onopen() {
        return void 0;
      }
      set onopen(listener) {
      }
      get onmessage() {
        return void 0;
      }
      set onmessage(listener) {
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(socket, head, maxPayload) {
        const receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);
        this._sender = new Sender(socket, this._extensions);
        this._receiver = receiver;
        this._socket = socket;
        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        socket.setTimeout(0);
        socket.setNoDelay();
        if (head.length > 0)
          socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = WebSocket.OPEN;
        this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = WebSocket.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      close(code, data) {
        if (this.readyState === WebSocket.CLOSED)
          return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          return abortHandshake(this, this._req, msg);
        }
        if (this.readyState === WebSocket.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          if (err)
            return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
      }
      ping(data, mask, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }
      pong(data, mask, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }
      send(data, options, cb) {
        if (this.readyState === WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        const opts = __spreadValues({
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true
        }, options);
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }
      terminate() {
        if (this.readyState === WebSocket.CLOSED)
          return;
        if (this.readyState === WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          return abortHandshake(this, this._req, msg);
        }
        if (this._socket) {
          this._readyState = WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket.prototype, `on${method}`, {
        enumerable: true,
        get() {
          const listeners = this.listeners(method);
          for (let i2 = 0; i2 < listeners.length; i2++) {
            if (listeners[i2]._listener)
              return listeners[i2]._listener;
          }
          return void 0;
        },
        set(listener) {
          const listeners = this.listeners(method);
          for (let i2 = 0; i2 < listeners.length; i2++) {
            if (listeners[i2]._listener)
              this.removeListener(method, listeners[i2]);
          }
          this.addEventListener(method, listener);
        }
      });
    });
    WebSocket.prototype.addEventListener = addEventListener;
    WebSocket.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket;
    function initAsClient(websocket, address, protocols, options) {
      const opts = __spreadProps(__spreadValues({
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10
      }, options), {
        createConnection: void 0,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: void 0,
        host: void 0,
        path: void 0,
        port: void 0
      });
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`);
      }
      let parsedUrl;
      if (address instanceof URL) {
        parsedUrl = address;
        websocket._url = address.href;
      } else {
        parsedUrl = new URL(address);
        websocket._url = address;
      }
      const isUnixSocket = parsedUrl.protocol === "ws+unix:";
      if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
        throw new Error(`Invalid URL: ${websocket.url}`);
      }
      const isSecure = parsedUrl.protocol === "wss:" || parsedUrl.protocol === "https:";
      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes(16).toString("base64");
      const get = isSecure ? https.get : http.get;
      let perMessageDeflate;
      opts.createConnection = isSecure ? tlsConnect : netConnect;
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = __spreadValues({
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key,
        Connection: "Upgrade",
        Upgrade: "websocket"
      }, opts.headers);
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols) {
        opts.headers["Sec-WebSocket-Protocol"] = protocols;
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isUnixSocket) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req = websocket._req = get(opts);
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err) => {
        if (req === null || req.aborted)
          return;
        req = websocket._req = null;
        websocket._readyState = WebSocket.CLOSING;
        websocket.emit("error", err);
        websocket.emitClose();
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          const addr = new URL(location, address);
          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket.CONNECTING)
          return;
        req = websocket._req = null;
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        const protList = (protocols || "").split(/, */);
        let protError;
        if (!protocols && serverProt) {
          protError = "Server sent a subprotocol but none was requested";
        } else if (protocols && !serverProt) {
          protError = "Server sent no subprotocol";
        } else if (serverProt && !protList.includes(serverProt)) {
          protError = "Server sent an invalid subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt)
          websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length) {
            if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
              const message = "Server indicated an extension that was not requested";
              abortHandshake(websocket, socket, message);
              return;
            }
            try {
              perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
            } catch (err) {
              const message = "Invalid Sec-WebSocket-Extensions header";
              abortHandshake(websocket, socket, message);
              return;
            }
            websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        }
        websocket.setSocket(socket, head, opts.maxPayload);
      });
    }
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }
    function tlsConnect(options) {
      options.path = void 0;
      if (!options.servername && options.servername !== "") {
        options.servername = net.isIP(options.host) ? "" : options.host;
      }
      return tls.connect(options);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket.CLOSING;
      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);
      if (stream.setHeader) {
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        stream.once("abort", websocket.emitClose.bind(websocket));
        websocket.emit("error", err);
      } else {
        stream.destroy(err);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = toBuffer(data).length;
        if (websocket._socket)
          websocket._sender._bufferedBytes += length;
        else
          websocket._bufferedAmount += length;
      }
      if (cb) {
        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`);
        cb(err);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (code === 1005)
        websocket.close();
      else
        websocket.close(code, reason);
    }
    function receiverOnDrain() {
      this[kWebSocket]._socket.resume();
    }
    function receiverOnError(err) {
      const websocket = this[kWebSocket];
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      websocket.close(err[kStatusCode]);
      websocket.emit("error", err);
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data) {
      this[kWebSocket].emit("message", data);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      websocket.pong(data, !websocket._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket.CLOSING;
        this.destroy();
      }
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Duplex } = require("stream");
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err);
      }
    }
    function createWebSocketStream(ws, options) {
      let resumeOnReceiverDrain = true;
      let terminateOnDestroy = true;
      function receiverOnDrain() {
        if (resumeOnReceiverDrain)
          ws._socket.resume();
      }
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open() {
          ws._receiver.removeAllListeners("drain");
          ws._receiver.on("drain", receiverOnDrain);
        });
      } else {
        ws._receiver.removeAllListeners("drain");
        ws._receiver.on("drain", receiverOnDrain);
      }
      const duplex = new Duplex(__spreadProps(__spreadValues({}, options), {
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      }));
      ws.on("message", function message(msg) {
        if (!duplex.push(msg)) {
          resumeOnReceiverDrain = false;
          ws._socket.pause();
        }
      });
      ws.once("error", function error(err) {
        if (duplex.destroyed)
          return;
        terminateOnDestroy = false;
        duplex.destroy(err);
      });
      ws.once("close", function close() {
        if (duplex.destroyed)
          return;
        duplex.push(null);
      });
      duplex._destroy = function(err, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err2) {
          called = true;
          callback(err2);
        });
        ws.once("close", function close() {
          if (!called)
            callback(err);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy)
          ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null)
          return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted)
            duplex.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
          resumeOnReceiverDrain = true;
          if (!ws._receiver._writableState.needDrain)
            ws._socket.resume();
        }
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    module2.exports = createWebSocketStream;
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/lib/websocket-server.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var http = require("http");
    var https = require("https");
    var net = require("net");
    var tls = require("tls");
    var { createHash } = require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var WebSocket = require_websocket();
    var { format, parse } = require_extension();
    var { GUID, kWebSocket } = require_constants();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer = class extends EventEmitter {
      constructor(options, callback) {
        super();
        options = __spreadValues({
          maxPayload: 100 * 1024 * 1024,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          server: null,
          host: null,
          path: null,
          port: null
        }, options);
        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
          throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        }
        if (options.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(options.port, options.host, options.backlog, callback);
        } else if (options.server) {
          this._server = options.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options.perMessageDeflate === true)
          options.perMessageDeflate = {};
        if (options.clientTracking)
          this.clients = new Set();
        this.options = options;
        this._state = RUNNING;
      }
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server)
          return null;
        return this._server.address();
      }
      close(cb) {
        if (cb)
          this.once("close", cb);
        if (this._state === CLOSED) {
          process.nextTick(emitClose, this);
          return;
        }
        if (this._state === CLOSING)
          return;
        this._state = CLOSING;
        if (this.clients) {
          for (const client of this.clients)
            client.terminate();
        }
        const server = this._server;
        if (server) {
          this._removeListeners();
          this._removeListeners = this._server = null;
          if (this.options.port != null) {
            server.close(emitClose.bind(void 0, this));
            return;
          }
        }
        process.nextTick(emitClose, this);
      }
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(req, socket, head, cb) {
        socket.on("error", socketOnError);
        const key = req.headers["sec-websocket-key"] !== void 0 ? req.headers["sec-websocket-key"].trim() : false;
        const version = +req.headers["sec-websocket-version"];
        const extensions = {};
        if (req.method !== "GET" || req.headers.upgrade.toLowerCase() !== "websocket" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
          return abortHandshake(socket, 400);
        }
        if (this.options.perMessageDeflate) {
          const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            const offers = parse(req.headers["sec-websocket-extensions"]);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err) {
            return abortHandshake(socket, 400);
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(key, extensions, req, socket, head, cb);
            });
            return;
          }
          if (!this.options.verifyClient(info))
            return abortHandshake(socket, 401);
        }
        this.completeUpgrade(key, extensions, req, socket, head, cb);
      }
      completeUpgrade(key, extensions, req, socket, head, cb) {
        if (!socket.readable || !socket.writable)
          return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        }
        if (this._state > RUNNING)
          return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new WebSocket(null);
        let protocol = req.headers["sec-websocket-protocol"];
        if (protocol) {
          protocol = protocol.split(",").map(trim);
          if (this.options.handleProtocols) {
            protocol = this.options.handleProtocols(protocol, req);
          } else {
            protocol = protocol[0];
          }
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, this.options.maxPayload);
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => this.clients.delete(ws));
        }
        cb(ws, req);
      }
    };
    module2.exports = WebSocketServer;
    function addListeners(server, map) {
      for (const event of Object.keys(map))
        server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      if (socket.writable) {
        message = message || http.STATUS_CODES[code];
        headers = __spreadValues({
          Connection: "close",
          "Content-Type": "text/html",
          "Content-Length": Buffer.byteLength(message)
        }, headers);
        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message);
      }
      socket.removeListener("error", socketOnError);
      socket.destroy();
    }
    function trim(str) {
      return str.trim();
    }
  }
});

// node_modules/.pnpm/ws@7.5.4/node_modules/ws/index.js
var require_ws = __commonJS({
  "node_modules/.pnpm/ws@7.5.4/node_modules/ws/index.js"(exports2, module2) {
    "use strict";
    var WebSocket = require_websocket();
    WebSocket.createWebSocketStream = require_stream();
    WebSocket.Server = require_websocket_server();
    WebSocket.Receiver = require_receiver();
    WebSocket.Sender = require_sender();
    module2.exports = WebSocket;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/devtools-window-polyfill.js
var require_devtools_window_polyfill = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/devtools-window-polyfill.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ws_1 = __importDefault(require_ws());
    var customGlobal = global;
    if (!customGlobal.WebSocket) {
      customGlobal.WebSocket = ws_1.default;
    }
    if (!customGlobal.window) {
      customGlobal.window = global;
    }
    customGlobal.window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ = [
      {
        type: 1,
        value: 7,
        isEnabled: true
      },
      {
        type: 2,
        value: "InternalApp",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalAppContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdoutContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStderrContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdinContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalFocusContext",
        isEnabled: true,
        isValid: true
      }
    ];
  }
});

// node_modules/.pnpm/react-devtools-core@4.17.0/node_modules/react-devtools-core/dist/backend.js
var require_backend = __commonJS({
  "node_modules/.pnpm/react-devtools-core@4.17.0/node_modules/react-devtools-core/dist/backend.js"(exports2, module2) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports2 === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports2 === "object")
        exports2["ReactDevToolsBackend"] = factory();
      else
        root["ReactDevToolsBackend"] = factory();
    })(window, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module3 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
          module3.l = true;
          return module3.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports3, name, getter) {
          if (!__webpack_require__.o(exports3, name)) {
            Object.defineProperty(exports3, name, { enumerable: true, get: getter });
          }
        };
        __webpack_require__.r = function(exports3) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports3, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports3, "__esModule", { value: true });
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", { enumerable: true, value });
          if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(ns, key, function(key2) {
                return value[key2];
              }.bind(null, key));
          return ns;
        };
        __webpack_require__.n = function(module3) {
          var getter = module3 && module3.__esModule ? function getDefault() {
            return module3["default"];
          } : function getModuleExports() {
            return module3;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 19);
      }([
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(11);
          } else {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var propIsEnumerable = Object.prototype.propertyIsEnumerable;
          function toObject(val) {
            if (val === null || val === void 0) {
              throw new TypeError("Object.assign cannot be called with null or undefined");
            }
            return Object(val);
          }
          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false;
              }
              var test1 = new String("abc");
              test1[5] = "de";
              if (Object.getOwnPropertyNames(test1)[0] === "5") {
                return false;
              }
              var test2 = {};
              for (var i2 = 0; i2 < 10; i2++) {
                test2["_" + String.fromCharCode(i2)] = i2;
              }
              var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
                return test2[n2];
              });
              if (order2.join("") !== "0123456789") {
                return false;
              }
              var test3 = {};
              "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                test3[letter] = letter;
              });
              if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
                return false;
              }
              return true;
            } catch (err) {
              return false;
            }
          }
          module3.exports = shouldUseNative() ? Object.assign : function(target, source) {
            var from;
            var to = toObject(target);
            var symbols;
            for (var s2 = 1; s2 < arguments.length; s2++) {
              from = Object(arguments[s2]);
              for (var key in from) {
                if (hasOwnProperty2.call(from, key)) {
                  to[key] = from[key];
                }
              }
              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i2 = 0; i2 < symbols.length; i2++) {
                  if (propIsEnumerable.call(from, symbols[i2])) {
                    to[symbols[i2]] = from[symbols[i2]];
                  }
                }
              }
            }
            return to;
          };
        },
        function(module3, exports3, __webpack_require__) {
          (function(process2) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            exports3 = module3.exports = SemVer;
            var debug;
            if ((typeof process2 === "undefined" ? "undefined" : _typeof(process2)) === "object" && process2.env && process2.env.NODE_DEBUG && /\bsemver\b/i.test(process2.env.NODE_DEBUG)) {
              debug = function debug2() {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift("SEMVER");
                console.log.apply(console, args);
              };
            } else {
              debug = function debug2() {
              };
            }
            exports3.SEMVER_SPEC_VERSION = "2.0.0";
            var MAX_LENGTH = 256;
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
            var MAX_SAFE_COMPONENT_LENGTH = 16;
            var re = exports3.re = [];
            var src = exports3.src = [];
            var t2 = exports3.tokens = {};
            var R = 0;
            function tok(n2) {
              t2[n2] = R++;
            }
            tok("NUMERICIDENTIFIER");
            src[t2.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
            tok("NUMERICIDENTIFIERLOOSE");
            src[t2.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
            tok("NONNUMERICIDENTIFIER");
            src[t2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
            tok("MAINVERSION");
            src[t2.MAINVERSION] = "(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")";
            tok("MAINVERSIONLOOSE");
            src[t2.MAINVERSIONLOOSE] = "(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")";
            tok("PRERELEASEIDENTIFIER");
            src[t2.PRERELEASEIDENTIFIER] = "(?:" + src[t2.NUMERICIDENTIFIER] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
            tok("PRERELEASEIDENTIFIERLOOSE");
            src[t2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t2.NUMERICIDENTIFIERLOOSE] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
            tok("PRERELEASE");
            src[t2.PRERELEASE] = "(?:-(" + src[t2.PRERELEASEIDENTIFIER] + "(?:\\." + src[t2.PRERELEASEIDENTIFIER] + ")*))";
            tok("PRERELEASELOOSE");
            src[t2.PRERELEASELOOSE] = "(?:-?(" + src[t2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t2.PRERELEASEIDENTIFIERLOOSE] + ")*))";
            tok("BUILDIDENTIFIER");
            src[t2.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
            tok("BUILD");
            src[t2.BUILD] = "(?:\\+(" + src[t2.BUILDIDENTIFIER] + "(?:\\." + src[t2.BUILDIDENTIFIER] + ")*))";
            tok("FULL");
            tok("FULLPLAIN");
            src[t2.FULLPLAIN] = "v?" + src[t2.MAINVERSION] + src[t2.PRERELEASE] + "?" + src[t2.BUILD] + "?";
            src[t2.FULL] = "^" + src[t2.FULLPLAIN] + "$";
            tok("LOOSEPLAIN");
            src[t2.LOOSEPLAIN] = "[v=\\s]*" + src[t2.MAINVERSIONLOOSE] + src[t2.PRERELEASELOOSE] + "?" + src[t2.BUILD] + "?";
            tok("LOOSE");
            src[t2.LOOSE] = "^" + src[t2.LOOSEPLAIN] + "$";
            tok("GTLT");
            src[t2.GTLT] = "((?:<|>)?=?)";
            tok("XRANGEIDENTIFIERLOOSE");
            src[t2.XRANGEIDENTIFIERLOOSE] = src[t2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
            tok("XRANGEIDENTIFIER");
            src[t2.XRANGEIDENTIFIER] = src[t2.NUMERICIDENTIFIER] + "|x|X|\\*";
            tok("XRANGEPLAIN");
            src[t2.XRANGEPLAIN] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:" + src[t2.PRERELEASE] + ")?" + src[t2.BUILD] + "?)?)?";
            tok("XRANGEPLAINLOOSE");
            src[t2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t2.PRERELEASELOOSE] + ")?" + src[t2.BUILD] + "?)?)?";
            tok("XRANGE");
            src[t2.XRANGE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAIN] + "$";
            tok("XRANGELOOSE");
            src[t2.XRANGELOOSE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("COERCE");
            src[t2.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
            tok("COERCERTL");
            re[t2.COERCERTL] = new RegExp(src[t2.COERCE], "g");
            tok("LONETILDE");
            src[t2.LONETILDE] = "(?:~>?)";
            tok("TILDETRIM");
            src[t2.TILDETRIM] = "(\\s*)" + src[t2.LONETILDE] + "\\s+";
            re[t2.TILDETRIM] = new RegExp(src[t2.TILDETRIM], "g");
            var tildeTrimReplace = "$1~";
            tok("TILDE");
            src[t2.TILDE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAIN] + "$";
            tok("TILDELOOSE");
            src[t2.TILDELOOSE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("LONECARET");
            src[t2.LONECARET] = "(?:\\^)";
            tok("CARETTRIM");
            src[t2.CARETTRIM] = "(\\s*)" + src[t2.LONECARET] + "\\s+";
            re[t2.CARETTRIM] = new RegExp(src[t2.CARETTRIM], "g");
            var caretTrimReplace = "$1^";
            tok("CARET");
            src[t2.CARET] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAIN] + "$";
            tok("CARETLOOSE");
            src[t2.CARETLOOSE] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAINLOOSE] + "$";
            tok("COMPARATORLOOSE");
            src[t2.COMPARATORLOOSE] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + ")$|^$";
            tok("COMPARATOR");
            src[t2.COMPARATOR] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.FULLPLAIN] + ")$|^$";
            tok("COMPARATORTRIM");
            src[t2.COMPARATORTRIM] = "(\\s*)" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + "|" + src[t2.XRANGEPLAIN] + ")";
            re[t2.COMPARATORTRIM] = new RegExp(src[t2.COMPARATORTRIM], "g");
            var comparatorTrimReplace = "$1$2$3";
            tok("HYPHENRANGE");
            src[t2.HYPHENRANGE] = "^\\s*(" + src[t2.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t2.XRANGEPLAIN] + ")\\s*$";
            tok("HYPHENRANGELOOSE");
            src[t2.HYPHENRANGELOOSE] = "^\\s*(" + src[t2.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t2.XRANGEPLAINLOOSE] + ")\\s*$";
            tok("STAR");
            src[t2.STAR] = "(<|>)?=?\\s*\\*";
            for (var i2 = 0; i2 < R; i2++) {
              debug(i2, src[i2]);
              if (!re[i2]) {
                re[i2] = new RegExp(src[i2]);
              }
            }
            exports3.parse = parse;
            function parse(version, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (version instanceof SemVer) {
                return version;
              }
              if (typeof version !== "string") {
                return null;
              }
              if (version.length > MAX_LENGTH) {
                return null;
              }
              var r2 = options.loose ? re[t2.LOOSE] : re[t2.FULL];
              if (!r2.test(version)) {
                return null;
              }
              try {
                return new SemVer(version, options);
              } catch (er) {
                return null;
              }
            }
            exports3.valid = valid;
            function valid(version, options) {
              var v = parse(version, options);
              return v ? v.version : null;
            }
            exports3.clean = clean;
            function clean(version, options) {
              var s2 = parse(version.trim().replace(/^[=v]+/, ""), options);
              return s2 ? s2.version : null;
            }
            exports3.SemVer = SemVer;
            function SemVer(version, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (version instanceof SemVer) {
                if (version.loose === options.loose) {
                  return version;
                } else {
                  version = version.version;
                }
              } else if (typeof version !== "string") {
                throw new TypeError("Invalid Version: " + version);
              }
              if (version.length > MAX_LENGTH) {
                throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
              }
              if (!(this instanceof SemVer)) {
                return new SemVer(version, options);
              }
              debug("SemVer", version, options);
              this.options = options;
              this.loose = !!options.loose;
              var m = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
              if (!m) {
                throw new TypeError("Invalid Version: " + version);
              }
              this.raw = version;
              this.major = +m[1];
              this.minor = +m[2];
              this.patch = +m[3];
              if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
                throw new TypeError("Invalid major version");
              }
              if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
                throw new TypeError("Invalid minor version");
              }
              if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
                throw new TypeError("Invalid patch version");
              }
              if (!m[4]) {
                this.prerelease = [];
              } else {
                this.prerelease = m[4].split(".").map(function(id) {
                  if (/^[0-9]+$/.test(id)) {
                    var num = +id;
                    if (num >= 0 && num < MAX_SAFE_INTEGER) {
                      return num;
                    }
                  }
                  return id;
                });
              }
              this.build = m[5] ? m[5].split(".") : [];
              this.format();
            }
            SemVer.prototype.format = function() {
              this.version = this.major + "." + this.minor + "." + this.patch;
              if (this.prerelease.length) {
                this.version += "-" + this.prerelease.join(".");
              }
              return this.version;
            };
            SemVer.prototype.toString = function() {
              return this.version;
            };
            SemVer.prototype.compare = function(other) {
              debug("SemVer.compare", this.version, this.options, other);
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              return this.compareMain(other) || this.comparePre(other);
            };
            SemVer.prototype.compareMain = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
            };
            SemVer.prototype.comparePre = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              if (this.prerelease.length && !other.prerelease.length) {
                return -1;
              } else if (!this.prerelease.length && other.prerelease.length) {
                return 1;
              } else if (!this.prerelease.length && !other.prerelease.length) {
                return 0;
              }
              var i3 = 0;
              do {
                var a2 = this.prerelease[i3];
                var b2 = other.prerelease[i3];
                debug("prerelease compare", i3, a2, b2);
                if (a2 === void 0 && b2 === void 0) {
                  return 0;
                } else if (b2 === void 0) {
                  return 1;
                } else if (a2 === void 0) {
                  return -1;
                } else if (a2 === b2) {
                  continue;
                } else {
                  return compareIdentifiers(a2, b2);
                }
              } while (++i3);
            };
            SemVer.prototype.compareBuild = function(other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }
              var i3 = 0;
              do {
                var a2 = this.build[i3];
                var b2 = other.build[i3];
                debug("prerelease compare", i3, a2, b2);
                if (a2 === void 0 && b2 === void 0) {
                  return 0;
                } else if (b2 === void 0) {
                  return 1;
                } else if (a2 === void 0) {
                  return -1;
                } else if (a2 === b2) {
                  continue;
                } else {
                  return compareIdentifiers(a2, b2);
                }
              } while (++i3);
            };
            SemVer.prototype.inc = function(release, identifier) {
              switch (release) {
                case "premajor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor = 0;
                  this.major++;
                  this.inc("pre", identifier);
                  break;
                case "preminor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor++;
                  this.inc("pre", identifier);
                  break;
                case "prepatch":
                  this.prerelease.length = 0;
                  this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;
                case "prerelease":
                  if (this.prerelease.length === 0) {
                    this.inc("patch", identifier);
                  }
                  this.inc("pre", identifier);
                  break;
                case "major":
                  if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                    this.major++;
                  }
                  this.minor = 0;
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "minor":
                  if (this.patch !== 0 || this.prerelease.length === 0) {
                    this.minor++;
                  }
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "patch":
                  if (this.prerelease.length === 0) {
                    this.patch++;
                  }
                  this.prerelease = [];
                  break;
                case "pre":
                  if (this.prerelease.length === 0) {
                    this.prerelease = [0];
                  } else {
                    var i3 = this.prerelease.length;
                    while (--i3 >= 0) {
                      if (typeof this.prerelease[i3] === "number") {
                        this.prerelease[i3]++;
                        i3 = -2;
                      }
                    }
                    if (i3 === -1) {
                      this.prerelease.push(0);
                    }
                  }
                  if (identifier) {
                    if (this.prerelease[0] === identifier) {
                      if (isNaN(this.prerelease[1])) {
                        this.prerelease = [identifier, 0];
                      }
                    } else {
                      this.prerelease = [identifier, 0];
                    }
                  }
                  break;
                default:
                  throw new Error("invalid increment argument: " + release);
              }
              this.format();
              this.raw = this.version;
              return this;
            };
            exports3.inc = inc;
            function inc(version, release, loose, identifier) {
              if (typeof loose === "string") {
                identifier = loose;
                loose = void 0;
              }
              try {
                return new SemVer(version, loose).inc(release, identifier).version;
              } catch (er) {
                return null;
              }
            }
            exports3.diff = diff;
            function diff(version1, version2) {
              if (eq(version1, version2)) {
                return null;
              } else {
                var v1 = parse(version1);
                var v2 = parse(version2);
                var prefix = "";
                if (v1.prerelease.length || v2.prerelease.length) {
                  prefix = "pre";
                  var defaultResult = "prerelease";
                }
                for (var key in v1) {
                  if (key === "major" || key === "minor" || key === "patch") {
                    if (v1[key] !== v2[key]) {
                      return prefix + key;
                    }
                  }
                }
                return defaultResult;
              }
            }
            exports3.compareIdentifiers = compareIdentifiers;
            var numeric = /^[0-9]+$/;
            function compareIdentifiers(a2, b2) {
              var anum = numeric.test(a2);
              var bnum = numeric.test(b2);
              if (anum && bnum) {
                a2 = +a2;
                b2 = +b2;
              }
              return a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
            }
            exports3.rcompareIdentifiers = rcompareIdentifiers;
            function rcompareIdentifiers(a2, b2) {
              return compareIdentifiers(b2, a2);
            }
            exports3.major = major;
            function major(a2, loose) {
              return new SemVer(a2, loose).major;
            }
            exports3.minor = minor;
            function minor(a2, loose) {
              return new SemVer(a2, loose).minor;
            }
            exports3.patch = patch;
            function patch(a2, loose) {
              return new SemVer(a2, loose).patch;
            }
            exports3.compare = compare;
            function compare(a2, b2, loose) {
              return new SemVer(a2, loose).compare(new SemVer(b2, loose));
            }
            exports3.compareLoose = compareLoose;
            function compareLoose(a2, b2) {
              return compare(a2, b2, true);
            }
            exports3.compareBuild = compareBuild;
            function compareBuild(a2, b2, loose) {
              var versionA = new SemVer(a2, loose);
              var versionB = new SemVer(b2, loose);
              return versionA.compare(versionB) || versionA.compareBuild(versionB);
            }
            exports3.rcompare = rcompare;
            function rcompare(a2, b2, loose) {
              return compare(b2, a2, loose);
            }
            exports3.sort = sort;
            function sort(list, loose) {
              return list.sort(function(a2, b2) {
                return exports3.compareBuild(a2, b2, loose);
              });
            }
            exports3.rsort = rsort;
            function rsort(list, loose) {
              return list.sort(function(a2, b2) {
                return exports3.compareBuild(b2, a2, loose);
              });
            }
            exports3.gt = gt;
            function gt(a2, b2, loose) {
              return compare(a2, b2, loose) > 0;
            }
            exports3.lt = lt;
            function lt(a2, b2, loose) {
              return compare(a2, b2, loose) < 0;
            }
            exports3.eq = eq;
            function eq(a2, b2, loose) {
              return compare(a2, b2, loose) === 0;
            }
            exports3.neq = neq;
            function neq(a2, b2, loose) {
              return compare(a2, b2, loose) !== 0;
            }
            exports3.gte = gte;
            function gte(a2, b2, loose) {
              return compare(a2, b2, loose) >= 0;
            }
            exports3.lte = lte;
            function lte(a2, b2, loose) {
              return compare(a2, b2, loose) <= 0;
            }
            exports3.cmp = cmp;
            function cmp(a2, op, b2, loose) {
              switch (op) {
                case "===":
                  if (_typeof(a2) === "object")
                    a2 = a2.version;
                  if (_typeof(b2) === "object")
                    b2 = b2.version;
                  return a2 === b2;
                case "!==":
                  if (_typeof(a2) === "object")
                    a2 = a2.version;
                  if (_typeof(b2) === "object")
                    b2 = b2.version;
                  return a2 !== b2;
                case "":
                case "=":
                case "==":
                  return eq(a2, b2, loose);
                case "!=":
                  return neq(a2, b2, loose);
                case ">":
                  return gt(a2, b2, loose);
                case ">=":
                  return gte(a2, b2, loose);
                case "<":
                  return lt(a2, b2, loose);
                case "<=":
                  return lte(a2, b2, loose);
                default:
                  throw new TypeError("Invalid operator: " + op);
              }
            }
            exports3.Comparator = Comparator;
            function Comparator(comp, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (comp instanceof Comparator) {
                if (comp.loose === !!options.loose) {
                  return comp;
                } else {
                  comp = comp.value;
                }
              }
              if (!(this instanceof Comparator)) {
                return new Comparator(comp, options);
              }
              debug("comparator", comp, options);
              this.options = options;
              this.loose = !!options.loose;
              this.parse(comp);
              if (this.semver === ANY) {
                this.value = "";
              } else {
                this.value = this.operator + this.semver.version;
              }
              debug("comp", this);
            }
            var ANY = {};
            Comparator.prototype.parse = function(comp) {
              var r2 = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
              var m = comp.match(r2);
              if (!m) {
                throw new TypeError("Invalid comparator: " + comp);
              }
              this.operator = m[1] !== void 0 ? m[1] : "";
              if (this.operator === "=") {
                this.operator = "";
              }
              if (!m[2]) {
                this.semver = ANY;
              } else {
                this.semver = new SemVer(m[2], this.options.loose);
              }
            };
            Comparator.prototype.toString = function() {
              return this.value;
            };
            Comparator.prototype.test = function(version) {
              debug("Comparator.test", version, this.options.loose);
              if (this.semver === ANY || version === ANY) {
                return true;
              }
              if (typeof version === "string") {
                try {
                  version = new SemVer(version, this.options);
                } catch (er) {
                  return false;
                }
              }
              return cmp(version, this.operator, this.semver, this.options);
            };
            Comparator.prototype.intersects = function(comp, options) {
              if (!(comp instanceof Comparator)) {
                throw new TypeError("a Comparator is required");
              }
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              var rangeTmp;
              if (this.operator === "") {
                if (this.value === "") {
                  return true;
                }
                rangeTmp = new Range(comp.value, options);
                return satisfies(this.value, rangeTmp, options);
              } else if (comp.operator === "") {
                if (comp.value === "") {
                  return true;
                }
                rangeTmp = new Range(this.value, options);
                return satisfies(comp.semver, rangeTmp, options);
              }
              var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
              var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
              var sameSemVer = this.semver.version === comp.semver.version;
              var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
              var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
              var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
              return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
            };
            exports3.Range = Range;
            function Range(range, options) {
              if (!options || _typeof(options) !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false
                };
              }
              if (range instanceof Range) {
                if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
                  return range;
                } else {
                  return new Range(range.raw, options);
                }
              }
              if (range instanceof Comparator) {
                return new Range(range.value, options);
              }
              if (!(this instanceof Range)) {
                return new Range(range, options);
              }
              this.options = options;
              this.loose = !!options.loose;
              this.includePrerelease = !!options.includePrerelease;
              this.raw = range;
              this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
                return this.parseRange(range2.trim());
              }, this).filter(function(c2) {
                return c2.length;
              });
              if (!this.set.length) {
                throw new TypeError("Invalid SemVer Range: " + range);
              }
              this.format();
            }
            Range.prototype.format = function() {
              this.range = this.set.map(function(comps) {
                return comps.join(" ").trim();
              }).join("||").trim();
              return this.range;
            };
            Range.prototype.toString = function() {
              return this.range;
            };
            Range.prototype.parseRange = function(range) {
              var loose = this.options.loose;
              range = range.trim();
              var hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
              range = range.replace(hr, hyphenReplace);
              debug("hyphen replace", range);
              range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace);
              debug("comparator trim", range, re[t2.COMPARATORTRIM]);
              range = range.replace(re[t2.TILDETRIM], tildeTrimReplace);
              range = range.replace(re[t2.CARETTRIM], caretTrimReplace);
              range = range.split(/\s+/).join(" ");
              var compRe = loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
              var set = range.split(" ").map(function(comp) {
                return parseComparator(comp, this.options);
              }, this).join(" ").split(/\s+/);
              if (this.options.loose) {
                set = set.filter(function(comp) {
                  return !!comp.match(compRe);
                });
              }
              set = set.map(function(comp) {
                return new Comparator(comp, this.options);
              }, this);
              return set;
            };
            Range.prototype.intersects = function(range, options) {
              if (!(range instanceof Range)) {
                throw new TypeError("a Range is required");
              }
              return this.set.some(function(thisComparators) {
                return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
                  return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                    return rangeComparators.every(function(rangeComparator) {
                      return thisComparator.intersects(rangeComparator, options);
                    });
                  });
                });
              });
            };
            function isSatisfiable(comparators, options) {
              var result = true;
              var remainingComparators = comparators.slice();
              var testComparator = remainingComparators.pop();
              while (result && remainingComparators.length) {
                result = remainingComparators.every(function(otherComparator) {
                  return testComparator.intersects(otherComparator, options);
                });
                testComparator = remainingComparators.pop();
              }
              return result;
            }
            exports3.toComparators = toComparators;
            function toComparators(range, options) {
              return new Range(range, options).set.map(function(comp) {
                return comp.map(function(c2) {
                  return c2.value;
                }).join(" ").trim().split(" ");
              });
            }
            function parseComparator(comp, options) {
              debug("comp", comp, options);
              comp = replaceCarets(comp, options);
              debug("caret", comp);
              comp = replaceTildes(comp, options);
              debug("tildes", comp);
              comp = replaceXRanges(comp, options);
              debug("xrange", comp);
              comp = replaceStars(comp, options);
              debug("stars", comp);
              return comp;
            }
            function isX(id) {
              return !id || id.toLowerCase() === "x" || id === "*";
            }
            function replaceTildes(comp, options) {
              return comp.trim().split(/\s+/).map(function(comp2) {
                return replaceTilde(comp2, options);
              }).join(" ");
            }
            function replaceTilde(comp, options) {
              var r2 = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
              return comp.replace(r2, function(_, M, m, p, pr) {
                debug("tilde", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) {
                  ret = "";
                } else if (isX(m)) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (isX(p)) {
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                } else if (pr) {
                  debug("replaceTilde pr", pr);
                  ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
                } else {
                  ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
                }
                debug("tilde return", ret);
                return ret;
              });
            }
            function replaceCarets(comp, options) {
              return comp.trim().split(/\s+/).map(function(comp2) {
                return replaceCaret(comp2, options);
              }).join(" ");
            }
            function replaceCaret(comp, options) {
              debug("caret", comp, options);
              var r2 = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET];
              return comp.replace(r2, function(_, M, m, p, pr) {
                debug("caret", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) {
                  ret = "";
                } else if (isX(m)) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (isX(p)) {
                  if (M === "0") {
                    ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                  } else {
                    ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
                  }
                } else if (pr) {
                  debug("replaceCaret pr", pr);
                  if (M === "0") {
                    if (m === "0") {
                      ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
                    } else {
                      ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
                    }
                  } else {
                    ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
                  }
                } else {
                  debug("no pr");
                  if (M === "0") {
                    if (m === "0") {
                      ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
                    } else {
                      ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
                    }
                  } else {
                    ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
                  }
                }
                debug("caret return", ret);
                return ret;
              });
            }
            function replaceXRanges(comp, options) {
              debug("replaceXRanges", comp, options);
              return comp.split(/\s+/).map(function(comp2) {
                return replaceXRange(comp2, options);
              }).join(" ");
            }
            function replaceXRange(comp, options) {
              comp = comp.trim();
              var r2 = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
              return comp.replace(r2, function(ret, gtlt, M, m, p, pr) {
                debug("xRange", comp, ret, gtlt, M, m, p, pr);
                var xM = isX(M);
                var xm = xM || isX(m);
                var xp = xm || isX(p);
                var anyX = xp;
                if (gtlt === "=" && anyX) {
                  gtlt = "";
                }
                pr = options.includePrerelease ? "-0" : "";
                if (xM) {
                  if (gtlt === ">" || gtlt === "<") {
                    ret = "<0.0.0-0";
                  } else {
                    ret = "*";
                  }
                } else if (gtlt && anyX) {
                  if (xm) {
                    m = 0;
                  }
                  p = 0;
                  if (gtlt === ">") {
                    gtlt = ">=";
                    if (xm) {
                      M = +M + 1;
                      m = 0;
                      p = 0;
                    } else {
                      m = +m + 1;
                      p = 0;
                    }
                  } else if (gtlt === "<=") {
                    gtlt = "<";
                    if (xm) {
                      M = +M + 1;
                    } else {
                      m = +m + 1;
                    }
                  }
                  ret = gtlt + M + "." + m + "." + p + pr;
                } else if (xm) {
                  ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
                } else if (xp) {
                  ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
                }
                debug("xRange return", ret);
                return ret;
              });
            }
            function replaceStars(comp, options) {
              debug("replaceStars", comp, options);
              return comp.trim().replace(re[t2.STAR], "");
            }
            function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
              if (isX(fM)) {
                from = "";
              } else if (isX(fm)) {
                from = ">=" + fM + ".0.0";
              } else if (isX(fp)) {
                from = ">=" + fM + "." + fm + ".0";
              } else {
                from = ">=" + from;
              }
              if (isX(tM)) {
                to = "";
              } else if (isX(tm)) {
                to = "<" + (+tM + 1) + ".0.0";
              } else if (isX(tp)) {
                to = "<" + tM + "." + (+tm + 1) + ".0";
              } else if (tpr) {
                to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
              } else {
                to = "<=" + to;
              }
              return (from + " " + to).trim();
            }
            Range.prototype.test = function(version) {
              if (!version) {
                return false;
              }
              if (typeof version === "string") {
                try {
                  version = new SemVer(version, this.options);
                } catch (er) {
                  return false;
                }
              }
              for (var i3 = 0; i3 < this.set.length; i3++) {
                if (testSet(this.set[i3], version, this.options)) {
                  return true;
                }
              }
              return false;
            };
            function testSet(set, version, options) {
              for (var i3 = 0; i3 < set.length; i3++) {
                if (!set[i3].test(version)) {
                  return false;
                }
              }
              if (version.prerelease.length && !options.includePrerelease) {
                for (i3 = 0; i3 < set.length; i3++) {
                  debug(set[i3].semver);
                  if (set[i3].semver === ANY) {
                    continue;
                  }
                  if (set[i3].semver.prerelease.length > 0) {
                    var allowed = set[i3].semver;
                    if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                      return true;
                    }
                  }
                }
                return false;
              }
              return true;
            }
            exports3.satisfies = satisfies;
            function satisfies(version, range, options) {
              try {
                range = new Range(range, options);
              } catch (er) {
                return false;
              }
              return range.test(version);
            }
            exports3.maxSatisfying = maxSatisfying;
            function maxSatisfying(versions, range, options) {
              var max = null;
              var maxSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function(v) {
                if (rangeObj.test(v)) {
                  if (!max || maxSV.compare(v) === -1) {
                    max = v;
                    maxSV = new SemVer(max, options);
                  }
                }
              });
              return max;
            }
            exports3.minSatisfying = minSatisfying;
            function minSatisfying(versions, range, options) {
              var min = null;
              var minSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function(v) {
                if (rangeObj.test(v)) {
                  if (!min || minSV.compare(v) === 1) {
                    min = v;
                    minSV = new SemVer(min, options);
                  }
                }
              });
              return min;
            }
            exports3.minVersion = minVersion;
            function minVersion(range, loose) {
              range = new Range(range, loose);
              var minver = new SemVer("0.0.0");
              if (range.test(minver)) {
                return minver;
              }
              minver = new SemVer("0.0.0-0");
              if (range.test(minver)) {
                return minver;
              }
              minver = null;
              for (var i3 = 0; i3 < range.set.length; ++i3) {
                var comparators = range.set[i3];
                comparators.forEach(function(comparator) {
                  var compver = new SemVer(comparator.semver.version);
                  switch (comparator.operator) {
                    case ">":
                      if (compver.prerelease.length === 0) {
                        compver.patch++;
                      } else {
                        compver.prerelease.push(0);
                      }
                      compver.raw = compver.format();
                    case "":
                    case ">=":
                      if (!minver || gt(minver, compver)) {
                        minver = compver;
                      }
                      break;
                    case "<":
                    case "<=":
                      break;
                    default:
                      throw new Error("Unexpected operation: " + comparator.operator);
                  }
                });
              }
              if (minver && range.test(minver)) {
                return minver;
              }
              return null;
            }
            exports3.validRange = validRange;
            function validRange(range, options) {
              try {
                return new Range(range, options).range || "*";
              } catch (er) {
                return null;
              }
            }
            exports3.ltr = ltr;
            function ltr(version, range, options) {
              return outside(version, range, "<", options);
            }
            exports3.gtr = gtr;
            function gtr(version, range, options) {
              return outside(version, range, ">", options);
            }
            exports3.outside = outside;
            function outside(version, range, hilo, options) {
              version = new SemVer(version, options);
              range = new Range(range, options);
              var gtfn, ltefn, ltfn, comp, ecomp;
              switch (hilo) {
                case ">":
                  gtfn = gt;
                  ltefn = lte;
                  ltfn = lt;
                  comp = ">";
                  ecomp = ">=";
                  break;
                case "<":
                  gtfn = lt;
                  ltefn = gte;
                  ltfn = gt;
                  comp = "<";
                  ecomp = "<=";
                  break;
                default:
                  throw new TypeError('Must provide a hilo val of "<" or ">"');
              }
              if (satisfies(version, range, options)) {
                return false;
              }
              for (var i3 = 0; i3 < range.set.length; ++i3) {
                var comparators = range.set[i3];
                var high = null;
                var low = null;
                comparators.forEach(function(comparator) {
                  if (comparator.semver === ANY) {
                    comparator = new Comparator(">=0.0.0");
                  }
                  high = high || comparator;
                  low = low || comparator;
                  if (gtfn(comparator.semver, high.semver, options)) {
                    high = comparator;
                  } else if (ltfn(comparator.semver, low.semver, options)) {
                    low = comparator;
                  }
                });
                if (high.operator === comp || high.operator === ecomp) {
                  return false;
                }
                if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
                  return false;
                } else if (low.operator === ecomp && ltfn(version, low.semver)) {
                  return false;
                }
              }
              return true;
            }
            exports3.prerelease = prerelease;
            function prerelease(version, options) {
              var parsed = parse(version, options);
              return parsed && parsed.prerelease.length ? parsed.prerelease : null;
            }
            exports3.intersects = intersects;
            function intersects(r1, r2, options) {
              r1 = new Range(r1, options);
              r2 = new Range(r2, options);
              return r1.intersects(r2);
            }
            exports3.coerce = coerce;
            function coerce(version, options) {
              if (version instanceof SemVer) {
                return version;
              }
              if (typeof version === "number") {
                version = String(version);
              }
              if (typeof version !== "string") {
                return null;
              }
              options = options || {};
              var match = null;
              if (!options.rtl) {
                match = version.match(re[t2.COERCE]);
              } else {
                var next;
                while ((next = re[t2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
                  if (!match || next.index + next[0].length !== match.index + match[0].length) {
                    match = next;
                  }
                  re[t2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
                }
                re[t2.COERCERTL].lastIndex = -1;
              }
              if (match === null) {
                return null;
              }
              return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
            }
          }).call(this, __webpack_require__(5));
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            var FUNC_ERROR_TEXT = "Expected a function";
            var NAN = 0 / 0;
            var symbolTag = "[object Symbol]";
            var reTrim = /^\s+|\s+$/g;
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
            var reIsBinary = /^0b[01]+$/i;
            var reIsOctal = /^0o[0-7]+$/i;
            var freeParseInt = parseInt;
            var freeGlobal = (typeof global2 === "undefined" ? "undefined" : _typeof(global2)) == "object" && global2 && global2.Object === Object && global2;
            var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            var objectProto = Object.prototype;
            var objectToString = objectProto.toString;
            var nativeMax = Math.max, nativeMin = Math.min;
            var now = function now2() {
              return root.Date.now();
            };
            function debounce(func, wait, options) {
              var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = void 0;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }
              function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
              }
              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
                return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
              }
              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
              }
              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
              }
              function trailingEdge(time) {
                timerId = void 0;
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = void 0;
                return result;
              }
              function cancel() {
                if (timerId !== void 0) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = void 0;
              }
              function flush() {
                return timerId === void 0 ? result : trailingEdge(now());
              }
              function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                  if (timerId === void 0) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === void 0) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }
            function throttle(func, wait, options) {
              var leading = true, trailing = true;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
              });
            }
            function isObject(value) {
              var type = _typeof(value);
              return !!value && (type == "object" || type == "function");
            }
            function isObjectLike(value) {
              return !!value && _typeof(value) == "object";
            }
            function isSymbol(value) {
              return _typeof(value) == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
            }
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, "");
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
            }
            module3.exports = throttle;
          }).call(this, __webpack_require__(4));
        },
        function(module3, exports3) {
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var g2;
          g2 = function() {
            return this;
          }();
          try {
            g2 = g2 || new Function("return this")();
          } catch (e2) {
            if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object")
              g2 = window;
          }
          module3.exports = g2;
        },
        function(module3, exports3) {
          var process2 = module3.exports = {};
          var cachedSetTimeout;
          var cachedClearTimeout;
          function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
          }
          function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
          }
          (function() {
            try {
              if (typeof setTimeout === "function") {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e2) {
              cachedSetTimeout = defaultSetTimout;
            }
            try {
              if (typeof clearTimeout === "function") {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e2) {
              cachedClearTimeout = defaultClearTimeout;
            }
          })();
          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              return setTimeout(fun, 0);
            }
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }
            try {
              return cachedSetTimeout(fun, 0);
            } catch (e2) {
              try {
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e3) {
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }
          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }
            try {
              return cachedClearTimeout(marker);
            } catch (e2) {
              try {
                return cachedClearTimeout.call(null, marker);
              } catch (e3) {
                return cachedClearTimeout.call(this, marker);
              }
            }
          }
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;
          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }
          function drainQueue() {
            if (draining) {
              return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }
          process2.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i2 = 1; i2 < arguments.length; i2++) {
                args[i2 - 1] = arguments[i2];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function() {
            this.fun.apply(null, this.array);
          };
          process2.title = "browser";
          process2.browser = true;
          process2.env = {};
          process2.argv = [];
          process2.version = "";
          process2.versions = {};
          function noop() {
          }
          process2.on = noop;
          process2.addListener = noop;
          process2.once = noop;
          process2.off = noop;
          process2.removeListener = noop;
          process2.removeAllListeners = noop;
          process2.emit = noop;
          process2.prependListener = noop;
          process2.prependOnceListener = noop;
          process2.listeners = function(name) {
            return [];
          };
          process2.binding = function(name) {
            throw new Error("process.binding is not supported");
          };
          process2.cwd = function() {
            return "/";
          };
          process2.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
          };
          process2.umask = function() {
            return 0;
          };
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          var Yallist = __webpack_require__(9);
          var MAX = Symbol("max");
          var LENGTH = Symbol("length");
          var LENGTH_CALCULATOR = Symbol("lengthCalculator");
          var ALLOW_STALE = Symbol("allowStale");
          var MAX_AGE = Symbol("maxAge");
          var DISPOSE = Symbol("dispose");
          var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
          var LRU_LIST = Symbol("lruList");
          var CACHE = Symbol("cache");
          var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
          var naiveLength = function naiveLength2() {
            return 1;
          };
          var LRUCache = /* @__PURE__ */ function() {
            function LRUCache2(options) {
              _classCallCheck(this, LRUCache2);
              if (typeof options === "number")
                options = {
                  max: options
                };
              if (!options)
                options = {};
              if (options.max && (typeof options.max !== "number" || options.max < 0))
                throw new TypeError("max must be a non-negative number");
              var max = this[MAX] = options.max || Infinity;
              var lc = options.length || naiveLength;
              this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
              this[ALLOW_STALE] = options.stale || false;
              if (options.maxAge && typeof options.maxAge !== "number")
                throw new TypeError("maxAge must be a number");
              this[MAX_AGE] = options.maxAge || 0;
              this[DISPOSE] = options.dispose;
              this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
              this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
              this.reset();
            }
            _createClass(LRUCache2, [{
              key: "rforEach",
              value: function rforEach(fn, thisp) {
                thisp = thisp || this;
                for (var walker = this[LRU_LIST].tail; walker !== null; ) {
                  var prev = walker.prev;
                  forEachStep(this, fn, walker, thisp);
                  walker = prev;
                }
              }
            }, {
              key: "forEach",
              value: function forEach(fn, thisp) {
                thisp = thisp || this;
                for (var walker = this[LRU_LIST].head; walker !== null; ) {
                  var next = walker.next;
                  forEachStep(this, fn, walker, thisp);
                  walker = next;
                }
              }
            }, {
              key: "keys",
              value: function keys() {
                return this[LRU_LIST].toArray().map(function(k) {
                  return k.key;
                });
              }
            }, {
              key: "values",
              value: function values() {
                return this[LRU_LIST].toArray().map(function(k) {
                  return k.value;
                });
              }
            }, {
              key: "reset",
              value: function reset() {
                var _this = this;
                if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
                  this[LRU_LIST].forEach(function(hit) {
                    return _this[DISPOSE](hit.key, hit.value);
                  });
                }
                this[CACHE] = new Map();
                this[LRU_LIST] = new Yallist();
                this[LENGTH] = 0;
              }
            }, {
              key: "dump",
              value: function dump() {
                var _this2 = this;
                return this[LRU_LIST].map(function(hit) {
                  return isStale(_this2, hit) ? false : {
                    k: hit.key,
                    v: hit.value,
                    e: hit.now + (hit.maxAge || 0)
                  };
                }).toArray().filter(function(h) {
                  return h;
                });
              }
            }, {
              key: "dumpLru",
              value: function dumpLru() {
                return this[LRU_LIST];
              }
            }, {
              key: "set",
              value: function set(key, value, maxAge) {
                maxAge = maxAge || this[MAX_AGE];
                if (maxAge && typeof maxAge !== "number")
                  throw new TypeError("maxAge must be a number");
                var now = maxAge ? Date.now() : 0;
                var len = this[LENGTH_CALCULATOR](value, key);
                if (this[CACHE].has(key)) {
                  if (len > this[MAX]) {
                    _del(this, this[CACHE].get(key));
                    return false;
                  }
                  var node = this[CACHE].get(key);
                  var item = node.value;
                  if (this[DISPOSE]) {
                    if (!this[NO_DISPOSE_ON_SET])
                      this[DISPOSE](key, item.value);
                  }
                  item.now = now;
                  item.maxAge = maxAge;
                  item.value = value;
                  this[LENGTH] += len - item.length;
                  item.length = len;
                  this.get(key);
                  trim(this);
                  return true;
                }
                var hit = new Entry(key, value, len, now, maxAge);
                if (hit.length > this[MAX]) {
                  if (this[DISPOSE])
                    this[DISPOSE](key, value);
                  return false;
                }
                this[LENGTH] += hit.length;
                this[LRU_LIST].unshift(hit);
                this[CACHE].set(key, this[LRU_LIST].head);
                trim(this);
                return true;
              }
            }, {
              key: "has",
              value: function has(key) {
                if (!this[CACHE].has(key))
                  return false;
                var hit = this[CACHE].get(key).value;
                return !isStale(this, hit);
              }
            }, {
              key: "get",
              value: function get(key) {
                return _get(this, key, true);
              }
            }, {
              key: "peek",
              value: function peek(key) {
                return _get(this, key, false);
              }
            }, {
              key: "pop",
              value: function pop() {
                var node = this[LRU_LIST].tail;
                if (!node)
                  return null;
                _del(this, node);
                return node.value;
              }
            }, {
              key: "del",
              value: function del(key) {
                _del(this, this[CACHE].get(key));
              }
            }, {
              key: "load",
              value: function load(arr) {
                this.reset();
                var now = Date.now();
                for (var l2 = arr.length - 1; l2 >= 0; l2--) {
                  var hit = arr[l2];
                  var expiresAt = hit.e || 0;
                  if (expiresAt === 0)
                    this.set(hit.k, hit.v);
                  else {
                    var maxAge = expiresAt - now;
                    if (maxAge > 0) {
                      this.set(hit.k, hit.v, maxAge);
                    }
                  }
                }
              }
            }, {
              key: "prune",
              value: function prune() {
                var _this3 = this;
                this[CACHE].forEach(function(value, key) {
                  return _get(_this3, key, false);
                });
              }
            }, {
              key: "max",
              set: function set(mL) {
                if (typeof mL !== "number" || mL < 0)
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = mL || Infinity;
                trim(this);
              },
              get: function get() {
                return this[MAX];
              }
            }, {
              key: "allowStale",
              set: function set(allowStale) {
                this[ALLOW_STALE] = !!allowStale;
              },
              get: function get() {
                return this[ALLOW_STALE];
              }
            }, {
              key: "maxAge",
              set: function set(mA) {
                if (typeof mA !== "number")
                  throw new TypeError("maxAge must be a non-negative number");
                this[MAX_AGE] = mA;
                trim(this);
              },
              get: function get() {
                return this[MAX_AGE];
              }
            }, {
              key: "lengthCalculator",
              set: function set(lC) {
                var _this4 = this;
                if (typeof lC !== "function")
                  lC = naiveLength;
                if (lC !== this[LENGTH_CALCULATOR]) {
                  this[LENGTH_CALCULATOR] = lC;
                  this[LENGTH] = 0;
                  this[LRU_LIST].forEach(function(hit) {
                    hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
                    _this4[LENGTH] += hit.length;
                  });
                }
                trim(this);
              },
              get: function get() {
                return this[LENGTH_CALCULATOR];
              }
            }, {
              key: "length",
              get: function get() {
                return this[LENGTH];
              }
            }, {
              key: "itemCount",
              get: function get() {
                return this[LRU_LIST].length;
              }
            }]);
            return LRUCache2;
          }();
          var _get = function _get2(self2, key, doUse) {
            var node = self2[CACHE].get(key);
            if (node) {
              var hit = node.value;
              if (isStale(self2, hit)) {
                _del(self2, node);
                if (!self2[ALLOW_STALE])
                  return void 0;
              } else {
                if (doUse) {
                  if (self2[UPDATE_AGE_ON_GET])
                    node.value.now = Date.now();
                  self2[LRU_LIST].unshiftNode(node);
                }
              }
              return hit.value;
            }
          };
          var isStale = function isStale2(self2, hit) {
            if (!hit || !hit.maxAge && !self2[MAX_AGE])
              return false;
            var diff = Date.now() - hit.now;
            return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
          };
          var trim = function trim2(self2) {
            if (self2[LENGTH] > self2[MAX]) {
              for (var walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
                var prev = walker.prev;
                _del(self2, walker);
                walker = prev;
              }
            }
          };
          var _del = function _del2(self2, node) {
            if (node) {
              var hit = node.value;
              if (self2[DISPOSE])
                self2[DISPOSE](hit.key, hit.value);
              self2[LENGTH] -= hit.length;
              self2[CACHE].delete(hit.key);
              self2[LRU_LIST].removeNode(node);
            }
          };
          var Entry = function Entry2(key, value, length, now, maxAge) {
            _classCallCheck(this, Entry2);
            this.key = key;
            this.value = value;
            this.length = length;
            this.now = now;
            this.maxAge = maxAge || 0;
          };
          var forEachStep = function forEachStep2(self2, fn, node, thisp) {
            var hit = node.value;
            if (isStale(self2, hit)) {
              _del(self2, node);
              if (!self2[ALLOW_STALE])
                hit = void 0;
            }
            if (hit)
              fn.call(thisp, hit.value, hit.key, self2);
          };
          module3.exports = LRUCache;
        },
        function(module3, exports3, __webpack_require__) {
          (function(setImmediate) {
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            (function(name, definition) {
              if (true) {
                module3.exports = definition();
              } else {
              }
            })("clipboard", function() {
              if (typeof document === "undefined" || !document.addEventListener) {
                return null;
              }
              var clipboard = {};
              clipboard.copy = function() {
                var _intercept = false;
                var _data = null;
                var _bogusSelection = false;
                function cleanup() {
                  _intercept = false;
                  _data = null;
                  if (_bogusSelection) {
                    window.getSelection().removeAllRanges();
                  }
                  _bogusSelection = false;
                }
                document.addEventListener("copy", function(e2) {
                  if (_intercept) {
                    for (var key in _data) {
                      e2.clipboardData.setData(key, _data[key]);
                    }
                    e2.preventDefault();
                  }
                });
                function bogusSelect() {
                  var sel = document.getSelection();
                  if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
                    var range = document.createRange();
                    range.selectNodeContents(document.body);
                    sel.removeAllRanges();
                    sel.addRange(range);
                    _bogusSelection = true;
                  }
                }
                ;
                return function(data) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    if (typeof data === "string") {
                      _data = {
                        "text/plain": data
                      };
                    } else if (data instanceof Node) {
                      _data = {
                        "text/html": new XMLSerializer().serializeToString(data)
                      };
                    } else if (data instanceof Object) {
                      _data = data;
                    } else {
                      reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
                    }
                    function triggerCopy(tryBogusSelect) {
                      try {
                        if (document.execCommand("copy")) {
                          cleanup();
                          resolve();
                        } else {
                          if (!tryBogusSelect) {
                            bogusSelect();
                            triggerCopy(true);
                          } else {
                            cleanup();
                            throw new Error("Unable to copy. Perhaps it's not available in your browser?");
                          }
                        }
                      } catch (e2) {
                        cleanup();
                        reject(e2);
                      }
                    }
                    triggerCopy(false);
                  });
                };
              }();
              clipboard.paste = function() {
                var _intercept = false;
                var _resolve;
                var _dataType;
                document.addEventListener("paste", function(e2) {
                  if (_intercept) {
                    _intercept = false;
                    e2.preventDefault();
                    var resolve = _resolve;
                    _resolve = null;
                    resolve(e2.clipboardData.getData(_dataType));
                  }
                });
                return function(dataType) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    _resolve = resolve;
                    _dataType = dataType || "text/plain";
                    try {
                      if (!document.execCommand("paste")) {
                        _intercept = false;
                        reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
                      }
                    } catch (e2) {
                      _intercept = false;
                      reject(new Error(e2));
                    }
                  });
                };
              }();
              if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
                (function(a2) {
                  function b2(a3, b3) {
                    return function() {
                      a3.apply(b3, arguments);
                    };
                  }
                  function c2(a3) {
                    if (_typeof(this) != "object")
                      throw new TypeError("Promises must be constructed via new");
                    if (typeof a3 != "function")
                      throw new TypeError("not a function");
                    this._state = null, this._value = null, this._deferreds = [], i2(a3, b2(e2, this), b2(f, this));
                  }
                  function d(a3) {
                    var b3 = this;
                    return this._state === null ? void this._deferreds.push(a3) : void j(function() {
                      var c3 = b3._state ? a3.onFulfilled : a3.onRejected;
                      if (c3 === null)
                        return void (b3._state ? a3.resolve : a3.reject)(b3._value);
                      var d2;
                      try {
                        d2 = c3(b3._value);
                      } catch (e3) {
                        return void a3.reject(e3);
                      }
                      a3.resolve(d2);
                    });
                  }
                  function e2(a3) {
                    try {
                      if (a3 === this)
                        throw new TypeError("A promise cannot be resolved with itself.");
                      if (a3 && (_typeof(a3) == "object" || typeof a3 == "function")) {
                        var c3 = a3.then;
                        if (typeof c3 == "function")
                          return void i2(b2(c3, a3), b2(e2, this), b2(f, this));
                      }
                      this._state = true, this._value = a3, g2.call(this);
                    } catch (d2) {
                      f.call(this, d2);
                    }
                  }
                  function f(a3) {
                    this._state = false, this._value = a3, g2.call(this);
                  }
                  function g2() {
                    for (var a3 = 0, b3 = this._deferreds.length; b3 > a3; a3++) {
                      d.call(this, this._deferreds[a3]);
                    }
                    this._deferreds = null;
                  }
                  function h(a3, b3, c3, d2) {
                    this.onFulfilled = typeof a3 == "function" ? a3 : null, this.onRejected = typeof b3 == "function" ? b3 : null, this.resolve = c3, this.reject = d2;
                  }
                  function i2(a3, b3, c3) {
                    var d2 = false;
                    try {
                      a3(function(a4) {
                        d2 || (d2 = true, b3(a4));
                      }, function(a4) {
                        d2 || (d2 = true, c3(a4));
                      });
                    } catch (e3) {
                      if (d2)
                        return;
                      d2 = true, c3(e3);
                    }
                  }
                  var j = c2.immediateFn || typeof setImmediate == "function" && setImmediate || function(a3) {
                    setTimeout(a3, 1);
                  }, k = Array.isArray || function(a3) {
                    return Object.prototype.toString.call(a3) === "[object Array]";
                  };
                  c2.prototype["catch"] = function(a3) {
                    return this.then(null, a3);
                  }, c2.prototype.then = function(a3, b3) {
                    var e3 = this;
                    return new c2(function(c3, f2) {
                      d.call(e3, new h(a3, b3, c3, f2));
                    });
                  }, c2.all = function() {
                    var a3 = Array.prototype.slice.call(arguments.length === 1 && k(arguments[0]) ? arguments[0] : arguments);
                    return new c2(function(b3, c3) {
                      function d2(f3, g3) {
                        try {
                          if (g3 && (_typeof(g3) == "object" || typeof g3 == "function")) {
                            var h2 = g3.then;
                            if (typeof h2 == "function")
                              return void h2.call(g3, function(a4) {
                                d2(f3, a4);
                              }, c3);
                          }
                          a3[f3] = g3, --e3 === 0 && b3(a3);
                        } catch (i3) {
                          c3(i3);
                        }
                      }
                      if (a3.length === 0)
                        return b3([]);
                      for (var e3 = a3.length, f2 = 0; f2 < a3.length; f2++) {
                        d2(f2, a3[f2]);
                      }
                    });
                  }, c2.resolve = function(a3) {
                    return a3 && _typeof(a3) == "object" && a3.constructor === c2 ? a3 : new c2(function(b3) {
                      b3(a3);
                    });
                  }, c2.reject = function(a3) {
                    return new c2(function(b3, c3) {
                      c3(a3);
                    });
                  }, c2.race = function(a3) {
                    return new c2(function(b3, c3) {
                      for (var d2 = 0, e3 = a3.length; e3 > d2; d2++) {
                        a3[d2].then(b3, c3);
                      }
                    });
                  }, module3.exports ? module3.exports = c2 : a2.Promise || (a2.Promise = c2);
                })(this);
                clipboard.copy = function(data) {
                  return new Promise(function(resolve, reject) {
                    if (typeof data !== "string" && !("text/plain" in data)) {
                      throw new Error("You must provide a text/plain type.");
                    }
                    var strData = typeof data === "string" ? data : data["text/plain"];
                    var copySucceeded = window.clipboardData.setData("Text", strData);
                    if (copySucceeded) {
                      resolve();
                    } else {
                      reject(new Error("Copying was rejected."));
                    }
                  });
                };
                clipboard.paste = function() {
                  return new Promise(function(resolve, reject) {
                    var strData = window.clipboardData.getData("Text");
                    if (strData) {
                      resolve(strData);
                    } else {
                      reject(new Error("Pasting was rejected."));
                    }
                  });
                };
              }
              return clipboard;
            });
          }).call(this, __webpack_require__(12).setImmediate);
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(14);
          } else {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          module3.exports = Yallist;
          Yallist.Node = Node2;
          Yallist.create = Yallist;
          function Yallist(list) {
            var self2 = this;
            if (!(self2 instanceof Yallist)) {
              self2 = new Yallist();
            }
            self2.tail = null;
            self2.head = null;
            self2.length = 0;
            if (list && typeof list.forEach === "function") {
              list.forEach(function(item) {
                self2.push(item);
              });
            } else if (arguments.length > 0) {
              for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
                self2.push(arguments[i2]);
              }
            }
            return self2;
          }
          Yallist.prototype.removeNode = function(node) {
            if (node.list !== this) {
              throw new Error("removing node which does not belong to this list");
            }
            var next = node.next;
            var prev = node.prev;
            if (next) {
              next.prev = prev;
            }
            if (prev) {
              prev.next = next;
            }
            if (node === this.head) {
              this.head = next;
            }
            if (node === this.tail) {
              this.tail = prev;
            }
            node.list.length--;
            node.next = null;
            node.prev = null;
            node.list = null;
            return next;
          };
          Yallist.prototype.unshiftNode = function(node) {
            if (node === this.head) {
              return;
            }
            if (node.list) {
              node.list.removeNode(node);
            }
            var head = this.head;
            node.list = this;
            node.next = head;
            if (head) {
              head.prev = node;
            }
            this.head = node;
            if (!this.tail) {
              this.tail = node;
            }
            this.length++;
          };
          Yallist.prototype.pushNode = function(node) {
            if (node === this.tail) {
              return;
            }
            if (node.list) {
              node.list.removeNode(node);
            }
            var tail = this.tail;
            node.list = this;
            node.prev = tail;
            if (tail) {
              tail.next = node;
            }
            this.tail = node;
            if (!this.head) {
              this.head = node;
            }
            this.length++;
          };
          Yallist.prototype.push = function() {
            for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
              push(this, arguments[i2]);
            }
            return this.length;
          };
          Yallist.prototype.unshift = function() {
            for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
              unshift(this, arguments[i2]);
            }
            return this.length;
          };
          Yallist.prototype.pop = function() {
            if (!this.tail) {
              return void 0;
            }
            var res = this.tail.value;
            this.tail = this.tail.prev;
            if (this.tail) {
              this.tail.next = null;
            } else {
              this.head = null;
            }
            this.length--;
            return res;
          };
          Yallist.prototype.shift = function() {
            if (!this.head) {
              return void 0;
            }
            var res = this.head.value;
            this.head = this.head.next;
            if (this.head) {
              this.head.prev = null;
            } else {
              this.tail = null;
            }
            this.length--;
            return res;
          };
          Yallist.prototype.forEach = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.head, i2 = 0; walker !== null; i2++) {
              fn.call(thisp, walker.value, i2, this);
              walker = walker.next;
            }
          };
          Yallist.prototype.forEachReverse = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.tail, i2 = this.length - 1; walker !== null; i2--) {
              fn.call(thisp, walker.value, i2, this);
              walker = walker.prev;
            }
          };
          Yallist.prototype.get = function(n2) {
            for (var i2 = 0, walker = this.head; walker !== null && i2 < n2; i2++) {
              walker = walker.next;
            }
            if (i2 === n2 && walker !== null) {
              return walker.value;
            }
          };
          Yallist.prototype.getReverse = function(n2) {
            for (var i2 = 0, walker = this.tail; walker !== null && i2 < n2; i2++) {
              walker = walker.prev;
            }
            if (i2 === n2 && walker !== null) {
              return walker.value;
            }
          };
          Yallist.prototype.map = function(fn, thisp) {
            thisp = thisp || this;
            var res = new Yallist();
            for (var walker = this.head; walker !== null; ) {
              res.push(fn.call(thisp, walker.value, this));
              walker = walker.next;
            }
            return res;
          };
          Yallist.prototype.mapReverse = function(fn, thisp) {
            thisp = thisp || this;
            var res = new Yallist();
            for (var walker = this.tail; walker !== null; ) {
              res.push(fn.call(thisp, walker.value, this));
              walker = walker.prev;
            }
            return res;
          };
          Yallist.prototype.reduce = function(fn, initial) {
            var acc;
            var walker = this.head;
            if (arguments.length > 1) {
              acc = initial;
            } else if (this.head) {
              walker = this.head.next;
              acc = this.head.value;
            } else {
              throw new TypeError("Reduce of empty list with no initial value");
            }
            for (var i2 = 0; walker !== null; i2++) {
              acc = fn(acc, walker.value, i2);
              walker = walker.next;
            }
            return acc;
          };
          Yallist.prototype.reduceReverse = function(fn, initial) {
            var acc;
            var walker = this.tail;
            if (arguments.length > 1) {
              acc = initial;
            } else if (this.tail) {
              walker = this.tail.prev;
              acc = this.tail.value;
            } else {
              throw new TypeError("Reduce of empty list with no initial value");
            }
            for (var i2 = this.length - 1; walker !== null; i2--) {
              acc = fn(acc, walker.value, i2);
              walker = walker.prev;
            }
            return acc;
          };
          Yallist.prototype.toArray = function() {
            var arr = new Array(this.length);
            for (var i2 = 0, walker = this.head; walker !== null; i2++) {
              arr[i2] = walker.value;
              walker = walker.next;
            }
            return arr;
          };
          Yallist.prototype.toArrayReverse = function() {
            var arr = new Array(this.length);
            for (var i2 = 0, walker = this.tail; walker !== null; i2++) {
              arr[i2] = walker.value;
              walker = walker.prev;
            }
            return arr;
          };
          Yallist.prototype.slice = function(from, to) {
            to = to || this.length;
            if (to < 0) {
              to += this.length;
            }
            from = from || 0;
            if (from < 0) {
              from += this.length;
            }
            var ret = new Yallist();
            if (to < from || to < 0) {
              return ret;
            }
            if (from < 0) {
              from = 0;
            }
            if (to > this.length) {
              to = this.length;
            }
            for (var i2 = 0, walker = this.head; walker !== null && i2 < from; i2++) {
              walker = walker.next;
            }
            for (; walker !== null && i2 < to; i2++, walker = walker.next) {
              ret.push(walker.value);
            }
            return ret;
          };
          Yallist.prototype.sliceReverse = function(from, to) {
            to = to || this.length;
            if (to < 0) {
              to += this.length;
            }
            from = from || 0;
            if (from < 0) {
              from += this.length;
            }
            var ret = new Yallist();
            if (to < from || to < 0) {
              return ret;
            }
            if (from < 0) {
              from = 0;
            }
            if (to > this.length) {
              to = this.length;
            }
            for (var i2 = this.length, walker = this.tail; walker !== null && i2 > to; i2--) {
              walker = walker.prev;
            }
            for (; walker !== null && i2 > from; i2--, walker = walker.prev) {
              ret.push(walker.value);
            }
            return ret;
          };
          Yallist.prototype.splice = function(start, deleteCount) {
            if (start > this.length) {
              start = this.length - 1;
            }
            if (start < 0) {
              start = this.length + start;
            }
            for (var i2 = 0, walker = this.head; walker !== null && i2 < start; i2++) {
              walker = walker.next;
            }
            var ret = [];
            for (var i2 = 0; walker && i2 < deleteCount; i2++) {
              ret.push(walker.value);
              walker = this.removeNode(walker);
            }
            if (walker === null) {
              walker = this.tail;
            }
            if (walker !== this.head && walker !== this.tail) {
              walker = walker.prev;
            }
            for (var i2 = 2; i2 < arguments.length; i2++) {
              walker = insert(this, walker, arguments[i2]);
            }
            return ret;
          };
          Yallist.prototype.reverse = function() {
            var head = this.head;
            var tail = this.tail;
            for (var walker = head; walker !== null; walker = walker.prev) {
              var p = walker.prev;
              walker.prev = walker.next;
              walker.next = p;
            }
            this.head = tail;
            this.tail = head;
            return this;
          };
          function insert(self2, node, value) {
            var inserted = node === self2.head ? new Node2(value, null, node, self2) : new Node2(value, node, node.next, self2);
            if (inserted.next === null) {
              self2.tail = inserted;
            }
            if (inserted.prev === null) {
              self2.head = inserted;
            }
            self2.length++;
            return inserted;
          }
          function push(self2, item) {
            self2.tail = new Node2(item, self2.tail, null, self2);
            if (!self2.head) {
              self2.head = self2.tail;
            }
            self2.length++;
          }
          function unshift(self2, item) {
            self2.head = new Node2(item, null, self2.head, self2);
            if (!self2.tail) {
              self2.tail = self2.head;
            }
            self2.length++;
          }
          function Node2(value, prev, next, list) {
            if (!(this instanceof Node2)) {
              return new Node2(value, prev, next, list);
            }
            this.list = list;
            this.value = value;
            if (prev) {
              prev.next = this;
              this.prev = prev;
            } else {
              this.prev = null;
            }
            if (next) {
              next.prev = this;
              this.next = next;
            } else {
              this.next = null;
            }
          }
          try {
            __webpack_require__(10)(Yallist);
          } catch (er) {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          module3.exports = function(Yallist) {
            Yallist.prototype[Symbol.iterator] = /* @__PURE__ */ regeneratorRuntime.mark(function _callee() {
              var walker;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      walker = this.head;
                    case 1:
                      if (!walker) {
                        _context.next = 7;
                        break;
                      }
                      _context.next = 4;
                      return walker.value;
                    case 4:
                      walker = walker.next;
                      _context.next = 1;
                      break;
                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            });
          };
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var b2 = 60103, c2 = 60106, d = 60107, e2 = 60108, f = 60114, g2 = 60109, h = 60110, k = 60112, l2 = 60113, m = 60120, n2 = 60115, p = 60116, q = 60129, r2 = 60130, u2 = 60131, v = 60132;
          if (typeof Symbol === "function" && Symbol.for) {
            var w = Symbol.for;
            b2 = w("react.element");
            c2 = w("react.portal");
            d = w("react.fragment");
            e2 = w("react.strict_mode");
            f = w("react.profiler");
            g2 = w("react.provider");
            h = w("react.context");
            k = w("react.forward_ref");
            l2 = w("react.suspense");
            m = w("react.suspense_list");
            n2 = w("react.memo");
            p = w("react.lazy");
            q = w("react.debug_trace_mode");
            r2 = w("react.offscreen");
            u2 = w("react.legacy_hidden");
            v = w("react.cache");
          }
          var x = 0;
          typeof Symbol === "function" && (x = Symbol.for("react.module.reference"));
          function y2(a2) {
            if (_typeof(a2) === "object" && a2 !== null) {
              var t2 = a2.$$typeof;
              switch (t2) {
                case b2:
                  switch (a2 = a2.type, a2) {
                    case d:
                    case f:
                    case e2:
                    case l2:
                    case m:
                      return a2;
                    default:
                      switch (a2 = a2 && a2.$$typeof, a2) {
                        case h:
                        case k:
                        case p:
                        case n2:
                        case g2:
                          return a2;
                        default:
                          return t2;
                      }
                  }
                case c2:
                  return t2;
              }
            }
          }
          var z = g2, A = b2, B = k, C = d, D = p, E = n2, F = c2, G = f, H = e2, I = l2, J = m;
          exports3.ContextConsumer = h;
          exports3.ContextProvider = z;
          exports3.Element = A;
          exports3.ForwardRef = B;
          exports3.Fragment = C;
          exports3.Lazy = D;
          exports3.Memo = E;
          exports3.Portal = F;
          exports3.Profiler = G;
          exports3.StrictMode = H;
          exports3.Suspense = I;
          exports3.SuspenseList = J;
          exports3.isAsyncMode = function() {
            return false;
          };
          exports3.isConcurrentMode = function() {
            return false;
          };
          exports3.isContextConsumer = function(a2) {
            return y2(a2) === h;
          };
          exports3.isContextProvider = function(a2) {
            return y2(a2) === g2;
          };
          exports3.isElement = function(a2) {
            return _typeof(a2) === "object" && a2 !== null && a2.$$typeof === b2;
          };
          exports3.isForwardRef = function(a2) {
            return y2(a2) === k;
          };
          exports3.isFragment = function(a2) {
            return y2(a2) === d;
          };
          exports3.isLazy = function(a2) {
            return y2(a2) === p;
          };
          exports3.isMemo = function(a2) {
            return y2(a2) === n2;
          };
          exports3.isPortal = function(a2) {
            return y2(a2) === c2;
          };
          exports3.isProfiler = function(a2) {
            return y2(a2) === f;
          };
          exports3.isStrictMode = function(a2) {
            return y2(a2) === e2;
          };
          exports3.isSuspense = function(a2) {
            return y2(a2) === l2;
          };
          exports3.isSuspenseList = function(a2) {
            return y2(a2) === m;
          };
          exports3.isValidElementType = function(a2) {
            return typeof a2 === "string" || typeof a2 === "function" || a2 === d || a2 === f || a2 === q || a2 === e2 || a2 === l2 || a2 === m || a2 === u2 || a2 === r2 || a2 === v || _typeof(a2) === "object" && a2 !== null && (a2.$$typeof === p || a2.$$typeof === n2 || a2.$$typeof === g2 || a2.$$typeof === h || a2.$$typeof === k || a2.$$typeof === x || a2.getModuleId !== void 0) ? true : false;
          };
          exports3.typeOf = y2;
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2) {
            var scope = typeof global2 !== "undefined" && global2 || typeof self !== "undefined" && self || window;
            var apply = Function.prototype.apply;
            exports3.setTimeout = function() {
              return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
            };
            exports3.setInterval = function() {
              return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
            };
            exports3.clearTimeout = exports3.clearInterval = function(timeout) {
              if (timeout) {
                timeout.close();
              }
            };
            function Timeout(id, clearFn) {
              this._id = id;
              this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {
            };
            Timeout.prototype.close = function() {
              this._clearFn.call(scope, this._id);
            };
            exports3.enroll = function(item, msecs) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = msecs;
            };
            exports3.unenroll = function(item) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = -1;
            };
            exports3._unrefActive = exports3.active = function(item) {
              clearTimeout(item._idleTimeoutId);
              var msecs = item._idleTimeout;
              if (msecs >= 0) {
                item._idleTimeoutId = setTimeout(function onTimeout() {
                  if (item._onTimeout)
                    item._onTimeout();
                }, msecs);
              }
            };
            __webpack_require__(13);
            exports3.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global2 !== "undefined" && global2.setImmediate || this && this.setImmediate;
            exports3.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global2 !== "undefined" && global2.clearImmediate || this && this.clearImmediate;
          }).call(this, __webpack_require__(4));
        },
        function(module3, exports3, __webpack_require__) {
          (function(global2, process2) {
            (function(global3, undefined2) {
              "use strict";
              if (global3.setImmediate) {
                return;
              }
              var nextHandle = 1;
              var tasksByHandle = {};
              var currentlyRunningATask = false;
              var doc = global3.document;
              var registerImmediate;
              function setImmediate(callback) {
                if (typeof callback !== "function") {
                  callback = new Function("" + callback);
                }
                var args = new Array(arguments.length - 1);
                for (var i2 = 0; i2 < args.length; i2++) {
                  args[i2] = arguments[i2 + 1];
                }
                var task2 = {
                  callback,
                  args
                };
                tasksByHandle[nextHandle] = task2;
                registerImmediate(nextHandle);
                return nextHandle++;
              }
              function clearImmediate(handle) {
                delete tasksByHandle[handle];
              }
              function run(task2) {
                var callback = task2.callback;
                var args = task2.args;
                switch (args.length) {
                  case 0:
                    callback();
                    break;
                  case 1:
                    callback(args[0]);
                    break;
                  case 2:
                    callback(args[0], args[1]);
                    break;
                  case 3:
                    callback(args[0], args[1], args[2]);
                    break;
                  default:
                    callback.apply(undefined2, args);
                    break;
                }
              }
              function runIfPresent(handle) {
                if (currentlyRunningATask) {
                  setTimeout(runIfPresent, 0, handle);
                } else {
                  var task2 = tasksByHandle[handle];
                  if (task2) {
                    currentlyRunningATask = true;
                    try {
                      run(task2);
                    } finally {
                      clearImmediate(handle);
                      currentlyRunningATask = false;
                    }
                  }
                }
              }
              function installNextTickImplementation() {
                registerImmediate = function registerImmediate2(handle) {
                  process2.nextTick(function() {
                    runIfPresent(handle);
                  });
                };
              }
              function canUsePostMessage() {
                if (global3.postMessage && !global3.importScripts) {
                  var postMessageIsAsynchronous = true;
                  var oldOnMessage = global3.onmessage;
                  global3.onmessage = function() {
                    postMessageIsAsynchronous = false;
                  };
                  global3.postMessage("", "*");
                  global3.onmessage = oldOnMessage;
                  return postMessageIsAsynchronous;
                }
              }
              function installPostMessageImplementation() {
                var messagePrefix = "setImmediate$" + Math.random() + "$";
                var onGlobalMessage = function onGlobalMessage2(event) {
                  if (event.source === global3 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                    runIfPresent(+event.data.slice(messagePrefix.length));
                  }
                };
                if (global3.addEventListener) {
                  global3.addEventListener("message", onGlobalMessage, false);
                } else {
                  global3.attachEvent("onmessage", onGlobalMessage);
                }
                registerImmediate = function registerImmediate2(handle) {
                  global3.postMessage(messagePrefix + handle, "*");
                };
              }
              function installMessageChannelImplementation() {
                var channel = new MessageChannel();
                channel.port1.onmessage = function(event) {
                  var handle = event.data;
                  runIfPresent(handle);
                };
                registerImmediate = function registerImmediate2(handle) {
                  channel.port2.postMessage(handle);
                };
              }
              function installReadyStateChangeImplementation() {
                var html = doc.documentElement;
                registerImmediate = function registerImmediate2(handle) {
                  var script = doc.createElement("script");
                  script.onreadystatechange = function() {
                    runIfPresent(handle);
                    script.onreadystatechange = null;
                    html.removeChild(script);
                    script = null;
                  };
                  html.appendChild(script);
                };
              }
              function installSetTimeoutImplementation() {
                registerImmediate = function registerImmediate2(handle) {
                  setTimeout(runIfPresent, 0, handle);
                };
              }
              var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global3);
              attachTo = attachTo && attachTo.setTimeout ? attachTo : global3;
              if ({}.toString.call(global3.process) === "[object process]") {
                installNextTickImplementation();
              } else if (canUsePostMessage()) {
                installPostMessageImplementation();
              } else if (global3.MessageChannel) {
                installMessageChannelImplementation();
              } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                installReadyStateChangeImplementation();
              } else {
                installSetTimeoutImplementation();
              }
              attachTo.setImmediate = setImmediate;
              attachTo.clearImmediate = clearImmediate;
            })(typeof self === "undefined" ? typeof global2 === "undefined" ? this : global2 : self);
          }).call(this, __webpack_require__(4), __webpack_require__(5));
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var k = __webpack_require__(1), p = __webpack_require__(15);
          function r2(a2) {
            for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, e2 = 1; e2 < arguments.length; e2++) {
              b2 += "&args[]=" + encodeURIComponent(arguments[e2]);
            }
            return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
          }
          var w = __webpack_require__(17).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, x = 60128;
          if (typeof Symbol === "function" && Symbol.for) {
            var y2 = Symbol.for;
            x = y2("react.opaque.id");
          }
          var z = [], A = null, B = null;
          function C() {
            if (A === null) {
              var a2 = new Map();
              try {
                D.useContext({
                  _currentValue: null
                }), D.useState(null), D.useReducer(function(a3) {
                  return a3;
                }, null), D.useRef(null), typeof D.useCacheRefresh === "function" && D.useCacheRefresh(), D.useLayoutEffect(function() {
                }), D.useEffect(function() {
                }), D.useImperativeHandle(void 0, function() {
                  return null;
                }), D.useDebugValue(null), D.useCallback(function() {
                }), D.useMemo(function() {
                  return null;
                });
              } finally {
                var b2 = z;
                z = [];
              }
              for (var e2 = 0; e2 < b2.length; e2++) {
                var f = b2[e2];
                a2.set(f.primitive, p.parse(f.stackError));
              }
              A = a2;
            }
            return A;
          }
          var E = null;
          function F() {
            var a2 = E;
            a2 !== null && (E = a2.next);
            return a2;
          }
          var D = {
            getCacheForType: function getCacheForType() {
              throw Error(r2(248));
            },
            readContext: function readContext(a2) {
              return a2._currentValue;
            },
            useCacheRefresh: function useCacheRefresh() {
              var a2 = F();
              z.push({
                primitive: "CacheRefresh",
                stackError: Error(),
                value: a2 !== null ? a2.memoizedState : function() {
                }
              });
              return function() {
              };
            },
            useCallback: function useCallback2(a2) {
              var b2 = F();
              z.push({
                primitive: "Callback",
                stackError: Error(),
                value: b2 !== null ? b2.memoizedState[0] : a2
              });
              return a2;
            },
            useContext: function useContext(a2) {
              z.push({
                primitive: "Context",
                stackError: Error(),
                value: a2._currentValue
              });
              return a2._currentValue;
            },
            useEffect: function useEffect2(a2) {
              F();
              z.push({
                primitive: "Effect",
                stackError: Error(),
                value: a2
              });
            },
            useImperativeHandle: function useImperativeHandle(a2) {
              F();
              var b2 = void 0;
              a2 !== null && _typeof(a2) === "object" && (b2 = a2.current);
              z.push({
                primitive: "ImperativeHandle",
                stackError: Error(),
                value: b2
              });
            },
            useDebugValue: function useDebugValue2(a2, b2) {
              z.push({
                primitive: "DebugValue",
                stackError: Error(),
                value: typeof b2 === "function" ? b2(a2) : a2
              });
            },
            useLayoutEffect: function useLayoutEffect2(a2) {
              F();
              z.push({
                primitive: "LayoutEffect",
                stackError: Error(),
                value: a2
              });
            },
            useMemo: function useMemo2(a2) {
              var b2 = F();
              a2 = b2 !== null ? b2.memoizedState[0] : a2();
              z.push({
                primitive: "Memo",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useReducer: function useReducer2(a2, b2, e2) {
              a2 = F();
              b2 = a2 !== null ? a2.memoizedState : e2 !== void 0 ? e2(b2) : b2;
              z.push({
                primitive: "Reducer",
                stackError: Error(),
                value: b2
              });
              return [b2, function() {
              }];
            },
            useRef: function useRef2(a2) {
              var b2 = F();
              a2 = b2 !== null ? b2.memoizedState : {
                current: a2
              };
              z.push({
                primitive: "Ref",
                stackError: Error(),
                value: a2.current
              });
              return a2;
            },
            useState: function useState2(a2) {
              var b2 = F();
              a2 = b2 !== null ? b2.memoizedState : typeof a2 === "function" ? a2() : a2;
              z.push({
                primitive: "State",
                stackError: Error(),
                value: a2
              });
              return [a2, function() {
              }];
            },
            useTransition: function useTransition() {
              F();
              F();
              z.push({
                primitive: "Transition",
                stackError: Error(),
                value: void 0
              });
              return [false, function() {
              }];
            },
            useMutableSource: function useMutableSource2(a2, b2) {
              F();
              F();
              F();
              F();
              a2 = b2(a2._source);
              z.push({
                primitive: "MutableSource",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useDeferredValue: function useDeferredValue(a2) {
              F();
              F();
              z.push({
                primitive: "DeferredValue",
                stackError: Error(),
                value: a2
              });
              return a2;
            },
            useOpaqueIdentifier: function useOpaqueIdentifier() {
              var a2 = F();
              B && B.mode === 0 && F();
              (a2 = a2 === null ? void 0 : a2.memoizedState) && a2.$$typeof === x && (a2 = void 0);
              z.push({
                primitive: "OpaqueIdentifier",
                stackError: Error(),
                value: a2
              });
              return a2;
            }
          }, G = 0;
          function H(a2, b2, e2) {
            var f = b2[e2].source, c2 = 0;
            a:
              for (; c2 < a2.length; c2++) {
                if (a2[c2].source === f) {
                  for (var l2 = e2 + 1, q = c2 + 1; l2 < b2.length && q < a2.length; l2++, q++) {
                    if (a2[q].source !== b2[l2].source)
                      continue a;
                  }
                  return c2;
                }
              }
            return -1;
          }
          function I(a2, b2) {
            if (!a2)
              return false;
            b2 = "use" + b2;
            return a2.length < b2.length ? false : a2.lastIndexOf(b2) === a2.length - b2.length;
          }
          function J(a2, b2, e2) {
            for (var f = [], c2 = null, l2 = f, q = 0, t2 = [], v = 0; v < b2.length; v++) {
              var u2 = b2[v];
              var d = a2;
              var h = p.parse(u2.stackError);
              b: {
                var m = h, n2 = H(m, d, G);
                if (n2 !== -1)
                  d = n2;
                else {
                  for (var g2 = 0; g2 < d.length && 5 > g2; g2++) {
                    if (n2 = H(m, d, g2), n2 !== -1) {
                      G = g2;
                      d = n2;
                      break b;
                    }
                  }
                  d = -1;
                }
              }
              b: {
                m = h;
                n2 = C().get(u2.primitive);
                if (n2 !== void 0)
                  for (g2 = 0; g2 < n2.length && g2 < m.length; g2++) {
                    if (n2[g2].source !== m[g2].source) {
                      g2 < m.length - 1 && I(m[g2].functionName, u2.primitive) && g2++;
                      g2 < m.length - 1 && I(m[g2].functionName, u2.primitive) && g2++;
                      m = g2;
                      break b;
                    }
                  }
                m = -1;
              }
              h = d === -1 || m === -1 || 2 > d - m ? null : h.slice(m, d - 1);
              if (h !== null) {
                d = 0;
                if (c2 !== null) {
                  for (; d < h.length && d < c2.length && h[h.length - d - 1].source === c2[c2.length - d - 1].source; ) {
                    d++;
                  }
                  for (c2 = c2.length - 1; c2 > d; c2--) {
                    l2 = t2.pop();
                  }
                }
                for (c2 = h.length - d - 1; 1 <= c2; c2--) {
                  d = [], m = h[c2], (n2 = h[c2 - 1].functionName) ? (g2 = n2.lastIndexOf("."), g2 === -1 && (g2 = 0), n2.substr(g2, 3) === "use" && (g2 += 3), n2 = n2.substr(g2)) : n2 = "", n2 = {
                    id: null,
                    isStateEditable: false,
                    name: n2,
                    value: void 0,
                    subHooks: d
                  }, e2 && (n2.hookSource = {
                    lineNumber: m.lineNumber,
                    columnNumber: m.columnNumber,
                    functionName: m.functionName,
                    fileName: m.fileName
                  }), l2.push(n2), t2.push(l2), l2 = d;
                }
                c2 = h;
              }
              d = u2.primitive;
              u2 = {
                id: d === "Context" || d === "DebugValue" ? null : q++,
                isStateEditable: d === "Reducer" || d === "State",
                name: d,
                value: u2.value,
                subHooks: []
              };
              e2 && (d = {
                lineNumber: null,
                functionName: null,
                fileName: null,
                columnNumber: null
              }, h && 1 <= h.length && (h = h[0], d.lineNumber = h.lineNumber, d.functionName = h.functionName, d.fileName = h.fileName, d.columnNumber = h.columnNumber), u2.hookSource = d);
              l2.push(u2);
            }
            K(f, null);
            return f;
          }
          function K(a2, b2) {
            for (var e2 = [], f = 0; f < a2.length; f++) {
              var c2 = a2[f];
              c2.name === "DebugValue" && c2.subHooks.length === 0 ? (a2.splice(f, 1), f--, e2.push(c2)) : K(c2.subHooks, c2);
            }
            b2 !== null && (e2.length === 1 ? b2.value = e2[0].value : 1 < e2.length && (b2.value = e2.map(function(a3) {
              return a3.value;
            })));
          }
          function L(a2, b2, e2) {
            var f = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : false;
            e2 == null && (e2 = w.ReactCurrentDispatcher);
            var c2 = e2.current;
            e2.current = D;
            try {
              var l2 = Error();
              a2(b2);
            } finally {
              var q = z;
              z = [];
              e2.current = c2;
            }
            c2 = p.parse(l2);
            return J(c2, q, f);
          }
          function M(a2) {
            a2.forEach(function(a3, e2) {
              return e2._currentValue = a3;
            });
          }
          exports3.inspectHooks = L;
          exports3.inspectHooksOfFiber = function(a2, b2) {
            var e2 = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : false;
            b2 == null && (b2 = w.ReactCurrentDispatcher);
            B = a2;
            if (a2.tag !== 0 && a2.tag !== 15 && a2.tag !== 11)
              throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
            C();
            var f = a2.type, c2 = a2.memoizedProps;
            if (f !== a2.elementType && f && f.defaultProps) {
              c2 = k({}, c2);
              var l2 = f.defaultProps;
              for (q in l2) {
                c2[q] === void 0 && (c2[q] = l2[q]);
              }
            }
            E = a2.memoizedState;
            var q = new Map();
            try {
              for (l2 = a2; l2; ) {
                if (l2.tag === 10) {
                  var t2 = l2.type._context;
                  q.has(t2) || (q.set(t2, t2._currentValue), t2._currentValue = l2.memoizedProps.value);
                }
                l2 = l2.return;
              }
              if (a2.tag === 11) {
                var v = f.render;
                f = c2;
                var u2 = a2.ref;
                t2 = b2;
                var d = t2.current;
                t2.current = D;
                try {
                  var h = Error();
                  v(f, u2);
                } finally {
                  var m = z;
                  z = [];
                  t2.current = d;
                }
                var n2 = p.parse(h);
                return J(n2, m, e2);
              }
              return L(f, c2, b2, e2);
            } finally {
              E = null, M(q);
            }
          };
        },
        function(module3, exports3, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          (function(root, factory) {
            "use strict";
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports3, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(this, function ErrorStackParser(StackFrame) {
            "use strict";
            var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
            var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
            var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
            return {
              parse: function ErrorStackParser$$parse(error) {
                if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
                  return this.parseOpera(error);
                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                  return this.parseV8OrIE(error);
                } else if (error.stack) {
                  return this.parseFFOrSafari(error);
                } else {
                  throw new Error("Cannot parse given Error object");
                }
              },
              extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                if (urlLike.indexOf(":") === -1) {
                  return [urlLike];
                }
                var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
                var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
                return [parts[1], parts[2] || void 0, parts[3] || void 0];
              },
              parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !!line.match(CHROME_IE_STACK_REGEXP);
                }, this);
                return filtered.map(function(line) {
                  if (line.indexOf("(eval ") > -1) {
                    line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "");
                  }
                  var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(");
                  var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
                  sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
                  var tokens = sanitizedLine.split(/\s+/).slice(1);
                  var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
                  var functionName = tokens.join(" ") || void 0;
                  var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                  return new StackFrame({
                    functionName,
                    fileName,
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                  });
                }, this);
              },
              parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !line.match(SAFARI_NATIVE_CODE_REGEXP);
                }, this);
                return filtered.map(function(line) {
                  if (line.indexOf(" > eval") > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
                  }
                  if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
                    return new StackFrame({
                      functionName: line
                    });
                  } else {
                    var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                    var matches = line.match(functionNameRegex);
                    var functionName = matches && matches[1] ? matches[1] : void 0;
                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                    return new StackFrame({
                      functionName,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }
                }, this);
              },
              parseOpera: function ErrorStackParser$$parseOpera(e2) {
                if (!e2.stacktrace || e2.message.indexOf("\n") > -1 && e2.message.split("\n").length > e2.stacktrace.split("\n").length) {
                  return this.parseOpera9(e2);
                } else if (!e2.stack) {
                  return this.parseOpera10(e2);
                } else {
                  return this.parseOpera11(e2);
                }
              },
              parseOpera9: function ErrorStackParser$$parseOpera9(e2) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
                var lines = e2.message.split("\n");
                var result = [];
                for (var i2 = 2, len = lines.length; i2 < len; i2 += 2) {
                  var match = lineRE.exec(lines[i2]);
                  if (match) {
                    result.push(new StackFrame({
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i2]
                    }));
                  }
                }
                return result;
              },
              parseOpera10: function ErrorStackParser$$parseOpera10(e2) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                var lines = e2.stacktrace.split("\n");
                var result = [];
                for (var i2 = 0, len = lines.length; i2 < len; i2 += 2) {
                  var match = lineRE.exec(lines[i2]);
                  if (match) {
                    result.push(new StackFrame({
                      functionName: match[3] || void 0,
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i2]
                    }));
                  }
                }
                return result;
              },
              parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                var filtered = error.stack.split("\n").filter(function(line) {
                  return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
                }, this);
                return filtered.map(function(line) {
                  var tokens = line.split("@");
                  var locationParts = this.extractLocation(tokens.pop());
                  var functionCall = tokens.shift() || "";
                  var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                  var argsRaw;
                  if (functionCall.match(/\(([^)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
                  }
                  var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
                  return new StackFrame({
                    functionName,
                    args,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                  });
                }, this);
              }
            };
          });
        },
        function(module3, exports3, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          (function(root, factory) {
            "use strict";
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports3, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(this, function() {
            "use strict";
            function _isNumber(n2) {
              return !isNaN(parseFloat(n2)) && isFinite(n2);
            }
            function _capitalize(str) {
              return str.charAt(0).toUpperCase() + str.substring(1);
            }
            function _getter(p) {
              return function() {
                return this[p];
              };
            }
            var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
            var numericProps = ["columnNumber", "lineNumber"];
            var stringProps = ["fileName", "functionName", "source"];
            var arrayProps = ["args"];
            var props = booleanProps.concat(numericProps, stringProps, arrayProps);
            function StackFrame(obj) {
              if (!obj)
                return;
              for (var i3 = 0; i3 < props.length; i3++) {
                if (obj[props[i3]] !== void 0) {
                  this["set" + _capitalize(props[i3])](obj[props[i3]]);
                }
              }
            }
            StackFrame.prototype = {
              getArgs: function getArgs() {
                return this.args;
              },
              setArgs: function setArgs(v) {
                if (Object.prototype.toString.call(v) !== "[object Array]") {
                  throw new TypeError("Args must be an Array");
                }
                this.args = v;
              },
              getEvalOrigin: function getEvalOrigin() {
                return this.evalOrigin;
              },
              setEvalOrigin: function setEvalOrigin(v) {
                if (v instanceof StackFrame) {
                  this.evalOrigin = v;
                } else if (v instanceof Object) {
                  this.evalOrigin = new StackFrame(v);
                } else {
                  throw new TypeError("Eval Origin must be an Object or StackFrame");
                }
              },
              toString: function toString() {
                var fileName = this.getFileName() || "";
                var lineNumber = this.getLineNumber() || "";
                var columnNumber = this.getColumnNumber() || "";
                var functionName = this.getFunctionName() || "";
                if (this.getIsEval()) {
                  if (fileName) {
                    return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                  }
                  return "[eval]:" + lineNumber + ":" + columnNumber;
                }
                if (functionName) {
                  return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                }
                return fileName + ":" + lineNumber + ":" + columnNumber;
              }
            };
            StackFrame.fromString = function StackFrame$$fromString(str) {
              var argsStartIndex = str.indexOf("(");
              var argsEndIndex = str.lastIndexOf(")");
              var functionName = str.substring(0, argsStartIndex);
              var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
              var locationString = str.substring(argsEndIndex + 1);
              if (locationString.indexOf("@") === 0) {
                var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
                var fileName = parts[1];
                var lineNumber = parts[2];
                var columnNumber = parts[3];
              }
              return new StackFrame({
                functionName,
                args: args || void 0,
                fileName,
                lineNumber: lineNumber || void 0,
                columnNumber: columnNumber || void 0
              });
            };
            for (var i2 = 0; i2 < booleanProps.length; i2++) {
              StackFrame.prototype["get" + _capitalize(booleanProps[i2])] = _getter(booleanProps[i2]);
              StackFrame.prototype["set" + _capitalize(booleanProps[i2])] = function(p) {
                return function(v) {
                  this[p] = Boolean(v);
                };
              }(booleanProps[i2]);
            }
            for (var j = 0; j < numericProps.length; j++) {
              StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
              StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p) {
                return function(v) {
                  if (!_isNumber(v)) {
                    throw new TypeError(p + " must be a Number");
                  }
                  this[p] = Number(v);
                };
              }(numericProps[j]);
            }
            for (var k = 0; k < stringProps.length; k++) {
              StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
              StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p) {
                return function(v) {
                  this[p] = String(v);
                };
              }(stringProps[k]);
            }
            return StackFrame;
          });
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          if (true) {
            module3.exports = __webpack_require__(18);
          } else {
          }
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var l2 = __webpack_require__(1), m = 60103, p = 60106;
          exports3.Fragment = 60107;
          exports3.StrictMode = 60108;
          exports3.Profiler = 60114;
          var q = 60109, r2 = 60110, t2 = 60112;
          exports3.Suspense = 60113;
          exports3.SuspenseList = 60120;
          var u2 = 60115, v = 60116;
          exports3.unstable_DebugTracingMode = 60129;
          exports3.unstable_Offscreen = 60130;
          exports3.unstable_LegacyHidden = 60131;
          exports3.unstable_Cache = 60132;
          if (typeof Symbol === "function" && Symbol.for) {
            var w = Symbol.for;
            m = w("react.element");
            p = w("react.portal");
            exports3.Fragment = w("react.fragment");
            exports3.StrictMode = w("react.strict_mode");
            exports3.Profiler = w("react.profiler");
            q = w("react.provider");
            r2 = w("react.context");
            t2 = w("react.forward_ref");
            exports3.Suspense = w("react.suspense");
            exports3.SuspenseList = w("react.suspense_list");
            u2 = w("react.memo");
            v = w("react.lazy");
            exports3.unstable_DebugTracingMode = w("react.debug_trace_mode");
            exports3.unstable_Offscreen = w("react.offscreen");
            exports3.unstable_LegacyHidden = w("react.legacy_hidden");
            exports3.unstable_Cache = w("react.cache");
          }
          var x = typeof Symbol === "function" && Symbol.iterator;
          function y2(a2) {
            if (a2 === null || _typeof(a2) !== "object")
              return null;
            a2 = x && a2[x] || a2["@@iterator"];
            return typeof a2 === "function" ? a2 : null;
          }
          function z(a2) {
            for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++) {
              b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
            }
            return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
          }
          var A = {
            isMounted: function isMounted() {
              return false;
            },
            enqueueForceUpdate: function enqueueForceUpdate() {
            },
            enqueueReplaceState: function enqueueReplaceState() {
            },
            enqueueSetState: function enqueueSetState() {
            }
          }, B = {};
          function C(a2, b2, c2) {
            this.props = a2;
            this.context = b2;
            this.refs = B;
            this.updater = c2 || A;
          }
          C.prototype.isReactComponent = {};
          C.prototype.setState = function(a2, b2) {
            if (_typeof(a2) !== "object" && typeof a2 !== "function" && a2 != null)
              throw Error(z(85));
            this.updater.enqueueSetState(this, a2, b2, "setState");
          };
          C.prototype.forceUpdate = function(a2) {
            this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
          };
          function D() {
          }
          D.prototype = C.prototype;
          function E(a2, b2, c2) {
            this.props = a2;
            this.context = b2;
            this.refs = B;
            this.updater = c2 || A;
          }
          var F = E.prototype = new D();
          F.constructor = E;
          l2(F, C.prototype);
          F.isPureReactComponent = true;
          var G = Array.isArray, H = Object.prototype.hasOwnProperty, I = {
            current: null
          }, J = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          function K(a2, b2, c2) {
            var e2, d = {}, k = null, h = null;
            if (b2 != null)
              for (e2 in b2.ref !== void 0 && (h = b2.ref), b2.key !== void 0 && (k = "" + b2.key), b2) {
                H.call(b2, e2) && !J.hasOwnProperty(e2) && (d[e2] = b2[e2]);
              }
            var g2 = arguments.length - 2;
            if (g2 === 1)
              d.children = c2;
            else if (1 < g2) {
              for (var f = Array(g2), n2 = 0; n2 < g2; n2++) {
                f[n2] = arguments[n2 + 2];
              }
              d.children = f;
            }
            if (a2 && a2.defaultProps)
              for (e2 in g2 = a2.defaultProps, g2) {
                d[e2] === void 0 && (d[e2] = g2[e2]);
              }
            return {
              $$typeof: m,
              type: a2,
              key: k,
              ref: h,
              props: d,
              _owner: I.current
            };
          }
          function L(a2, b2) {
            return {
              $$typeof: m,
              type: a2.type,
              key: b2,
              ref: a2.ref,
              props: a2.props,
              _owner: a2._owner
            };
          }
          function M(a2) {
            return _typeof(a2) === "object" && a2 !== null && a2.$$typeof === m;
          }
          function escape(a2) {
            var b2 = {
              "=": "=0",
              ":": "=2"
            };
            return "$" + a2.replace(/[=:]/g, function(a3) {
              return b2[a3];
            });
          }
          var N = /\/+/g;
          function O(a2, b2) {
            return _typeof(a2) === "object" && a2 !== null && a2.key != null ? escape("" + a2.key) : b2.toString(36);
          }
          function P(a2, b2, c2, e2, d) {
            var k = _typeof(a2);
            if (k === "undefined" || k === "boolean")
              a2 = null;
            var h = false;
            if (a2 === null)
              h = true;
            else
              switch (k) {
                case "string":
                case "number":
                  h = true;
                  break;
                case "object":
                  switch (a2.$$typeof) {
                    case m:
                    case p:
                      h = true;
                  }
              }
            if (h)
              return h = a2, d = d(h), a2 = e2 === "" ? "." + O(h, 0) : e2, G(d) ? (c2 = "", a2 != null && (c2 = a2.replace(N, "$&/") + "/"), P(d, b2, c2, "", function(a3) {
                return a3;
              })) : d != null && (M(d) && (d = L(d, c2 + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(N, "$&/") + "/") + a2)), b2.push(d)), 1;
            h = 0;
            e2 = e2 === "" ? "." : e2 + ":";
            if (G(a2))
              for (var g2 = 0; g2 < a2.length; g2++) {
                k = a2[g2];
                var f = e2 + O(k, g2);
                h += P(k, b2, c2, f, d);
              }
            else if (f = y2(a2), typeof f === "function")
              for (a2 = f.call(a2), g2 = 0; !(k = a2.next()).done; ) {
                k = k.value, f = e2 + O(k, g2++), h += P(k, b2, c2, f, d);
              }
            else if (k === "object")
              throw b2 = "" + a2, Error(z(31, b2 === "[object Object]" ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2));
            return h;
          }
          function Q(a2, b2, c2) {
            if (a2 == null)
              return a2;
            var e2 = [], d = 0;
            P(a2, e2, "", "", function(a3) {
              return b2.call(c2, a3, d++);
            });
            return e2;
          }
          function R(a2) {
            if (a2._status === -1) {
              var b2 = a2._result;
              b2 = b2();
              b2.then(function(b3) {
                if (a2._status === 0 || a2._status === -1)
                  a2._status = 1, a2._result = b3;
              }, function(b3) {
                if (a2._status === 0 || a2._status === -1)
                  a2._status = 2, a2._result = b3;
              });
              a2._status === -1 && (a2._status = 0, a2._result = b2);
            }
            if (a2._status === 1)
              return a2._result.default;
            throw a2._result;
          }
          var S = {
            current: null
          }, T = {
            transition: 0
          }, U = {
            ReactCurrentDispatcher: S,
            ReactCurrentBatchConfig: T,
            ReactCurrentOwner: I,
            assign: l2
          };
          exports3.Children = {
            map: Q,
            forEach: function forEach(a2, b2, c2) {
              Q(a2, function() {
                b2.apply(this, arguments);
              }, c2);
            },
            count: function count(a2) {
              var b2 = 0;
              Q(a2, function() {
                b2++;
              });
              return b2;
            },
            toArray: function toArray(a2) {
              return Q(a2, function(a3) {
                return a3;
              }) || [];
            },
            only: function only(a2) {
              if (!M(a2))
                throw Error(z(143));
              return a2;
            }
          };
          exports3.Component = C;
          exports3.PureComponent = E;
          exports3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = U;
          exports3.cloneElement = function(a2, b2, c2) {
            if (a2 === null || a2 === void 0)
              throw Error(z(267, a2));
            var e2 = l2({}, a2.props), d = a2.key, k = a2.ref, h = a2._owner;
            if (b2 != null) {
              b2.ref !== void 0 && (k = b2.ref, h = I.current);
              b2.key !== void 0 && (d = "" + b2.key);
              if (a2.type && a2.type.defaultProps)
                var g2 = a2.type.defaultProps;
              for (f in b2) {
                H.call(b2, f) && !J.hasOwnProperty(f) && (e2[f] = b2[f] === void 0 && g2 !== void 0 ? g2[f] : b2[f]);
              }
            }
            var f = arguments.length - 2;
            if (f === 1)
              e2.children = c2;
            else if (1 < f) {
              g2 = Array(f);
              for (var n2 = 0; n2 < f; n2++) {
                g2[n2] = arguments[n2 + 2];
              }
              e2.children = g2;
            }
            return {
              $$typeof: m,
              type: a2.type,
              key: d,
              ref: k,
              props: e2,
              _owner: h
            };
          };
          exports3.createContext = function(a2) {
            a2 = {
              $$typeof: r2,
              _currentValue: a2,
              _currentValue2: a2,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            a2.Provider = {
              $$typeof: q,
              _context: a2
            };
            return a2.Consumer = a2;
          };
          exports3.createElement = K;
          exports3.createFactory = function(a2) {
            var b2 = K.bind(null, a2);
            b2.type = a2;
            return b2;
          };
          exports3.createRef = function() {
            return {
              current: null
            };
          };
          exports3.forwardRef = function(a2) {
            return {
              $$typeof: t2,
              render: a2
            };
          };
          exports3.isValidElement = M;
          exports3.lazy = function(a2) {
            return {
              $$typeof: v,
              _payload: {
                _status: -1,
                _result: a2
              },
              _init: R
            };
          };
          exports3.memo = function(a2, b2) {
            return {
              $$typeof: u2,
              type: a2,
              compare: b2 === void 0 ? null : b2
            };
          };
          exports3.startTransition = function(a2) {
            var b2 = T.transition;
            T.transition = 1;
            try {
              a2();
            } finally {
              T.transition = b2;
            }
          };
          exports3.unstable_act = function() {
            throw Error(z(406));
          };
          exports3.unstable_createMutableSource = function(a2, b2) {
            return {
              _getVersion: b2,
              _source: a2,
              _workInProgressVersionPrimary: null,
              _workInProgressVersionSecondary: null
            };
          };
          exports3.unstable_getCacheForType = function(a2) {
            return S.current.getCacheForType(a2);
          };
          exports3.unstable_useCacheRefresh = function() {
            return S.current.useCacheRefresh();
          };
          exports3.unstable_useMutableSource = function(a2, b2, c2) {
            return S.current.useMutableSource(a2, b2, c2);
          };
          exports3.unstable_useOpaqueIdentifier = function() {
            return S.current.useOpaqueIdentifier();
          };
          exports3.useCallback = function(a2, b2) {
            return S.current.useCallback(a2, b2);
          };
          exports3.useContext = function(a2) {
            return S.current.useContext(a2);
          };
          exports3.useDebugValue = function() {
          };
          exports3.useDeferredValue = function(a2) {
            return S.current.useDeferredValue(a2);
          };
          exports3.useEffect = function(a2, b2) {
            return S.current.useEffect(a2, b2);
          };
          exports3.useImperativeHandle = function(a2, b2, c2) {
            return S.current.useImperativeHandle(a2, b2, c2);
          };
          exports3.useLayoutEffect = function(a2, b2) {
            return S.current.useLayoutEffect(a2, b2);
          };
          exports3.useMemo = function(a2, b2) {
            return S.current.useMemo(a2, b2);
          };
          exports3.useReducer = function(a2, b2, c2) {
            return S.current.useReducer(a2, b2, c2);
          };
          exports3.useRef = function(a2) {
            return S.current.useRef(a2);
          };
          exports3.useState = function(a2) {
            return S.current.useState(a2);
          };
          exports3.useTransition = function() {
            return S.current.useTransition();
          };
          exports3.version = "18.0.0-experimental-b5fbf5464-20210824";
        },
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          __webpack_require__.d(__webpack_exports__, "connectToDevTools", function() {
            return connectToDevTools;
          });
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var EventEmitter = /* @__PURE__ */ function() {
            function EventEmitter2() {
              _classCallCheck(this, EventEmitter2);
              _defineProperty(this, "listenersMap", new Map());
            }
            _createClass(EventEmitter2, [{
              key: "addListener",
              value: function addListener(event, listener) {
                var listeners = this.listenersMap.get(event);
                if (listeners === void 0) {
                  this.listenersMap.set(event, [listener]);
                } else {
                  var index = listeners.indexOf(listener);
                  if (index < 0) {
                    listeners.push(listener);
                  }
                }
              }
            }, {
              key: "emit",
              value: function emit(event) {
                var listeners = this.listenersMap.get(event);
                if (listeners !== void 0) {
                  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }
                  if (listeners.length === 1) {
                    var listener = listeners[0];
                    listener.apply(null, args);
                  } else {
                    var didThrow = false;
                    var caughtError = null;
                    var clonedListeners = Array.from(listeners);
                    for (var i2 = 0; i2 < clonedListeners.length; i2++) {
                      var _listener = clonedListeners[i2];
                      try {
                        _listener.apply(null, args);
                      } catch (error) {
                        if (caughtError === null) {
                          didThrow = true;
                          caughtError = error;
                        }
                      }
                    }
                    if (didThrow) {
                      throw caughtError;
                    }
                  }
                }
              }
            }, {
              key: "removeAllListeners",
              value: function removeAllListeners() {
                this.listenersMap.clear();
              }
            }, {
              key: "removeListener",
              value: function removeListener(event, listener) {
                var listeners = this.listenersMap.get(event);
                if (listeners !== void 0) {
                  var index = listeners.indexOf(listener);
                  if (index >= 0) {
                    listeners.splice(index, 1);
                  }
                }
              }
            }]);
            return EventEmitter2;
          }();
          var lodash_throttle = __webpack_require__(3);
          var lodash_throttle_default = /* @__PURE__ */ __webpack_require__.n(lodash_throttle);
          var __DEBUG__ = false;
          var TREE_OPERATION_ADD = 1;
          var TREE_OPERATION_REMOVE = 2;
          var TREE_OPERATION_REORDER_CHILDREN = 3;
          var TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
          var TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
          var TREE_OPERATION_REMOVE_ROOT = 6;
          var LOCAL_STORAGE_FILTER_PREFERENCES_KEY = "React::DevTools::componentFilters";
          var SESSION_STORAGE_LAST_SELECTION_KEY = "React::DevTools::lastSelection";
          var LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = "React::DevTools::parseHookNames";
          var SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = "React::DevTools::recordChangeDescriptions";
          var SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = "React::DevTools::reloadAndProfile";
          var LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = "React::DevTools::breakOnConsoleErrors";
          var LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = "React::DevTools::appendComponentStack";
          var LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = "React::DevTools::showInlineWarningsAndErrors";
          var LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = "React::DevTools::traceUpdatesEnabled";
          var PROFILER_EXPORT_VERSION = 5;
          var CHANGE_LOG_URL = "https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md";
          var UNSUPPORTED_VERSION_URL = "https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back";
          var REACT_DEVTOOLS_WORKPLACE_URL = "https://fburl.com/react-devtools-workplace-group";
          var THEME_STYLES = {
            light: {
              "--color-attribute-name": "#ef6632",
              "--color-attribute-name-not-editable": "#23272f",
              "--color-attribute-name-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-attribute-value": "#1a1aa6",
              "--color-attribute-value-inverted": "#ffffff",
              "--color-attribute-editable-value": "#1a1aa6",
              "--color-background": "#ffffff",
              "--color-background-hover": "rgba(0, 136, 250, 0.1)",
              "--color-background-inactive": "#e5e5e5",
              "--color-background-invalid": "#fff0f0",
              "--color-background-selected": "#0088fa",
              "--color-button-background": "#ffffff",
              "--color-button-background-focus": "#ededed",
              "--color-button": "#5f6673",
              "--color-button-disabled": "#cfd1d5",
              "--color-button-active": "#0088fa",
              "--color-button-focus": "#23272f",
              "--color-button-hover": "#23272f",
              "--color-border": "#eeeeee",
              "--color-commit-did-not-render-fill": "#cfd1d5",
              "--color-commit-did-not-render-fill-text": "#000000",
              "--color-commit-did-not-render-pattern": "#cfd1d5",
              "--color-commit-did-not-render-pattern-text": "#333333",
              "--color-commit-gradient-0": "#37afa9",
              "--color-commit-gradient-1": "#63b19e",
              "--color-commit-gradient-2": "#80b393",
              "--color-commit-gradient-3": "#97b488",
              "--color-commit-gradient-4": "#abb67d",
              "--color-commit-gradient-5": "#beb771",
              "--color-commit-gradient-6": "#cfb965",
              "--color-commit-gradient-7": "#dfba57",
              "--color-commit-gradient-8": "#efbb49",
              "--color-commit-gradient-9": "#febc38",
              "--color-commit-gradient-text": "#000000",
              "--color-component-name": "#6a51b2",
              "--color-component-name-inverted": "#ffffff",
              "--color-component-badge-background": "rgba(0, 0, 0, 0.1)",
              "--color-component-badge-background-inverted": "rgba(255, 255, 255, 0.25)",
              "--color-component-badge-count": "#777d88",
              "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-console-error-badge-text": "#ffffff",
              "--color-console-error-background": "#fff0f0",
              "--color-console-error-border": "#ffd6d6",
              "--color-console-error-icon": "#eb3941",
              "--color-console-error-text": "#fe2e31",
              "--color-console-warning-badge-text": "#000000",
              "--color-console-warning-background": "#fffbe5",
              "--color-console-warning-border": "#fff5c1",
              "--color-console-warning-icon": "#f4bd00",
              "--color-console-warning-text": "#64460c",
              "--color-context-background": "rgba(0,0,0,.9)",
              "--color-context-background-hover": "rgba(255, 255, 255, 0.1)",
              "--color-context-background-selected": "#178fb9",
              "--color-context-border": "#3d424a",
              "--color-context-text": "#ffffff",
              "--color-context-text-selected": "#ffffff",
              "--color-dim": "#777d88",
              "--color-dimmer": "#cfd1d5",
              "--color-dimmest": "#eff0f1",
              "--color-error-background": "hsl(0, 100%, 97%)",
              "--color-error-border": "hsl(0, 100%, 92%)",
              "--color-error-text": "#ff0000",
              "--color-expand-collapse-toggle": "#777d88",
              "--color-link": "#0000ff",
              "--color-modal-background": "rgba(255, 255, 255, 0.75)",
              "--color-bridge-version-npm-background": "#eff0f1",
              "--color-bridge-version-npm-text": "#000000",
              "--color-bridge-version-number": "#0088fa",
              "--color-primitive-hook-badge-background": "#e5e5e5",
              "--color-primitive-hook-badge-text": "#5f6673",
              "--color-record-active": "#fc3a4b",
              "--color-record-hover": "#3578e5",
              "--color-record-inactive": "#0088fa",
              "--color-resize-bar": "#eeeeee",
              "--color-resize-bar-active": "#dcdcdc",
              "--color-resize-bar-border": "#d1d1d1",
              "--color-resize-bar-dot": "#333333",
              "--color-scheduling-profiler-native-event": "#ccc",
              "--color-scheduling-profiler-native-event-hover": "#aaa",
              "--color-scheduling-profiler-network-primary": "#fcf3dc",
              "--color-scheduling-profiler-network-primary-hover": "#f0e7d1",
              "--color-scheduling-profiler-network-secondary": "#efc457",
              "--color-scheduling-profiler-network-secondary-hover": "#e3ba52",
              "--color-scheduling-profiler-priority-background": "#f6f6f6",
              "--color-scheduling-profiler-priority-border": "#eeeeee",
              "--color-scheduling-profiler-user-timing": "#c9cacd",
              "--color-scheduling-profiler-user-timing-hover": "#93959a",
              "--color-scheduling-profiler-react-idle": "#d3e5f6",
              "--color-scheduling-profiler-react-idle-hover": "#c3d9ef",
              "--color-scheduling-profiler-react-render": "#9fc3f3",
              "--color-scheduling-profiler-react-render-hover": "#83afe9",
              "--color-scheduling-profiler-react-render-text": "#11365e",
              "--color-scheduling-profiler-react-commit": "#c88ff0",
              "--color-scheduling-profiler-react-commit-hover": "#b281d6",
              "--color-scheduling-profiler-react-commit-text": "#3e2c4a",
              "--color-scheduling-profiler-react-layout-effects": "#b281d6",
              "--color-scheduling-profiler-react-layout-effects-hover": "#9d71bd",
              "--color-scheduling-profiler-react-layout-effects-text": "#3e2c4a",
              "--color-scheduling-profiler-react-passive-effects": "#b281d6",
              "--color-scheduling-profiler-react-passive-effects-hover": "#9d71bd",
              "--color-scheduling-profiler-react-passive-effects-text": "#3e2c4a",
              "--color-scheduling-profiler-react-schedule": "#9fc3f3",
              "--color-scheduling-profiler-react-schedule-hover": "#2683E2",
              "--color-scheduling-profiler-react-suspense-rejected": "#f1cc14",
              "--color-scheduling-profiler-react-suspense-rejected-hover": "#ffdf37",
              "--color-scheduling-profiler-react-suspense-resolved": "#a6e59f",
              "--color-scheduling-profiler-react-suspense-resolved-hover": "#89d281",
              "--color-scheduling-profiler-react-suspense-unresolved": "#c9cacd",
              "--color-scheduling-profiler-react-suspense-unresolved-hover": "#93959a",
              "--color-scheduling-profiler-text-color": "#000000",
              "--color-scheduling-profiler-text-dim-color": "#ccc",
              "--color-scheduling-profiler-react-work-border": "#ffffff",
              "--color-search-match": "yellow",
              "--color-search-match-current": "#f7923b",
              "--color-selected-tree-highlight-active": "rgba(0, 136, 250, 0.1)",
              "--color-selected-tree-highlight-inactive": "rgba(0, 0, 0, 0.05)",
              "--color-scroll-caret": "rgba(150, 150, 150, 0.5)",
              "--color-tab-selected-border": "#0088fa",
              "--color-text": "#000000",
              "--color-text-invalid": "#ff0000",
              "--color-text-selected": "#ffffff",
              "--color-toggle-background-invalid": "#fc3a4b",
              "--color-toggle-background-on": "#0088fa",
              "--color-toggle-background-off": "#cfd1d5",
              "--color-toggle-text": "#ffffff",
              "--color-warning-background": "#fb3655",
              "--color-warning-background-hover": "#f82042",
              "--color-warning-text-color": "#ffffff",
              "--color-warning-text-color-inverted": "#fd4d69",
              "--color-scroll-thumb": "#c2c2c2",
              "--color-scroll-track": "#fafafa",
              "--color-tooltip-background": "rgba(0, 0, 0, 0.9)",
              "--color-tooltip-text": "#ffffff"
            },
            dark: {
              "--color-attribute-name": "#9d87d2",
              "--color-attribute-name-not-editable": "#ededed",
              "--color-attribute-name-inverted": "#282828",
              "--color-attribute-value": "#cedae0",
              "--color-attribute-value-inverted": "#ffffff",
              "--color-attribute-editable-value": "yellow",
              "--color-background": "#282c34",
              "--color-background-hover": "rgba(255, 255, 255, 0.1)",
              "--color-background-inactive": "#3d424a",
              "--color-background-invalid": "#5c0000",
              "--color-background-selected": "#178fb9",
              "--color-button-background": "#282c34",
              "--color-button-background-focus": "#3d424a",
              "--color-button": "#afb3b9",
              "--color-button-active": "#61dafb",
              "--color-button-disabled": "#4f5766",
              "--color-button-focus": "#a2e9fc",
              "--color-button-hover": "#ededed",
              "--color-border": "#3d424a",
              "--color-commit-did-not-render-fill": "#777d88",
              "--color-commit-did-not-render-fill-text": "#000000",
              "--color-commit-did-not-render-pattern": "#666c77",
              "--color-commit-did-not-render-pattern-text": "#ffffff",
              "--color-commit-gradient-0": "#37afa9",
              "--color-commit-gradient-1": "#63b19e",
              "--color-commit-gradient-2": "#80b393",
              "--color-commit-gradient-3": "#97b488",
              "--color-commit-gradient-4": "#abb67d",
              "--color-commit-gradient-5": "#beb771",
              "--color-commit-gradient-6": "#cfb965",
              "--color-commit-gradient-7": "#dfba57",
              "--color-commit-gradient-8": "#efbb49",
              "--color-commit-gradient-9": "#febc38",
              "--color-commit-gradient-text": "#000000",
              "--color-component-name": "#61dafb",
              "--color-component-name-inverted": "#282828",
              "--color-component-badge-background": "rgba(255, 255, 255, 0.25)",
              "--color-component-badge-background-inverted": "rgba(0, 0, 0, 0.25)",
              "--color-component-badge-count": "#8f949d",
              "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.7)",
              "--color-console-error-badge-text": "#000000",
              "--color-console-error-background": "#290000",
              "--color-console-error-border": "#5c0000",
              "--color-console-error-icon": "#eb3941",
              "--color-console-error-text": "#fc7f7f",
              "--color-console-warning-badge-text": "#000000",
              "--color-console-warning-background": "#332b00",
              "--color-console-warning-border": "#665500",
              "--color-console-warning-icon": "#f4bd00",
              "--color-console-warning-text": "#f5f2ed",
              "--color-context-background": "rgba(255,255,255,.95)",
              "--color-context-background-hover": "rgba(0, 136, 250, 0.1)",
              "--color-context-background-selected": "#0088fa",
              "--color-context-border": "#eeeeee",
              "--color-context-text": "#000000",
              "--color-context-text-selected": "#ffffff",
              "--color-dim": "#8f949d",
              "--color-dimmer": "#777d88",
              "--color-dimmest": "#4f5766",
              "--color-error-background": "#200",
              "--color-error-border": "#900",
              "--color-error-text": "#f55",
              "--color-expand-collapse-toggle": "#8f949d",
              "--color-link": "#61dafb",
              "--color-modal-background": "rgba(0, 0, 0, 0.75)",
              "--color-bridge-version-npm-background": "rgba(0, 0, 0, 0.25)",
              "--color-bridge-version-npm-text": "#ffffff",
              "--color-bridge-version-number": "yellow",
              "--color-primitive-hook-badge-background": "rgba(0, 0, 0, 0.25)",
              "--color-primitive-hook-badge-text": "rgba(255, 255, 255, 0.7)",
              "--color-record-active": "#fc3a4b",
              "--color-record-hover": "#a2e9fc",
              "--color-record-inactive": "#61dafb",
              "--color-resize-bar": "#282c34",
              "--color-resize-bar-active": "#31363f",
              "--color-resize-bar-border": "#3d424a",
              "--color-resize-bar-dot": "#cfd1d5",
              "--color-scheduling-profiler-native-event": "#b2b2b2",
              "--color-scheduling-profiler-native-event-hover": "#949494",
              "--color-scheduling-profiler-network-primary": "#fcf3dc",
              "--color-scheduling-profiler-network-primary-hover": "#e3dbc5",
              "--color-scheduling-profiler-network-secondary": "#efc457",
              "--color-scheduling-profiler-network-secondary-hover": "#d6af4d",
              "--color-scheduling-profiler-priority-background": "#1d2129",
              "--color-scheduling-profiler-priority-border": "#282c34",
              "--color-scheduling-profiler-user-timing": "#c9cacd",
              "--color-scheduling-profiler-user-timing-hover": "#93959a",
              "--color-scheduling-profiler-react-idle": "#3d485b",
              "--color-scheduling-profiler-react-idle-hover": "#465269",
              "--color-scheduling-profiler-react-render": "#2683E2",
              "--color-scheduling-profiler-react-render-hover": "#1a76d4",
              "--color-scheduling-profiler-react-render-text": "#11365e",
              "--color-scheduling-profiler-react-commit": "#731fad",
              "--color-scheduling-profiler-react-commit-hover": "#611b94",
              "--color-scheduling-profiler-react-commit-text": "#e5c1ff",
              "--color-scheduling-profiler-react-layout-effects": "#611b94",
              "--color-scheduling-profiler-react-layout-effects-hover": "#51167a",
              "--color-scheduling-profiler-react-layout-effects-text": "#e5c1ff",
              "--color-scheduling-profiler-react-passive-effects": "#611b94",
              "--color-scheduling-profiler-react-passive-effects-hover": "#51167a",
              "--color-scheduling-profiler-react-passive-effects-text": "#e5c1ff",
              "--color-scheduling-profiler-react-schedule": "#2683E2",
              "--color-scheduling-profiler-react-schedule-hover": "#1a76d4",
              "--color-scheduling-profiler-react-suspense-rejected": "#f1cc14",
              "--color-scheduling-profiler-react-suspense-rejected-hover": "#e4c00f",
              "--color-scheduling-profiler-react-suspense-resolved": "#a6e59f",
              "--color-scheduling-profiler-react-suspense-resolved-hover": "#89d281",
              "--color-scheduling-profiler-react-suspense-unresolved": "#c9cacd",
              "--color-scheduling-profiler-react-suspense-unresolved-hover": "#93959a",
              "--color-scheduling-profiler-text-color": "#282c34",
              "--color-scheduling-profiler-text-dim-color": "#555b66",
              "--color-scheduling-profiler-react-work-border": "#ffffff",
              "--color-search-match": "yellow",
              "--color-search-match-current": "#f7923b",
              "--color-selected-tree-highlight-active": "rgba(23, 143, 185, 0.15)",
              "--color-selected-tree-highlight-inactive": "rgba(255, 255, 255, 0.05)",
              "--color-scroll-caret": "#4f5766",
              "--color-shadow": "rgba(0, 0, 0, 0.5)",
              "--color-tab-selected-border": "#178fb9",
              "--color-text": "#ffffff",
              "--color-text-invalid": "#ff8080",
              "--color-text-selected": "#ffffff",
              "--color-toggle-background-invalid": "#fc3a4b",
              "--color-toggle-background-on": "#178fb9",
              "--color-toggle-background-off": "#777d88",
              "--color-toggle-text": "#ffffff",
              "--color-warning-background": "#ee1638",
              "--color-warning-background-hover": "#da1030",
              "--color-warning-text-color": "#ffffff",
              "--color-warning-text-color-inverted": "#ee1638",
              "--color-scroll-thumb": "#afb3b9",
              "--color-scroll-track": "#313640",
              "--color-tooltip-background": "rgba(255, 255, 255, 0.95)",
              "--color-tooltip-text": "#000000"
            },
            compact: {
              "--font-size-monospace-small": "9px",
              "--font-size-monospace-normal": "11px",
              "--font-size-monospace-large": "15px",
              "--font-size-sans-small": "10px",
              "--font-size-sans-normal": "12px",
              "--font-size-sans-large": "14px",
              "--line-height-data": "18px"
            },
            comfortable: {
              "--font-size-monospace-small": "10px",
              "--font-size-monospace-normal": "13px",
              "--font-size-monospace-large": "17px",
              "--font-size-sans-small": "12px",
              "--font-size-sans-normal": "14px",
              "--font-size-sans-large": "16px",
              "--line-height-data": "22px"
            }
          };
          var COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable["--line-height-data"], 10);
          var COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact["--line-height-data"], 10);
          function localStorageGetItem(key) {
            try {
              return localStorage.getItem(key);
            } catch (error) {
              return null;
            }
          }
          function localStorageRemoveItem(key) {
            try {
              localStorage.removeItem(key);
            } catch (error) {
            }
          }
          function localStorageSetItem(key, value) {
            try {
              return localStorage.setItem(key, value);
            } catch (error) {
            }
          }
          function sessionStorageGetItem(key) {
            try {
              return sessionStorage.getItem(key);
            } catch (error) {
              return null;
            }
          }
          function sessionStorageRemoveItem(key) {
            try {
              sessionStorage.removeItem(key);
            } catch (error) {
            }
          }
          function sessionStorageSetItem(key, value) {
            try {
              return sessionStorage.setItem(key, value);
            } catch (error) {
            }
          }
          var simpleIsEqual = function simpleIsEqual2(a2, b2) {
            return a2 === b2;
          };
          var esm = function(resultFn) {
            var isEqual = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : simpleIsEqual;
            var lastThis = void 0;
            var lastArgs = [];
            var lastResult = void 0;
            var calledOnce = false;
            var isNewArgEqualToLast = function isNewArgEqualToLast2(newArg, index) {
              return isEqual(newArg, lastArgs[index]);
            };
            var result = function result2() {
              for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
                newArgs[_key] = arguments[_key];
              }
              if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
                return lastResult;
              }
              calledOnce = true;
              lastThis = this;
              lastArgs = newArgs;
              lastResult = resultFn.apply(this, newArgs);
              return lastResult;
            };
            return result;
          };
          var object_assign = __webpack_require__(1);
          var object_assign_default = /* @__PURE__ */ __webpack_require__.n(object_assign);
          function getOwnerWindow(node) {
            if (!node.ownerDocument) {
              return null;
            }
            return node.ownerDocument.defaultView;
          }
          function getOwnerIframe(node) {
            var nodeWindow = getOwnerWindow(node);
            if (nodeWindow) {
              return nodeWindow.frameElement;
            }
            return null;
          }
          function getBoundingClientRectWithBorderOffset(node) {
            var dimensions = getElementDimensions(node);
            return mergeRectOffsets([node.getBoundingClientRect(), {
              top: dimensions.borderTop,
              left: dimensions.borderLeft,
              bottom: dimensions.borderBottom,
              right: dimensions.borderRight,
              width: 0,
              height: 0
            }]);
          }
          function mergeRectOffsets(rects) {
            return rects.reduce(function(previousRect, rect) {
              if (previousRect == null) {
                return rect;
              }
              return {
                top: previousRect.top + rect.top,
                left: previousRect.left + rect.left,
                width: previousRect.width,
                height: previousRect.height,
                bottom: previousRect.bottom + rect.bottom,
                right: previousRect.right + rect.right
              };
            });
          }
          function getNestedBoundingClientRect(node, boundaryWindow) {
            var ownerIframe = getOwnerIframe(node);
            if (ownerIframe && ownerIframe !== boundaryWindow) {
              var rects = [node.getBoundingClientRect()];
              var currentIframe = ownerIframe;
              var onlyOneMore = false;
              while (currentIframe) {
                var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                rects.push(rect);
                currentIframe = getOwnerIframe(currentIframe);
                if (onlyOneMore) {
                  break;
                }
                if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {
                  onlyOneMore = true;
                }
              }
              return mergeRectOffsets(rects);
            } else {
              return node.getBoundingClientRect();
            }
          }
          function getElementDimensions(domElement) {
            var calculatedStyle = window.getComputedStyle(domElement);
            return {
              borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),
              borderRight: parseInt(calculatedStyle.borderRightWidth, 10),
              borderTop: parseInt(calculatedStyle.borderTopWidth, 10),
              borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),
              marginLeft: parseInt(calculatedStyle.marginLeft, 10),
              marginRight: parseInt(calculatedStyle.marginRight, 10),
              marginTop: parseInt(calculatedStyle.marginTop, 10),
              marginBottom: parseInt(calculatedStyle.marginBottom, 10),
              paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),
              paddingRight: parseInt(calculatedStyle.paddingRight, 10),
              paddingTop: parseInt(calculatedStyle.paddingTop, 10),
              paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)
            };
          }
          function _createForOfIteratorHelper(o2, allowArrayLike) {
            var it;
            if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
              if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
                if (it)
                  o2 = it;
                var i2 = 0;
                var F = function F2() {
                };
                return { s: F, n: function n2() {
                  if (i2 >= o2.length)
                    return { done: true };
                  return { done: false, value: o2[i2++] };
                }, e: function e2(_e) {
                  throw _e;
                }, f: F };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var normalCompletion = true, didErr = false, err;
            return { s: function s2() {
              it = o2[Symbol.iterator]();
            }, n: function n2() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
            }, e: function e2(_e2) {
              didErr = true;
              err = _e2;
            }, f: function f() {
              try {
                if (!normalCompletion && it.return != null)
                  it.return();
              } finally {
                if (didErr)
                  throw err;
              }
            } };
          }
          function _unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return _arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return _arrayLikeToArray(o2, minLen);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function Overlay_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function Overlay_defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function Overlay_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              Overlay_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              Overlay_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          var Overlay_OverlayRect = /* @__PURE__ */ function() {
            function OverlayRect(doc, container) {
              Overlay_classCallCheck(this, OverlayRect);
              this.node = doc.createElement("div");
              this.border = doc.createElement("div");
              this.padding = doc.createElement("div");
              this.content = doc.createElement("div");
              this.border.style.borderColor = overlayStyles.border;
              this.padding.style.borderColor = overlayStyles.padding;
              this.content.style.backgroundColor = overlayStyles.background;
              object_assign_default()(this.node.style, {
                borderColor: overlayStyles.margin,
                pointerEvents: "none",
                position: "fixed"
              });
              this.node.style.zIndex = "10000000";
              this.node.appendChild(this.border);
              this.border.appendChild(this.padding);
              this.padding.appendChild(this.content);
              container.appendChild(this.node);
            }
            Overlay_createClass(OverlayRect, [{
              key: "remove",
              value: function remove() {
                if (this.node.parentNode) {
                  this.node.parentNode.removeChild(this.node);
                }
              }
            }, {
              key: "update",
              value: function update(box, dims) {
                boxWrap(dims, "margin", this.node);
                boxWrap(dims, "border", this.border);
                boxWrap(dims, "padding", this.padding);
                object_assign_default()(this.content.style, {
                  height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                  width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                });
                object_assign_default()(this.node.style, {
                  top: box.top - dims.marginTop + "px",
                  left: box.left - dims.marginLeft + "px"
                });
              }
            }]);
            return OverlayRect;
          }();
          var Overlay_OverlayTip = /* @__PURE__ */ function() {
            function OverlayTip(doc, container) {
              Overlay_classCallCheck(this, OverlayTip);
              this.tip = doc.createElement("div");
              object_assign_default()(this.tip.style, {
                display: "flex",
                flexFlow: "row nowrap",
                backgroundColor: "#333740",
                borderRadius: "2px",
                fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
                fontWeight: "bold",
                padding: "3px 5px",
                pointerEvents: "none",
                position: "fixed",
                fontSize: "12px",
                whiteSpace: "nowrap"
              });
              this.nameSpan = doc.createElement("span");
              this.tip.appendChild(this.nameSpan);
              object_assign_default()(this.nameSpan.style, {
                color: "#ee78e6",
                borderRight: "1px solid #aaaaaa",
                paddingRight: "0.5rem",
                marginRight: "0.5rem"
              });
              this.dimSpan = doc.createElement("span");
              this.tip.appendChild(this.dimSpan);
              object_assign_default()(this.dimSpan.style, {
                color: "#d7d7d7"
              });
              this.tip.style.zIndex = "10000000";
              container.appendChild(this.tip);
            }
            Overlay_createClass(OverlayTip, [{
              key: "remove",
              value: function remove() {
                if (this.tip.parentNode) {
                  this.tip.parentNode.removeChild(this.tip);
                }
              }
            }, {
              key: "updateText",
              value: function updateText(name, width, height) {
                this.nameSpan.textContent = name;
                this.dimSpan.textContent = Math.round(width) + "px \xD7 " + Math.round(height) + "px";
              }
            }, {
              key: "updatePosition",
              value: function updatePosition(dims, bounds) {
                var tipRect = this.tip.getBoundingClientRect();
                var tipPos = findTipPos(dims, bounds, {
                  width: tipRect.width,
                  height: tipRect.height
                });
                object_assign_default()(this.tip.style, tipPos.style);
              }
            }]);
            return OverlayTip;
          }();
          var Overlay_Overlay = /* @__PURE__ */ function() {
            function Overlay() {
              Overlay_classCallCheck(this, Overlay);
              var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
              this.window = currentWindow;
              var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
              this.tipBoundsWindow = tipBoundsWindow;
              var doc = currentWindow.document;
              this.container = doc.createElement("div");
              this.container.style.zIndex = "10000000";
              this.tip = new Overlay_OverlayTip(doc, this.container);
              this.rects = [];
              doc.body.appendChild(this.container);
            }
            Overlay_createClass(Overlay, [{
              key: "remove",
              value: function remove() {
                this.tip.remove();
                this.rects.forEach(function(rect) {
                  rect.remove();
                });
                this.rects.length = 0;
                if (this.container.parentNode) {
                  this.container.parentNode.removeChild(this.container);
                }
              }
            }, {
              key: "inspect",
              value: function inspect(nodes, name) {
                var _this = this;
                var elements = nodes.filter(function(node2) {
                  return node2.nodeType === Node.ELEMENT_NODE;
                });
                while (this.rects.length > elements.length) {
                  var rect = this.rects.pop();
                  rect.remove();
                }
                if (elements.length === 0) {
                  return;
                }
                while (this.rects.length < elements.length) {
                  this.rects.push(new Overlay_OverlayRect(this.window.document, this.container));
                }
                var outerBox = {
                  top: Number.POSITIVE_INFINITY,
                  right: Number.NEGATIVE_INFINITY,
                  bottom: Number.NEGATIVE_INFINITY,
                  left: Number.POSITIVE_INFINITY
                };
                elements.forEach(function(element, index) {
                  var box = getNestedBoundingClientRect(element, _this.window);
                  var dims = getElementDimensions(element);
                  outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);
                  outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);
                  outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);
                  outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);
                  var rect2 = _this.rects[index];
                  rect2.update(box, dims);
                });
                if (!name) {
                  name = elements[0].nodeName.toLowerCase();
                  var node = elements[0];
                  var hook = node.ownerDocument.defaultView.__REACT_DEVTOOLS_GLOBAL_HOOK__;
                  if (hook != null && hook.rendererInterfaces != null) {
                    var ownerName = null;
                    var _iterator = _createForOfIteratorHelper(hook.rendererInterfaces.values()), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var rendererInterface = _step.value;
                        var id = rendererInterface.getFiberIDForNative(node, true);
                        if (id !== null) {
                          ownerName = rendererInterface.getDisplayNameForFiberID(id, true);
                          break;
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (ownerName) {
                      name += " (in " + ownerName + ")";
                    }
                  }
                }
                this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);
                var tipBounds = getNestedBoundingClientRect(this.tipBoundsWindow.document.documentElement, this.window);
                this.tip.updatePosition({
                  top: outerBox.top,
                  left: outerBox.left,
                  height: outerBox.bottom - outerBox.top,
                  width: outerBox.right - outerBox.left
                }, {
                  top: tipBounds.top + this.tipBoundsWindow.scrollY,
                  left: tipBounds.left + this.tipBoundsWindow.scrollX,
                  height: this.tipBoundsWindow.innerHeight,
                  width: this.tipBoundsWindow.innerWidth
                });
              }
            }]);
            return Overlay;
          }();
          function findTipPos(dims, bounds, tipSize) {
            var tipHeight = Math.max(tipSize.height, 20);
            var tipWidth = Math.max(tipSize.width, 60);
            var margin = 5;
            var top;
            if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {
              if (dims.top + dims.height < bounds.top + 0) {
                top = bounds.top + margin;
              } else {
                top = dims.top + dims.height + margin;
              }
            } else if (dims.top - tipHeight <= bounds.top + bounds.height) {
              if (dims.top - tipHeight - margin < bounds.top + margin) {
                top = bounds.top + margin;
              } else {
                top = dims.top - tipHeight - margin;
              }
            } else {
              top = bounds.top + bounds.height - tipHeight - margin;
            }
            var left = dims.left + margin;
            if (dims.left < bounds.left) {
              left = bounds.left + margin;
            }
            if (dims.left + tipWidth > bounds.left + bounds.width) {
              left = bounds.left + bounds.width - tipWidth - margin;
            }
            top += "px";
            left += "px";
            return {
              style: {
                top,
                left
              }
            };
          }
          function boxWrap(dims, what, node) {
            object_assign_default()(node.style, {
              borderTopWidth: dims[what + "Top"] + "px",
              borderLeftWidth: dims[what + "Left"] + "px",
              borderRightWidth: dims[what + "Right"] + "px",
              borderBottomWidth: dims[what + "Bottom"] + "px",
              borderStyle: "solid"
            });
          }
          var overlayStyles = {
            background: "rgba(120, 170, 210, 0.7)",
            padding: "rgba(77, 200, 0, 0.3)",
            margin: "rgba(255, 155, 0, 0.3)",
            border: "rgba(255, 200, 50, 0.3)"
          };
          var SHOW_DURATION = 2e3;
          var timeoutID = null;
          var overlay = null;
          function hideOverlay() {
            timeoutID = null;
            if (overlay !== null) {
              overlay.remove();
              overlay = null;
            }
          }
          function showOverlay(elements, componentName, hideAfterTimeout) {
            if (window.document == null) {
              return;
            }
            if (timeoutID !== null) {
              clearTimeout(timeoutID);
            }
            if (elements == null) {
              return;
            }
            if (overlay === null) {
              overlay = new Overlay_Overlay();
            }
            overlay.inspect(elements, componentName);
            if (hideAfterTimeout) {
              timeoutID = setTimeout(hideOverlay, SHOW_DURATION);
            }
          }
          var iframesListeningTo = new Set();
          function setupHighlighter(bridge, agent) {
            bridge.addListener("clearNativeElementHighlight", clearNativeElementHighlight);
            bridge.addListener("highlightNativeElement", highlightNativeElement);
            bridge.addListener("shutdown", stopInspectingNative);
            bridge.addListener("startInspectingNative", startInspectingNative);
            bridge.addListener("stopInspectingNative", stopInspectingNative);
            function startInspectingNative() {
              registerListenersOnWindow(window);
            }
            function registerListenersOnWindow(window2) {
              if (window2 && typeof window2.addEventListener === "function") {
                window2.addEventListener("click", onClick, true);
                window2.addEventListener("mousedown", onMouseEvent, true);
                window2.addEventListener("mouseover", onMouseEvent, true);
                window2.addEventListener("mouseup", onMouseEvent, true);
                window2.addEventListener("pointerdown", onPointerDown, true);
                window2.addEventListener("pointerover", onPointerOver, true);
                window2.addEventListener("pointerup", onPointerUp, true);
              }
            }
            function stopInspectingNative() {
              hideOverlay();
              removeListenersOnWindow(window);
              iframesListeningTo.forEach(function(frame) {
                try {
                  removeListenersOnWindow(frame.contentWindow);
                } catch (error) {
                }
              });
              iframesListeningTo = new Set();
            }
            function removeListenersOnWindow(window2) {
              if (window2 && typeof window2.removeEventListener === "function") {
                window2.removeEventListener("click", onClick, true);
                window2.removeEventListener("mousedown", onMouseEvent, true);
                window2.removeEventListener("mouseover", onMouseEvent, true);
                window2.removeEventListener("mouseup", onMouseEvent, true);
                window2.removeEventListener("pointerdown", onPointerDown, true);
                window2.removeEventListener("pointerover", onPointerOver, true);
                window2.removeEventListener("pointerup", onPointerUp, true);
              }
            }
            function clearNativeElementHighlight() {
              hideOverlay();
            }
            function highlightNativeElement(_ref) {
              var displayName = _ref.displayName, hideAfterTimeout = _ref.hideAfterTimeout, id = _ref.id, openNativeElementsPanel = _ref.openNativeElementsPanel, rendererID = _ref.rendererID, scrollIntoView = _ref.scrollIntoView;
              var renderer = agent.rendererInterfaces[rendererID];
              if (renderer == null) {
                console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
              }
              var nodes = null;
              if (renderer != null) {
                nodes = renderer.findNativeNodesForFiberID(id);
              }
              if (nodes != null && nodes[0] != null) {
                var node = nodes[0];
                if (scrollIntoView && typeof node.scrollIntoView === "function") {
                  node.scrollIntoView({
                    block: "nearest",
                    inline: "nearest"
                  });
                }
                showOverlay(nodes, displayName, hideAfterTimeout);
                if (openNativeElementsPanel) {
                  window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;
                  bridge.send("syncSelectionToNativeElementsPanel");
                }
              } else {
                hideOverlay();
              }
            }
            function onClick(event) {
              event.preventDefault();
              event.stopPropagation();
              stopInspectingNative();
              bridge.send("stopInspectingNative", true);
            }
            function onMouseEvent(event) {
              event.preventDefault();
              event.stopPropagation();
            }
            function onPointerDown(event) {
              event.preventDefault();
              event.stopPropagation();
              selectFiberForNode(event.target);
            }
            function onPointerOver(event) {
              event.preventDefault();
              event.stopPropagation();
              var target = event.target;
              if (target.tagName === "IFRAME") {
                var iframe = target;
                try {
                  if (!iframesListeningTo.has(iframe)) {
                    var _window = iframe.contentWindow;
                    registerListenersOnWindow(_window);
                    iframesListeningTo.add(iframe);
                  }
                } catch (error) {
                }
              }
              showOverlay([target], null, false);
              selectFiberForNode(target);
            }
            function onPointerUp(event) {
              event.preventDefault();
              event.stopPropagation();
            }
            var selectFiberForNode = lodash_throttle_default()(esm(function(node) {
              var id = agent.getIDForNode(node);
              if (id !== null) {
                bridge.send("selectFiber", id);
              }
            }), 200, {
              leading: false
            });
          }
          var OUTLINE_COLOR = "#f0f0f0";
          var COLORS = ["#37afa9", "#63b19e", "#80b393", "#97b488", "#abb67d", "#beb771", "#cfb965", "#dfba57", "#efbb49", "#febc38"];
          var canvas = null;
          function draw(nodeToData2) {
            if (canvas === null) {
              initialize();
            }
            var canvasFlow = canvas;
            canvasFlow.width = window.innerWidth;
            canvasFlow.height = window.innerHeight;
            var context = canvasFlow.getContext("2d");
            context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
            nodeToData2.forEach(function(_ref) {
              var count = _ref.count, rect = _ref.rect;
              if (rect !== null) {
                var colorIndex = Math.min(COLORS.length - 1, count - 1);
                var color = COLORS[colorIndex];
                drawBorder(context, rect, color);
              }
            });
          }
          function drawBorder(context, rect, color) {
            var height = rect.height, left = rect.left, top = rect.top, width = rect.width;
            context.lineWidth = 1;
            context.strokeStyle = OUTLINE_COLOR;
            context.strokeRect(left - 1, top - 1, width + 2, height + 2);
            context.lineWidth = 1;
            context.strokeStyle = OUTLINE_COLOR;
            context.strokeRect(left + 1, top + 1, width - 1, height - 1);
            context.strokeStyle = color;
            context.setLineDash([0]);
            context.lineWidth = 1;
            context.strokeRect(left, top, width - 1, height - 1);
            context.setLineDash([0]);
          }
          function destroy() {
            if (canvas !== null) {
              if (canvas.parentNode != null) {
                canvas.parentNode.removeChild(canvas);
              }
              canvas = null;
            }
          }
          function initialize() {
            canvas = window.document.createElement("canvas");
            canvas.style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
            var root = window.document.documentElement;
            root.insertBefore(canvas, root.firstChild);
          }
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var DISPLAY_DURATION = 250;
          var MAX_DISPLAY_DURATION = 3e3;
          var REMEASUREMENT_AFTER_DURATION = 250;
          var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && typeof performance.now === "function" ? function() {
            return performance.now();
          } : function() {
            return Date.now();
          };
          var nodeToData = new Map();
          var TraceUpdates_agent = null;
          var drawAnimationFrameID = null;
          var isEnabled = false;
          var redrawTimeoutID = null;
          function TraceUpdates_initialize(injectedAgent) {
            TraceUpdates_agent = injectedAgent;
            TraceUpdates_agent.addListener("traceUpdates", traceUpdates);
          }
          function toggleEnabled(value) {
            isEnabled = value;
            if (!isEnabled) {
              nodeToData.clear();
              if (drawAnimationFrameID !== null) {
                cancelAnimationFrame(drawAnimationFrameID);
                drawAnimationFrameID = null;
              }
              if (redrawTimeoutID !== null) {
                clearTimeout(redrawTimeoutID);
                redrawTimeoutID = null;
              }
              destroy();
            }
          }
          function traceUpdates(nodes) {
            if (!isEnabled) {
              return;
            }
            nodes.forEach(function(node) {
              var data = nodeToData.get(node);
              var now = getCurrentTime();
              var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;
              var rect = data != null ? data.rect : null;
              if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {
                lastMeasuredAt = now;
                rect = measureNode(node);
              }
              nodeToData.set(node, {
                count: data != null ? data.count + 1 : 1,
                expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,
                lastMeasuredAt,
                rect
              });
            });
            if (redrawTimeoutID !== null) {
              clearTimeout(redrawTimeoutID);
              redrawTimeoutID = null;
            }
            if (drawAnimationFrameID === null) {
              drawAnimationFrameID = requestAnimationFrame(prepareToDraw);
            }
          }
          function prepareToDraw() {
            drawAnimationFrameID = null;
            redrawTimeoutID = null;
            var now = getCurrentTime();
            var earliestExpiration = Number.MAX_VALUE;
            nodeToData.forEach(function(data, node) {
              if (data.expirationTime < now) {
                nodeToData.delete(node);
              } else {
                earliestExpiration = Math.min(earliestExpiration, data.expirationTime);
              }
            });
            draw(nodeToData);
            if (earliestExpiration !== Number.MAX_VALUE) {
              redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);
            }
          }
          function measureNode(node) {
            if (!node || typeof node.getBoundingClientRect !== "function") {
              return null;
            }
            var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
            return getNestedBoundingClientRect(node, currentWindow);
          }
          var semver = __webpack_require__(2);
          var ElementTypeClass = 1;
          var ElementTypeContext = 2;
          var ElementTypeFunction = 5;
          var ElementTypeForwardRef = 6;
          var ElementTypeHostComponent = 7;
          var ElementTypeMemo = 8;
          var ElementTypeOtherOrUnknown = 9;
          var ElementTypeProfiler = 10;
          var ElementTypeRoot = 11;
          var ElementTypeSuspense = 12;
          var ElementTypeSuspenseList = 13;
          var ComponentFilterElementType = 1;
          var ComponentFilterDisplayName = 2;
          var ComponentFilterLocation = 3;
          var ComponentFilterHOC = 4;
          var lru_cache = __webpack_require__(6);
          var lru_cache_default = /* @__PURE__ */ __webpack_require__.n(lru_cache);
          var react_is = __webpack_require__(0);
          function ReactSymbols_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              ReactSymbols_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              ReactSymbols_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return ReactSymbols_typeof(obj);
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          var REACT_CACHE_TYPE = 60132;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
            REACT_CACHE_TYPE = symbolFor("react.cache");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || ReactSymbols_typeof(maybeIterable) !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  hydration_defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function hydration_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var meta = {
            inspectable: Symbol("inspectable"),
            inspected: Symbol("inspected"),
            name: Symbol("name"),
            preview_long: Symbol("preview_long"),
            preview_short: Symbol("preview_short"),
            readonly: Symbol("readonly"),
            size: Symbol("size"),
            type: Symbol("type"),
            unserializable: Symbol("unserializable")
          };
          var LEVEL_THRESHOLD = 2;
          function createDehydrated(type, inspectable, data, cleaned, path) {
            cleaned.push(path);
            var dehydrated = {
              inspectable,
              type,
              preview_long: formatDataForPreview(data, true),
              preview_short: formatDataForPreview(data, false),
              name: !data.constructor || data.constructor.name === "Object" ? "" : data.constructor.name
            };
            if (type === "array" || type === "typed_array") {
              dehydrated.size = data.length;
            } else if (type === "object") {
              dehydrated.size = Object.keys(data).length;
            }
            if (type === "iterator" || type === "typed_array") {
              dehydrated.readonly = true;
            }
            return dehydrated;
          }
          function dehydrate(data, cleaned, unserializable, path, isPathAllowed) {
            var level = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
            var type = getDataType(data);
            var isPathAllowedCheck;
            switch (type) {
              case "html_element":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data.tagName,
                  type
                };
              case "function":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: typeof data.name === "function" || !data.name ? "function" : data.name,
                  type
                };
              case "string":
                isPathAllowedCheck = isPathAllowed(path);
                if (isPathAllowedCheck) {
                  return data;
                } else {
                  return data.length <= 500 ? data : data.slice(0, 500) + "...";
                }
              case "bigint":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data.toString(),
                  type
                };
              case "symbol":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data.toString(),
                  type
                };
              case "react_element":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: getDisplayNameForReactElement(data) || "Unknown",
                  type
                };
              case "array_buffer":
              case "data_view":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: type === "data_view" ? "DataView" : "ArrayBuffer",
                  size: data.byteLength,
                  type
                };
              case "array":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type, true, data, cleaned, path);
                }
                return data.map(function(item, i2) {
                  return dehydrate(item, cleaned, unserializable, path.concat([i2]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                });
              case "html_all_collection":
              case "typed_array":
              case "iterator":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type, true, data, cleaned, path);
                } else {
                  var unserializableValue = {
                    unserializable: true,
                    type,
                    readonly: true,
                    size: type === "typed_array" ? data.length : void 0,
                    preview_short: formatDataForPreview(data, false),
                    preview_long: formatDataForPreview(data, true),
                    name: !data.constructor || data.constructor.name === "Object" ? "" : data.constructor.name
                  };
                  Array.from(data).forEach(function(item, i2) {
                    return unserializableValue[i2] = dehydrate(item, cleaned, unserializable, path.concat([i2]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                  });
                  unserializable.push(path);
                  return unserializableValue;
                }
              case "opaque_iterator":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data[Symbol.toStringTag],
                  type
                };
              case "date":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data.toString(),
                  type
                };
              case "regexp":
                cleaned.push(path);
                return {
                  inspectable: false,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: data.toString(),
                  type
                };
              case "object":
                isPathAllowedCheck = isPathAllowed(path);
                if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                  return createDehydrated(type, true, data, cleaned, path);
                } else {
                  var object = {};
                  getAllEnumerableKeys(data).forEach(function(key) {
                    var name = key.toString();
                    object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                  });
                  return object;
                }
              case "infinity":
              case "nan":
              case "undefined":
                cleaned.push(path);
                return {
                  type
                };
              default:
                return data;
            }
          }
          function fillInPath(object, data, path, value) {
            var target = getInObject(object, path);
            if (target != null) {
              if (!target[meta.unserializable]) {
                delete target[meta.inspectable];
                delete target[meta.inspected];
                delete target[meta.name];
                delete target[meta.preview_long];
                delete target[meta.preview_short];
                delete target[meta.readonly];
                delete target[meta.size];
                delete target[meta.type];
              }
            }
            if (value !== null && data.unserializable.length > 0) {
              var unserializablePath = data.unserializable[0];
              var isMatch = unserializablePath.length === path.length;
              for (var i2 = 0; i2 < path.length; i2++) {
                if (path[i2] !== unserializablePath[i2]) {
                  isMatch = false;
                  break;
                }
              }
              if (isMatch) {
                upgradeUnserializable(value, value);
              }
            }
            setInObject(object, path, value);
          }
          function hydrate(object, cleaned, unserializable) {
            cleaned.forEach(function(path) {
              var length = path.length;
              var last = path[length - 1];
              var parent = getInObject(object, path.slice(0, length - 1));
              if (!parent || !parent.hasOwnProperty(last)) {
                return;
              }
              var value = parent[last];
              if (!value) {
                return;
              } else if (value.type === "infinity") {
                parent[last] = Infinity;
              } else if (value.type === "nan") {
                parent[last] = NaN;
              } else if (value.type === "undefined") {
                parent[last] = void 0;
              } else {
                var replaced = {};
                replaced[meta.inspectable] = !!value.inspectable;
                replaced[meta.inspected] = false;
                replaced[meta.name] = value.name;
                replaced[meta.preview_long] = value.preview_long;
                replaced[meta.preview_short] = value.preview_short;
                replaced[meta.size] = value.size;
                replaced[meta.readonly] = !!value.readonly;
                replaced[meta.type] = value.type;
                parent[last] = replaced;
              }
            });
            unserializable.forEach(function(path) {
              var length = path.length;
              var last = path[length - 1];
              var parent = getInObject(object, path.slice(0, length - 1));
              if (!parent || !parent.hasOwnProperty(last)) {
                return;
              }
              var node = parent[last];
              var replacement = _objectSpread({}, node);
              upgradeUnserializable(replacement, node);
              parent[last] = replacement;
            });
            return object;
          }
          function upgradeUnserializable(destination, source) {
            var _Object$definePropert;
            Object.defineProperties(destination, (_Object$definePropert = {}, hydration_defineProperty(_Object$definePropert, meta.inspected, {
              configurable: true,
              enumerable: false,
              value: !!source.inspected
            }), hydration_defineProperty(_Object$definePropert, meta.name, {
              configurable: true,
              enumerable: false,
              value: source.name
            }), hydration_defineProperty(_Object$definePropert, meta.preview_long, {
              configurable: true,
              enumerable: false,
              value: source.preview_long
            }), hydration_defineProperty(_Object$definePropert, meta.preview_short, {
              configurable: true,
              enumerable: false,
              value: source.preview_short
            }), hydration_defineProperty(_Object$definePropert, meta.size, {
              configurable: true,
              enumerable: false,
              value: source.size
            }), hydration_defineProperty(_Object$definePropert, meta.readonly, {
              configurable: true,
              enumerable: false,
              value: !!source.readonly
            }), hydration_defineProperty(_Object$definePropert, meta.type, {
              configurable: true,
              enumerable: false,
              value: source.type
            }), hydration_defineProperty(_Object$definePropert, meta.unserializable, {
              configurable: true,
              enumerable: false,
              value: !!source.unserializable
            }), _Object$definePropert));
            delete destination.inspected;
            delete destination.name;
            delete destination.preview_long;
            delete destination.preview_short;
            delete destination.size;
            delete destination.readonly;
            delete destination.type;
            delete destination.unserializable;
          }
          function utils_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              utils_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              utils_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return utils_typeof(obj);
          }
          function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || utils_unsupportedIterableToArray(arr) || _nonIterableSpread();
          }
          function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function utils_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return utils_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return utils_arrayLikeToArray(o2, minLen);
          }
          function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return utils_arrayLikeToArray(arr);
          }
          function utils_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          var cachedDisplayNames = new WeakMap();
          var encodedStringCache = new lru_cache_default.a({
            max: 1e3
          });
          function alphaSortKeys(a2, b2) {
            if (a2.toString() > b2.toString()) {
              return 1;
            } else if (b2.toString() > a2.toString()) {
              return -1;
            } else {
              return 0;
            }
          }
          function getAllEnumerableKeys(obj) {
            var keys = new Set();
            var current = obj;
            var _loop = function _loop2() {
              var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));
              var descriptors = Object.getOwnPropertyDescriptors(current);
              currentKeys.forEach(function(key) {
                if (descriptors[key].enumerable) {
                  keys.add(key);
                }
              });
              current = Object.getPrototypeOf(current);
            };
            while (current != null) {
              _loop();
            }
            return keys;
          }
          function getDisplayName(type) {
            var fallbackName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Anonymous";
            var nameFromCache = cachedDisplayNames.get(type);
            if (nameFromCache != null) {
              return nameFromCache;
            }
            var displayName = fallbackName;
            if (typeof type.displayName === "string") {
              displayName = type.displayName;
            } else if (typeof type.name === "string" && type.name !== "") {
              displayName = type.name;
            }
            cachedDisplayNames.set(type, displayName);
            return displayName;
          }
          var utils_uidCounter = 0;
          function getUID() {
            return ++utils_uidCounter;
          }
          function utfDecodeString(array) {
            return String.fromCodePoint.apply(String, _toConsumableArray(array));
          }
          function utfEncodeString(string) {
            var cached = encodedStringCache.get(string);
            if (cached !== void 0) {
              return cached;
            }
            var encoded = new Array(string.length);
            for (var i2 = 0; i2 < string.length; i2++) {
              encoded[i2] = string.codePointAt(i2);
            }
            encodedStringCache.set(string, encoded);
            return encoded;
          }
          function printOperationsArray(operations) {
            var rendererID = operations[0];
            var rootID = operations[1];
            var logs = ["operations for renderer:".concat(rendererID, " and root:").concat(rootID)];
            var i2 = 2;
            var stringTable = [
              null
            ];
            var stringTableSize = operations[i2++];
            var stringTableEnd = i2 + stringTableSize;
            while (i2 < stringTableEnd) {
              var nextLength = operations[i2++];
              var nextString = utfDecodeString(operations.slice(i2, i2 + nextLength));
              stringTable.push(nextString);
              i2 += nextLength;
            }
            while (i2 < operations.length) {
              var operation = operations[i2];
              switch (operation) {
                case TREE_OPERATION_ADD: {
                  var _id = operations[i2 + 1];
                  var type = operations[i2 + 2];
                  i2 += 3;
                  if (type === ElementTypeRoot) {
                    logs.push("Add new root node ".concat(_id));
                    i2++;
                    i2++;
                  } else {
                    var parentID = operations[i2];
                    i2++;
                    i2++;
                    var displayNameStringID = operations[i2];
                    var displayName = stringTable[displayNameStringID];
                    i2++;
                    i2++;
                    logs.push("Add node ".concat(_id, " (").concat(displayName || "null", ") as child of ").concat(parentID));
                  }
                  break;
                }
                case TREE_OPERATION_REMOVE: {
                  var removeLength = operations[i2 + 1];
                  i2 += 2;
                  for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                    var _id2 = operations[i2];
                    i2 += 1;
                    logs.push("Remove node ".concat(_id2));
                  }
                  break;
                }
                case TREE_OPERATION_REMOVE_ROOT: {
                  i2 += 1;
                  logs.push("Remove root ".concat(rootID));
                  break;
                }
                case TREE_OPERATION_REORDER_CHILDREN: {
                  var _id3 = operations[i2 + 1];
                  var numChildren = operations[i2 + 2];
                  i2 += 3;
                  var children = operations.slice(i2, i2 + numChildren);
                  i2 += numChildren;
                  logs.push("Re-order node ".concat(_id3, " children ").concat(children.join(",")));
                  break;
                }
                case TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
                  i2 += 3;
                  break;
                case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
                  var id = operations[i2 + 1];
                  var numErrors = operations[i2 + 2];
                  var numWarnings = operations[i2 + 3];
                  i2 += 4;
                  logs.push("Node ".concat(id, " has ").concat(numErrors, " errors and ").concat(numWarnings, " warnings"));
                  break;
                default:
                  throw Error('Unsupported Bridge operation "'.concat(operation, '"'));
              }
            }
            console.log(logs.join("\n  "));
          }
          function getDefaultComponentFilters() {
            return [{
              type: ComponentFilterElementType,
              value: ElementTypeHostComponent,
              isEnabled: true
            }];
          }
          function getSavedComponentFilters() {
            try {
              var raw = localStorageGetItem(LOCAL_STORAGE_FILTER_PREFERENCES_KEY);
              if (raw != null) {
                return JSON.parse(raw);
              }
            } catch (error) {
            }
            return getDefaultComponentFilters();
          }
          function saveComponentFilters(componentFilters) {
            localStorageSetItem(LOCAL_STORAGE_FILTER_PREFERENCES_KEY, JSON.stringify(componentFilters));
          }
          function getAppendComponentStack() {
            try {
              var raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY);
              if (raw != null) {
                return JSON.parse(raw);
              }
            } catch (error) {
            }
            return true;
          }
          function setAppendComponentStack(value) {
            localStorageSetItem(LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY, JSON.stringify(value));
          }
          function getBreakOnConsoleErrors() {
            try {
              var raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS);
              if (raw != null) {
                return JSON.parse(raw);
              }
            } catch (error) {
            }
            return false;
          }
          function setBreakOnConsoleErrors(value) {
            localStorageSetItem(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS, JSON.stringify(value));
          }
          function getShowInlineWarningsAndErrors() {
            try {
              var raw = localStorageGetItem(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY);
              if (raw != null) {
                return JSON.parse(raw);
              }
            } catch (error) {
            }
            return true;
          }
          function setShowInlineWarningsAndErrors(value) {
            localStorageSetItem(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY, JSON.stringify(value));
          }
          function separateDisplayNameAndHOCs(displayName, type) {
            if (displayName === null) {
              return [null, null];
            }
            var hocDisplayNames = null;
            switch (type) {
              case ElementTypeClass:
              case ElementTypeForwardRef:
              case ElementTypeFunction:
              case ElementTypeMemo:
                if (displayName.indexOf("(") >= 0) {
                  var matches = displayName.match(/[^()]+/g);
                  if (matches != null) {
                    displayName = matches.pop();
                    hocDisplayNames = matches;
                  }
                }
                break;
              default:
                break;
            }
            if (type === ElementTypeMemo) {
              if (hocDisplayNames === null) {
                hocDisplayNames = ["Memo"];
              } else {
                hocDisplayNames.unshift("Memo");
              }
            } else if (type === ElementTypeForwardRef) {
              if (hocDisplayNames === null) {
                hocDisplayNames = ["ForwardRef"];
              } else {
                hocDisplayNames.unshift("ForwardRef");
              }
            }
            return [displayName, hocDisplayNames];
          }
          function shallowDiffers(prev, next) {
            for (var attribute in prev) {
              if (!(attribute in next)) {
                return true;
              }
            }
            for (var _attribute in next) {
              if (prev[_attribute] !== next[_attribute]) {
                return true;
              }
            }
            return false;
          }
          function getInObject(object, path) {
            return path.reduce(function(reduced, attr) {
              if (reduced) {
                if (hasOwnProperty.call(reduced, attr)) {
                  return reduced[attr];
                }
                if (typeof reduced[Symbol.iterator] === "function") {
                  return Array.from(reduced)[attr];
                }
              }
              return null;
            }, object);
          }
          function deletePathInObject(object, path) {
            var length = path.length;
            var last = path[length - 1];
            if (object != null) {
              var parent = getInObject(object, path.slice(0, length - 1));
              if (parent) {
                if (Array.isArray(parent)) {
                  parent.splice(last, 1);
                } else {
                  delete parent[last];
                }
              }
            }
          }
          function renamePathInObject(object, oldPath, newPath) {
            var length = oldPath.length;
            if (object != null) {
              var parent = getInObject(object, oldPath.slice(0, length - 1));
              if (parent) {
                var lastOld = oldPath[length - 1];
                var lastNew = newPath[length - 1];
                parent[lastNew] = parent[lastOld];
                if (Array.isArray(parent)) {
                  parent.splice(lastOld, 1);
                } else {
                  delete parent[lastOld];
                }
              }
            }
          }
          function setInObject(object, path, value) {
            var length = path.length;
            var last = path[length - 1];
            if (object != null) {
              var parent = getInObject(object, path.slice(0, length - 1));
              if (parent) {
                parent[last] = value;
              }
            }
          }
          function getDataType(data) {
            if (data === null) {
              return "null";
            } else if (data === void 0) {
              return "undefined";
            }
            if (Object(react_is["isElement"])(data)) {
              return "react_element";
            }
            if (typeof HTMLElement !== "undefined" && data instanceof HTMLElement) {
              return "html_element";
            }
            var type = utils_typeof(data);
            switch (type) {
              case "bigint":
                return "bigint";
              case "boolean":
                return "boolean";
              case "function":
                return "function";
              case "number":
                if (Number.isNaN(data)) {
                  return "nan";
                } else if (!Number.isFinite(data)) {
                  return "infinity";
                } else {
                  return "number";
                }
              case "object":
                if (Array.isArray(data)) {
                  return "array";
                } else if (ArrayBuffer.isView(data)) {
                  return hasOwnProperty.call(data.constructor, "BYTES_PER_ELEMENT") ? "typed_array" : "data_view";
                } else if (data.constructor && data.constructor.name === "ArrayBuffer") {
                  return "array_buffer";
                } else if (typeof data[Symbol.iterator] === "function") {
                  var iterator = data[Symbol.iterator]();
                  if (!iterator) {
                  } else {
                    return iterator === data ? "opaque_iterator" : "iterator";
                  }
                } else if (data.constructor && data.constructor.name === "RegExp") {
                  return "regexp";
                } else {
                  var toStringValue = Object.prototype.toString.call(data);
                  if (toStringValue === "[object Date]") {
                    return "date";
                  } else if (toStringValue === "[object HTMLAllCollection]") {
                    return "html_all_collection";
                  }
                }
                return "object";
              case "string":
                return "string";
              case "symbol":
                return "symbol";
              case "undefined":
                if (Object.prototype.toString.call(data) === "[object HTMLAllCollection]") {
                  return "html_all_collection";
                }
                return "undefined";
              default:
                return "unknown";
            }
          }
          function getDisplayNameForReactElement(element) {
            var elementType = Object(react_is["typeOf"])(element);
            switch (elementType) {
              case react_is["ContextConsumer"]:
                return "ContextConsumer";
              case react_is["ContextProvider"]:
                return "ContextProvider";
              case react_is["ForwardRef"]:
                return "ForwardRef";
              case react_is["Fragment"]:
                return "Fragment";
              case react_is["Lazy"]:
                return "Lazy";
              case react_is["Memo"]:
                return "Memo";
              case react_is["Portal"]:
                return "Portal";
              case react_is["Profiler"]:
                return "Profiler";
              case react_is["StrictMode"]:
                return "StrictMode";
              case react_is["Suspense"]:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
              default:
                var type = element.type;
                if (typeof type === "string") {
                  return type;
                } else if (typeof type === "function") {
                  return getDisplayName(type, "Anonymous");
                } else if (type != null) {
                  return "NotImplementedInDevtools";
                } else {
                  return "Element";
                }
            }
          }
          var MAX_PREVIEW_STRING_LENGTH = 50;
          function truncateForDisplay(string) {
            var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;
            if (string.length > length) {
              return string.substr(0, length) + "\u2026";
            } else {
              return string;
            }
          }
          function formatDataForPreview(data, showFormattedValue) {
            if (data != null && hasOwnProperty.call(data, meta.type)) {
              return showFormattedValue ? data[meta.preview_long] : data[meta.preview_short];
            }
            var type = getDataType(data);
            switch (type) {
              case "html_element":
                return "<".concat(truncateForDisplay(data.tagName.toLowerCase()), " />");
              case "function":
                return truncateForDisplay("\u0192 ".concat(typeof data.name === "function" ? "" : data.name, "() {}"));
              case "string":
                return '"'.concat(data, '"');
              case "bigint":
                return truncateForDisplay(data.toString() + "n");
              case "regexp":
                return truncateForDisplay(data.toString());
              case "symbol":
                return truncateForDisplay(data.toString());
              case "react_element":
                return "<".concat(truncateForDisplay(getDisplayNameForReactElement(data) || "Unknown"), " />");
              case "array_buffer":
                return "ArrayBuffer(".concat(data.byteLength, ")");
              case "data_view":
                return "DataView(".concat(data.buffer.byteLength, ")");
              case "array":
                if (showFormattedValue) {
                  var formatted = "";
                  for (var i2 = 0; i2 < data.length; i2++) {
                    if (i2 > 0) {
                      formatted += ", ";
                    }
                    formatted += formatDataForPreview(data[i2], false);
                    if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                      break;
                    }
                  }
                  return "[".concat(truncateForDisplay(formatted), "]");
                } else {
                  var length = hasOwnProperty.call(data, meta.size) ? data[meta.size] : data.length;
                  return "Array(".concat(length, ")");
                }
              case "typed_array":
                var shortName = "".concat(data.constructor.name, "(").concat(data.length, ")");
                if (showFormattedValue) {
                  var _formatted = "";
                  for (var _i = 0; _i < data.length; _i++) {
                    if (_i > 0) {
                      _formatted += ", ";
                    }
                    _formatted += data[_i];
                    if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                      break;
                    }
                  }
                  return "".concat(shortName, " [").concat(truncateForDisplay(_formatted), "]");
                } else {
                  return shortName;
                }
              case "iterator":
                var name = data.constructor.name;
                if (showFormattedValue) {
                  var array = Array.from(data);
                  var _formatted2 = "";
                  for (var _i2 = 0; _i2 < array.length; _i2++) {
                    var entryOrEntries = array[_i2];
                    if (_i2 > 0) {
                      _formatted2 += ", ";
                    }
                    if (Array.isArray(entryOrEntries)) {
                      var key = formatDataForPreview(entryOrEntries[0], true);
                      var value = formatDataForPreview(entryOrEntries[1], false);
                      _formatted2 += "".concat(key, " => ").concat(value);
                    } else {
                      _formatted2 += formatDataForPreview(entryOrEntries, false);
                    }
                    if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {
                      break;
                    }
                  }
                  return "".concat(name, "(").concat(data.size, ") {").concat(truncateForDisplay(_formatted2), "}");
                } else {
                  return "".concat(name, "(").concat(data.size, ")");
                }
              case "opaque_iterator": {
                return data[Symbol.toStringTag];
              }
              case "date":
                return data.toString();
              case "object":
                if (showFormattedValue) {
                  var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);
                  var _formatted3 = "";
                  for (var _i3 = 0; _i3 < keys.length; _i3++) {
                    var _key = keys[_i3];
                    if (_i3 > 0) {
                      _formatted3 += ", ";
                    }
                    _formatted3 += "".concat(_key.toString(), ": ").concat(formatDataForPreview(data[_key], false));
                    if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {
                      break;
                    }
                  }
                  return "{".concat(truncateForDisplay(_formatted3), "}");
                } else {
                  return "{\u2026}";
                }
              case "boolean":
              case "number":
              case "infinity":
              case "nan":
              case "null":
              case "undefined":
                return data;
              default:
                try {
                  return truncateForDisplay("" + data);
                } catch (error) {
                  return "unserializable";
                }
            }
          }
          var clipboard = __webpack_require__(7);
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var shared_isArray = isArray;
          function backend_utils_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              backend_utils_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              backend_utils_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return backend_utils_typeof(obj);
          }
          function utils_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function utils_objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                utils_ownKeys(Object(source), true).forEach(function(key) {
                  utils_defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                utils_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function utils_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function cleanForBridge(data, isPathAllowed) {
            var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
            if (data !== null) {
              var cleanedPaths = [];
              var unserializablePaths = [];
              var cleanedData = dehydrate(data, cleanedPaths, unserializablePaths, path, isPathAllowed);
              return {
                data: cleanedData,
                cleaned: cleanedPaths,
                unserializable: unserializablePaths
              };
            } else {
              return null;
            }
          }
          function copyToClipboard(value) {
            var safeToCopy = serializeToString(value);
            var text = safeToCopy === void 0 ? "undefined" : safeToCopy;
            var clipboardCopyText = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText;
            if (typeof clipboardCopyText === "function") {
              clipboardCopyText(text).catch(function(err) {
              });
            } else {
              Object(clipboard["copy"])(text);
            }
          }
          function copyWithDelete(obj, path) {
            var index = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
            var key = path[index];
            var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);
            if (index + 1 === path.length) {
              if (shared_isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
            } else {
              updated[key] = copyWithDelete(obj[key], path, index + 1);
            }
            return updated;
          }
          function copyWithRename(obj, oldPath, newPath) {
            var index = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            var oldKey = oldPath[index];
            var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);
            if (index + 1 === oldPath.length) {
              var newKey = newPath[index];
              updated[newKey] = updated[oldKey];
              if (shared_isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);
            }
            return updated;
          }
          function copyWithSet(obj, path, value) {
            var index = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            if (index >= path.length) {
              return value;
            }
            var key = path[index];
            var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);
            updated[key] = copyWithSet(obj[key], path, value, index + 1);
            return updated;
          }
          function getEffectDurations(root) {
            var effectDuration = null;
            var passiveEffectDuration = null;
            var hostRoot = root.current;
            if (hostRoot != null) {
              var stateNode = hostRoot.stateNode;
              if (stateNode != null) {
                effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;
                passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;
              }
            }
            return {
              effectDuration,
              passiveEffectDuration
            };
          }
          function serializeToString(data) {
            var cache = new Set();
            return JSON.stringify(data, function(key, value) {
              if (backend_utils_typeof(value) === "object" && value !== null) {
                if (cache.has(value)) {
                  return;
                }
                cache.add(value);
              }
              if (typeof value === "bigint") {
                return value.toString() + "n";
              }
              return value;
            });
          }
          function format(maybeMessage) {
            for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              inputArgs[_key - 1] = arguments[_key];
            }
            var args = inputArgs.slice();
            var formatted = backend_utils_typeof(maybeMessage) === "symbol" ? maybeMessage.toString() : "" + maybeMessage;
            if (typeof maybeMessage === "string") {
              if (args.length) {
                var REGEXP = /(%?)(%([jds]))/g;
                formatted = formatted.replace(REGEXP, function(match, escaped, ptn, flag) {
                  var arg2 = args.shift();
                  switch (flag) {
                    case "s":
                      arg2 += "";
                      break;
                    case "d":
                    case "i":
                      arg2 = parseInt(arg2, 10).toString();
                      break;
                    case "f":
                      arg2 = parseFloat(arg2).toString();
                      break;
                  }
                  if (!escaped) {
                    return arg2;
                  }
                  args.unshift(arg2);
                  return match;
                });
              }
            }
            if (args.length) {
              for (var i2 = 0; i2 < args.length; i2++) {
                var arg = args[i2];
                formatted += " " + (backend_utils_typeof(arg) === "symbol" ? arg.toString() : arg);
              }
            }
            formatted = formatted.replace(/%{2,2}/g, "%");
            return "" + formatted;
          }
          function isSynchronousXHRSupported() {
            return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature("sync-xhr"));
          }
          var react_debug_tools = __webpack_require__(8);
          var CONCURRENT_MODE_NUMBER = 60111;
          var CONCURRENT_MODE_SYMBOL_STRING = "Symbol(react.concurrent_mode)";
          var CONTEXT_NUMBER = 60110;
          var CONTEXT_SYMBOL_STRING = "Symbol(react.context)";
          var DEPRECATED_ASYNC_MODE_SYMBOL_STRING = "Symbol(react.async_mode)";
          var ELEMENT_NUMBER = 60103;
          var ELEMENT_SYMBOL_STRING = "Symbol(react.element)";
          var DEBUG_TRACING_MODE_NUMBER = 60129;
          var DEBUG_TRACING_MODE_SYMBOL_STRING = "Symbol(react.debug_trace_mode)";
          var FORWARD_REF_NUMBER = 60112;
          var FORWARD_REF_SYMBOL_STRING = "Symbol(react.forward_ref)";
          var FRAGMENT_NUMBER = 60107;
          var FRAGMENT_SYMBOL_STRING = "Symbol(react.fragment)";
          var LAZY_NUMBER = 60116;
          var LAZY_SYMBOL_STRING = "Symbol(react.lazy)";
          var MEMO_NUMBER = 60115;
          var MEMO_SYMBOL_STRING = "Symbol(react.memo)";
          var OPAQUE_ID_NUMBER = 60128;
          var OPAQUE_ID_SYMBOL_STRING = "Symbol(react.opaque.id)";
          var PORTAL_NUMBER = 60106;
          var PORTAL_SYMBOL_STRING = "Symbol(react.portal)";
          var PROFILER_NUMBER = 60114;
          var PROFILER_SYMBOL_STRING = "Symbol(react.profiler)";
          var PROVIDER_NUMBER = 60109;
          var PROVIDER_SYMBOL_STRING = "Symbol(react.provider)";
          var SCOPE_NUMBER = 60119;
          var SCOPE_SYMBOL_STRING = "Symbol(react.scope)";
          var STRICT_MODE_NUMBER = 60108;
          var STRICT_MODE_SYMBOL_STRING = "Symbol(react.strict_mode)";
          var SUSPENSE_NUMBER = 60113;
          var SUSPENSE_SYMBOL_STRING = "Symbol(react.suspense)";
          var SUSPENSE_LIST_NUMBER = 60120;
          var SUSPENSE_LIST_SYMBOL_STRING = "Symbol(react.suspense_list)";
          var enableProfilerChangedHookIndices = false;
          var isInternalFacebookBuild = false;
          function is(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var shared_objectIs = objectIs;
          function renderer_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function renderer_objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                renderer_ownKeys(Object(source), true).forEach(function(key) {
                  renderer_defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                renderer_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function renderer_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function _slicedToArray(arr, i2) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || renderer_unsupportedIterableToArray(arr, i2) || _nonIterableRest();
          }
          function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _iterableToArrayLimit(arr, i2) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          function _arrayWithHoles(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          function renderer_toConsumableArray(arr) {
            return renderer_arrayWithoutHoles(arr) || renderer_iterableToArray(arr) || renderer_unsupportedIterableToArray(arr) || renderer_nonIterableSpread();
          }
          function renderer_nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function renderer_iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function renderer_arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return renderer_arrayLikeToArray(arr);
          }
          function renderer_createForOfIteratorHelper(o2, allowArrayLike) {
            var it;
            if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
              if (Array.isArray(o2) || (it = renderer_unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
                if (it)
                  o2 = it;
                var i2 = 0;
                var F = function F2() {
                };
                return { s: F, n: function n2() {
                  if (i2 >= o2.length)
                    return { done: true };
                  return { done: false, value: o2[i2++] };
                }, e: function e2(_e2) {
                  throw _e2;
                }, f: F };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var normalCompletion = true, didErr = false, err;
            return { s: function s2() {
              it = o2[Symbol.iterator]();
            }, n: function n2() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
            }, e: function e2(_e3) {
              didErr = true;
              err = _e3;
            }, f: function f() {
              try {
                if (!normalCompletion && it.return != null)
                  it.return();
              } finally {
                if (didErr)
                  throw err;
              }
            } };
          }
          function renderer_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return renderer_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return renderer_arrayLikeToArray(o2, minLen);
          }
          function renderer_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function renderer_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              renderer_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              renderer_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return renderer_typeof(obj);
          }
          function getFiberFlags(fiber) {
            return fiber.flags !== void 0 ? fiber.flags : fiber.effectTag;
          }
          var renderer_getCurrentTime = (typeof performance === "undefined" ? "undefined" : renderer_typeof(performance)) === "object" && typeof performance.now === "function" ? function() {
            return performance.now();
          } : function() {
            return Date.now();
          };
          function getInternalReactConstants(version) {
            var ReactTypeOfSideEffect = {
              DidCapture: 128,
              NoFlags: 0,
              PerformedWork: 1,
              Placement: 2,
              Incomplete: 8192
            };
            var ReactPriorityLevels = {
              ImmediatePriority: 99,
              UserBlockingPriority: 98,
              NormalPriority: 97,
              LowPriority: 96,
              IdlePriority: 95,
              NoPriority: 90
            };
            if (Object(semver["gt"])(version, "17.0.2")) {
              ReactPriorityLevels = {
                ImmediatePriority: 1,
                UserBlockingPriority: 2,
                NormalPriority: 3,
                LowPriority: 4,
                IdlePriority: 5,
                NoPriority: 0
              };
            }
            var ReactTypeOfWork = null;
            if (Object(semver["gt"])(version, "17.0.1")) {
              ReactTypeOfWork = {
                CacheComponent: 24,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: 23,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: 22,
                Profiler: 12,
                ScopeComponent: 21,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "17.0.0-alpha")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: 24,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: 23,
                Profiler: 12,
                ScopeComponent: 21,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "16.6.0-beta.0")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 1,
                ContextConsumer: 9,
                ContextProvider: 10,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: 18,
                ForwardRef: 11,
                Fragment: 7,
                FunctionComponent: 0,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: 17,
                IndeterminateComponent: 2,
                LazyComponent: 16,
                LegacyHiddenComponent: -1,
                MemoComponent: 14,
                Mode: 8,
                OffscreenComponent: -1,
                Profiler: 12,
                ScopeComponent: -1,
                SimpleMemoComponent: 15,
                SuspenseComponent: 13,
                SuspenseListComponent: 19,
                YieldComponent: -1
              };
            } else if (Object(semver["gte"])(version, "16.4.3-alpha")) {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 2,
                ContextConsumer: 11,
                ContextProvider: 12,
                CoroutineComponent: -1,
                CoroutineHandlerPhase: -1,
                DehydratedSuspenseComponent: -1,
                ForwardRef: 13,
                Fragment: 9,
                FunctionComponent: 0,
                HostComponent: 7,
                HostPortal: 6,
                HostRoot: 5,
                HostText: 8,
                IncompleteClassComponent: -1,
                IndeterminateComponent: 4,
                LazyComponent: -1,
                LegacyHiddenComponent: -1,
                MemoComponent: -1,
                Mode: 10,
                OffscreenComponent: -1,
                Profiler: 15,
                ScopeComponent: -1,
                SimpleMemoComponent: -1,
                SuspenseComponent: 16,
                SuspenseListComponent: -1,
                YieldComponent: -1
              };
            } else {
              ReactTypeOfWork = {
                CacheComponent: -1,
                ClassComponent: 2,
                ContextConsumer: 12,
                ContextProvider: 13,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                DehydratedSuspenseComponent: -1,
                ForwardRef: 14,
                Fragment: 10,
                FunctionComponent: 1,
                HostComponent: 5,
                HostPortal: 4,
                HostRoot: 3,
                HostText: 6,
                IncompleteClassComponent: -1,
                IndeterminateComponent: 0,
                LazyComponent: -1,
                LegacyHiddenComponent: -1,
                MemoComponent: -1,
                Mode: 11,
                OffscreenComponent: -1,
                Profiler: 15,
                ScopeComponent: -1,
                SimpleMemoComponent: -1,
                SuspenseComponent: 16,
                SuspenseListComponent: -1,
                YieldComponent: 9
              };
            }
            function getTypeSymbol(type) {
              var symbolOrNumber = renderer_typeof(type) === "object" && type !== null ? type.$$typeof : type;
              return renderer_typeof(symbolOrNumber) === "symbol" ? symbolOrNumber.toString() : symbolOrNumber;
            }
            var _ReactTypeOfWork = ReactTypeOfWork, CacheComponent = _ReactTypeOfWork.CacheComponent, ClassComponent = _ReactTypeOfWork.ClassComponent, IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent, FunctionComponent = _ReactTypeOfWork.FunctionComponent, IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent, ForwardRef = _ReactTypeOfWork.ForwardRef, HostRoot = _ReactTypeOfWork.HostRoot, HostComponent = _ReactTypeOfWork.HostComponent, HostPortal = _ReactTypeOfWork.HostPortal, HostText = _ReactTypeOfWork.HostText, Fragment = _ReactTypeOfWork.Fragment, LazyComponent = _ReactTypeOfWork.LazyComponent, LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent, MemoComponent = _ReactTypeOfWork.MemoComponent, OffscreenComponent = _ReactTypeOfWork.OffscreenComponent, Profiler = _ReactTypeOfWork.Profiler, ScopeComponent = _ReactTypeOfWork.ScopeComponent, SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent, SuspenseComponent = _ReactTypeOfWork.SuspenseComponent, SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent;
            function resolveFiberType(type) {
              var typeSymbol = getTypeSymbol(type);
              switch (typeSymbol) {
                case MEMO_NUMBER:
                case MEMO_SYMBOL_STRING:
                  return resolveFiberType(type.type);
                case FORWARD_REF_NUMBER:
                case FORWARD_REF_SYMBOL_STRING:
                  return type.render;
                default:
                  return type;
              }
            }
            function getDisplayNameForFiber(fiber) {
              var elementType = fiber.elementType, type = fiber.type, tag = fiber.tag;
              var resolvedType = type;
              if (renderer_typeof(type) === "object" && type !== null) {
                resolvedType = resolveFiberType(type);
              }
              var resolvedContext = null;
              switch (tag) {
                case CacheComponent:
                  return "Cache";
                case ClassComponent:
                case IncompleteClassComponent:
                  return getDisplayName(resolvedType);
                case FunctionComponent:
                case IndeterminateComponent:
                  return getDisplayName(resolvedType);
                case ForwardRef:
                  return type && type.displayName || getDisplayName(resolvedType, "Anonymous");
                case HostRoot:
                  return null;
                case HostComponent:
                  return type;
                case HostPortal:
                case HostText:
                case Fragment:
                  return null;
                case LazyComponent:
                  return "Lazy";
                case MemoComponent:
                case SimpleMemoComponent:
                  return elementType && elementType.displayName || type && type.displayName || getDisplayName(resolvedType, "Anonymous");
                case SuspenseComponent:
                  return "Suspense";
                case LegacyHiddenComponent:
                  return "LegacyHidden";
                case OffscreenComponent:
                  return "Offscreen";
                case ScopeComponent:
                  return "Scope";
                case SuspenseListComponent:
                  return "SuspenseList";
                case Profiler:
                  return "Profiler";
                default:
                  var typeSymbol = getTypeSymbol(type);
                  switch (typeSymbol) {
                    case CONCURRENT_MODE_NUMBER:
                    case CONCURRENT_MODE_SYMBOL_STRING:
                    case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                      return null;
                    case PROVIDER_NUMBER:
                    case PROVIDER_SYMBOL_STRING:
                      resolvedContext = fiber.type._context || fiber.type.context;
                      return "".concat(resolvedContext.displayName || "Context", ".Provider");
                    case CONTEXT_NUMBER:
                    case CONTEXT_SYMBOL_STRING:
                      resolvedContext = fiber.type._context || fiber.type;
                      return "".concat(resolvedContext.displayName || "Context", ".Consumer");
                    case STRICT_MODE_NUMBER:
                    case STRICT_MODE_SYMBOL_STRING:
                      return null;
                    case PROFILER_NUMBER:
                    case PROFILER_SYMBOL_STRING:
                      return "Profiler(".concat(fiber.memoizedProps.id, ")");
                    case SCOPE_NUMBER:
                    case SCOPE_SYMBOL_STRING:
                      return "Scope";
                    default:
                      return null;
                  }
              }
            }
            return {
              getDisplayNameForFiber,
              getTypeSymbol,
              ReactPriorityLevels,
              ReactTypeOfWork,
              ReactTypeOfSideEffect
            };
          }
          function renderer_attach(hook, rendererID, renderer, global2) {
            var version = renderer.reconcilerVersion || renderer.version;
            var _getInternalReactCons = getInternalReactConstants(version), getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber, getTypeSymbol = _getInternalReactCons.getTypeSymbol, ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels, ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork, ReactTypeOfSideEffect = _getInternalReactCons.ReactTypeOfSideEffect;
            var DidCapture = ReactTypeOfSideEffect.DidCapture, Incomplete = ReactTypeOfSideEffect.Incomplete, NoFlags = ReactTypeOfSideEffect.NoFlags, PerformedWork = ReactTypeOfSideEffect.PerformedWork, Placement = ReactTypeOfSideEffect.Placement;
            var CacheComponent = ReactTypeOfWork.CacheComponent, ClassComponent = ReactTypeOfWork.ClassComponent, ContextConsumer = ReactTypeOfWork.ContextConsumer, DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent, ForwardRef = ReactTypeOfWork.ForwardRef, Fragment = ReactTypeOfWork.Fragment, FunctionComponent = ReactTypeOfWork.FunctionComponent, HostRoot = ReactTypeOfWork.HostRoot, HostPortal = ReactTypeOfWork.HostPortal, HostComponent = ReactTypeOfWork.HostComponent, HostText = ReactTypeOfWork.HostText, IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent, IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent, LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent, MemoComponent = ReactTypeOfWork.MemoComponent, OffscreenComponent = ReactTypeOfWork.OffscreenComponent, SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent, SuspenseComponent = ReactTypeOfWork.SuspenseComponent, SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent;
            var ImmediatePriority = ReactPriorityLevels.ImmediatePriority, UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority, NormalPriority = ReactPriorityLevels.NormalPriority, LowPriority = ReactPriorityLevels.LowPriority, IdlePriority = ReactPriorityLevels.IdlePriority, NoPriority = ReactPriorityLevels.NoPriority;
            var overrideHookState = renderer.overrideHookState, overrideHookStateDeletePath = renderer.overrideHookStateDeletePath, overrideHookStateRenamePath = renderer.overrideHookStateRenamePath, overrideProps = renderer.overrideProps, overridePropsDeletePath = renderer.overridePropsDeletePath, overridePropsRenamePath = renderer.overridePropsRenamePath, scheduleRefresh = renderer.scheduleRefresh, setErrorHandler = renderer.setErrorHandler, setSuspenseHandler = renderer.setSuspenseHandler, scheduleUpdate = renderer.scheduleUpdate;
            var supportsTogglingError = typeof setErrorHandler === "function" && typeof scheduleUpdate === "function";
            var supportsTogglingSuspense = typeof setSuspenseHandler === "function" && typeof scheduleUpdate === "function";
            if (typeof scheduleRefresh === "function") {
              renderer.scheduleRefresh = function() {
                try {
                  hook.emit("fastRefreshScheduled");
                } finally {
                  return scheduleRefresh.apply(void 0, arguments);
                }
              };
            }
            var fibersWithChangedErrorOrWarningCounts = new Set();
            var pendingFiberToErrorsMap = new Map();
            var pendingFiberToWarningsMap = new Map();
            var fiberIDToErrorsMap = new Map();
            var fiberIDToWarningsMap = new Map();
            function clearErrorsAndWarnings() {
              var _iterator = renderer_createForOfIteratorHelper(fiberIDToErrorsMap.keys()), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var id = _step.value;
                  var _fiber = idToArbitraryFiberMap.get(id);
                  if (_fiber != null) {
                    fibersWithChangedErrorOrWarningCounts.add(_fiber);
                    updateMostRecentlyInspectedElementIfNecessary(id);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              var _iterator2 = renderer_createForOfIteratorHelper(fiberIDToWarningsMap.keys()), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _id = _step2.value;
                  var _fiber2 = idToArbitraryFiberMap.get(_id);
                  if (_fiber2 != null) {
                    fibersWithChangedErrorOrWarningCounts.add(_fiber2);
                    updateMostRecentlyInspectedElementIfNecessary(_id);
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              fiberIDToErrorsMap.clear();
              fiberIDToWarningsMap.clear();
              flushPendingEvents();
            }
            function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
              var fiber = idToArbitraryFiberMap.get(fiberID);
              if (fiber != null) {
                pendingFiberToErrorsMap.delete(fiber);
                if (fiberIDToMessageCountMap.has(fiberID)) {
                  fiberIDToMessageCountMap.delete(fiberID);
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                  flushPendingEvents();
                  updateMostRecentlyInspectedElementIfNecessary(fiberID);
                } else {
                  fibersWithChangedErrorOrWarningCounts.delete(fiber);
                }
              }
            }
            function clearErrorsForFiberID(fiberID) {
              clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
            }
            function clearWarningsForFiberID(fiberID) {
              clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
            }
            function updateMostRecentlyInspectedElementIfNecessary(fiberID) {
              if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {
                hasElementUpdatedSinceLastInspected = true;
              }
            }
            function onErrorOrWarning(fiber, type, args) {
              if (type === "error") {
                var maybeID = getFiberIDUnsafe(fiber);
                if (maybeID != null && forceErrorForFiberIDs.get(maybeID) === true) {
                  return;
                }
              }
              var message = format.apply(void 0, renderer_toConsumableArray(args));
              if (__DEBUG__) {
                debug("onErrorOrWarning", fiber, null, "".concat(type, ': "').concat(message, '"'));
              }
              fibersWithChangedErrorOrWarningCounts.add(fiber);
              var fiberMap = type === "error" ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;
              var messageMap = fiberMap.get(fiber);
              if (messageMap != null) {
                var count = messageMap.get(message) || 0;
                messageMap.set(message, count + 1);
              } else {
                fiberMap.set(fiber, new Map([[message, 1]]));
              }
              flushPendingErrorsAndWarningsAfterDelay();
            }
            if (true) {
              registerRenderer(renderer, onErrorOrWarning);
              var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
              var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
              var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
              if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
                patch({
                  appendComponentStack,
                  breakOnConsoleErrors,
                  showInlineWarningsAndErrors
                });
              }
            }
            var debug = function debug2(name, fiber, parentFiber) {
              var extraString = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
              if (__DEBUG__) {
                var displayName = fiber.tag + ":" + (getDisplayNameForFiber(fiber) || "null");
                var maybeID = getFiberIDUnsafe(fiber) || "<no id>";
                var parentDisplayName = parentFiber ? parentFiber.tag + ":" + (getDisplayNameForFiber(parentFiber) || "null") : "";
                var maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || "<no-id>" : "";
                console.groupCollapsed("[renderer] %c".concat(name, " %c").concat(displayName, " (").concat(maybeID, ") %c").concat(parentFiber ? "".concat(parentDisplayName, " (").concat(maybeParentID, ")") : "", " %c").concat(extraString), "color: red; font-weight: bold;", "color: blue;", "color: purple;", "color: black;");
                console.log(new Error().stack.split("\n").slice(1).join("\n"));
                console.groupEnd();
              }
            };
            var hideElementsWithDisplayNames = new Set();
            var hideElementsWithPaths = new Set();
            var hideElementsWithTypes = new Set();
            var traceUpdatesEnabled = false;
            var traceUpdatesForNodes = new Set();
            function applyComponentFilters(componentFilters) {
              hideElementsWithTypes.clear();
              hideElementsWithDisplayNames.clear();
              hideElementsWithPaths.clear();
              componentFilters.forEach(function(componentFilter) {
                if (!componentFilter.isEnabled) {
                  return;
                }
                switch (componentFilter.type) {
                  case ComponentFilterDisplayName:
                    if (componentFilter.isValid && componentFilter.value !== "") {
                      hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, "i"));
                    }
                    break;
                  case ComponentFilterElementType:
                    hideElementsWithTypes.add(componentFilter.value);
                    break;
                  case ComponentFilterLocation:
                    if (componentFilter.isValid && componentFilter.value !== "") {
                      hideElementsWithPaths.add(new RegExp(componentFilter.value, "i"));
                    }
                    break;
                  case ComponentFilterHOC:
                    hideElementsWithDisplayNames.add(new RegExp("\\("));
                    break;
                  default:
                    console.warn('Invalid component filter type "'.concat(componentFilter.type, '"'));
                    break;
                }
              });
            }
            if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {
              applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);
            } else {
              applyComponentFilters(getDefaultComponentFilters());
            }
            function updateComponentFilters(componentFilters) {
              if (isProfiling) {
                throw Error("Cannot modify filter preferences while profiling");
              }
              hook.getFiberRoots(rendererID).forEach(function(root) {
                currentRootID = getOrGenerateFiberID(root.current);
                pushOperation(TREE_OPERATION_REMOVE_ROOT);
                flushPendingEvents(root);
                currentRootID = -1;
              });
              applyComponentFilters(componentFilters);
              rootDisplayNameCounter.clear();
              hook.getFiberRoots(rendererID).forEach(function(root) {
                currentRootID = getOrGenerateFiberID(root.current);
                setRootPseudoKey(currentRootID, root.current);
                mountFiberRecursively(root.current, null, false, false);
                flushPendingEvents(root);
                currentRootID = -1;
              });
              reevaluateErrorsAndWarnings();
              flushPendingEvents();
            }
            function shouldFilterFiber(fiber) {
              var _debugSource = fiber._debugSource, tag = fiber.tag, type = fiber.type;
              switch (tag) {
                case DehydratedSuspenseComponent:
                  return true;
                case HostPortal:
                case HostText:
                case Fragment:
                case LegacyHiddenComponent:
                case OffscreenComponent:
                  return true;
                case HostRoot:
                  return false;
                default:
                  var typeSymbol = getTypeSymbol(type);
                  switch (typeSymbol) {
                    case CONCURRENT_MODE_NUMBER:
                    case CONCURRENT_MODE_SYMBOL_STRING:
                    case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                    case STRICT_MODE_NUMBER:
                    case STRICT_MODE_SYMBOL_STRING:
                      return true;
                    default:
                      break;
                  }
              }
              var elementType = getElementTypeForFiber(fiber);
              if (hideElementsWithTypes.has(elementType)) {
                return true;
              }
              if (hideElementsWithDisplayNames.size > 0) {
                var displayName = getDisplayNameForFiber(fiber);
                if (displayName != null) {
                  var _iterator3 = renderer_createForOfIteratorHelper(hideElementsWithDisplayNames), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var displayNameRegExp = _step3.value;
                      if (displayNameRegExp.test(displayName)) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                }
              }
              if (_debugSource != null && hideElementsWithPaths.size > 0) {
                var fileName = _debugSource.fileName;
                var _iterator4 = renderer_createForOfIteratorHelper(hideElementsWithPaths), _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                    var pathRegExp = _step4.value;
                    if (pathRegExp.test(fileName)) {
                      return true;
                    }
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              }
              return false;
            }
            function getElementTypeForFiber(fiber) {
              var type = fiber.type, tag = fiber.tag;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                  return ElementTypeClass;
                case FunctionComponent:
                case IndeterminateComponent:
                  return ElementTypeFunction;
                case ForwardRef:
                  return ElementTypeForwardRef;
                case HostRoot:
                  return ElementTypeRoot;
                case HostComponent:
                  return ElementTypeHostComponent;
                case HostPortal:
                case HostText:
                case Fragment:
                  return ElementTypeOtherOrUnknown;
                case MemoComponent:
                case SimpleMemoComponent:
                  return ElementTypeMemo;
                case SuspenseComponent:
                  return ElementTypeSuspense;
                case SuspenseListComponent:
                  return ElementTypeSuspenseList;
                default:
                  var typeSymbol = getTypeSymbol(type);
                  switch (typeSymbol) {
                    case CONCURRENT_MODE_NUMBER:
                    case CONCURRENT_MODE_SYMBOL_STRING:
                    case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                      return ElementTypeOtherOrUnknown;
                    case PROVIDER_NUMBER:
                    case PROVIDER_SYMBOL_STRING:
                      return ElementTypeContext;
                    case CONTEXT_NUMBER:
                    case CONTEXT_SYMBOL_STRING:
                      return ElementTypeContext;
                    case STRICT_MODE_NUMBER:
                    case STRICT_MODE_SYMBOL_STRING:
                      return ElementTypeOtherOrUnknown;
                    case PROFILER_NUMBER:
                    case PROFILER_SYMBOL_STRING:
                      return ElementTypeProfiler;
                    default:
                      return ElementTypeOtherOrUnknown;
                  }
              }
            }
            var fiberToIDMap = new Map();
            var idToArbitraryFiberMap = new Map();
            var idToTreeBaseDurationMap = new Map();
            var idToRootMap = new Map();
            var currentRootID = -1;
            function getOrGenerateFiberID(fiber) {
              var id = null;
              if (fiberToIDMap.has(fiber)) {
                id = fiberToIDMap.get(fiber);
              } else {
                var _alternate = fiber.alternate;
                if (_alternate !== null && fiberToIDMap.has(_alternate)) {
                  id = fiberToIDMap.get(_alternate);
                }
              }
              var didGenerateID = false;
              if (id === null) {
                didGenerateID = true;
                id = getUID();
              }
              var refinedID = id;
              if (!fiberToIDMap.has(fiber)) {
                fiberToIDMap.set(fiber, refinedID);
                idToArbitraryFiberMap.set(refinedID, fiber);
              }
              var alternate = fiber.alternate;
              if (alternate !== null) {
                if (!fiberToIDMap.has(alternate)) {
                  fiberToIDMap.set(alternate, refinedID);
                }
              }
              if (__DEBUG__) {
                if (didGenerateID) {
                  debug("getOrGenerateFiberID()", fiber, fiber.return, "Generated a new UID");
                }
              }
              return refinedID;
            }
            function getFiberIDThrows(fiber) {
              var maybeID = getFiberIDUnsafe(fiber);
              if (maybeID !== null) {
                return maybeID;
              }
              throw Error('Could not find ID for Fiber "'.concat(getDisplayNameForFiber(fiber) || "", '"'));
            }
            function getFiberIDUnsafe(fiber) {
              if (fiberToIDMap.has(fiber)) {
                return fiberToIDMap.get(fiber);
              } else {
                var alternate = fiber.alternate;
                if (alternate !== null && fiberToIDMap.has(alternate)) {
                  return fiberToIDMap.get(alternate);
                }
              }
              return null;
            }
            function untrackFiberID(fiber) {
              if (__DEBUG__) {
                debug("untrackFiberID()", fiber, fiber.return, "schedule after delay");
              }
              untrackFibersSet.add(fiber);
              if (untrackFibersTimeoutID === null) {
                untrackFibersTimeoutID = setTimeout(untrackFibers, 1e3);
              }
            }
            var untrackFibersSet = new Set();
            var untrackFibersTimeoutID = null;
            function untrackFibers() {
              if (untrackFibersTimeoutID !== null) {
                clearTimeout(untrackFibersTimeoutID);
                untrackFibersTimeoutID = null;
              }
              untrackFibersSet.forEach(function(fiber) {
                var fiberID = getFiberIDUnsafe(fiber);
                if (fiberID !== null) {
                  idToArbitraryFiberMap.delete(fiberID);
                  clearErrorsForFiberID(fiberID);
                  clearWarningsForFiberID(fiberID);
                }
                fiberToIDMap.delete(fiber);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  fiberToIDMap.delete(alternate);
                }
                if (forceErrorForFiberIDs.has(fiberID)) {
                  forceErrorForFiberIDs.delete(fiberID);
                  if (forceErrorForFiberIDs.size === 0 && setErrorHandler != null) {
                    setErrorHandler(shouldErrorFiberAlwaysNull);
                  }
                }
              });
              untrackFibersSet.clear();
            }
            function getChangeDescription(prevFiber, nextFiber) {
              switch (getElementTypeForFiber(nextFiber)) {
                case ElementTypeClass:
                case ElementTypeFunction:
                case ElementTypeMemo:
                case ElementTypeForwardRef:
                  if (prevFiber === null) {
                    return {
                      context: null,
                      didHooksChange: false,
                      isFirstMount: true,
                      props: null,
                      state: null
                    };
                  } else {
                    var data = {
                      context: getContextChangedKeys(nextFiber),
                      didHooksChange: false,
                      isFirstMount: false,
                      props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),
                      state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)
                    };
                    if (enableProfilerChangedHookIndices) {
                      var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);
                      data.hooks = indices;
                      data.didHooksChange = indices !== null && indices.length > 0;
                    } else {
                      data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);
                    }
                    return data;
                  }
                default:
                  return null;
              }
            }
            function updateContextsForFiber(fiber) {
              switch (getElementTypeForFiber(fiber)) {
                case ElementTypeFunction:
                case ElementTypeClass:
                  if (idToContextsMap !== null) {
                    var id = getFiberIDThrows(fiber);
                    var contexts = getContextsForFiber(fiber);
                    if (contexts !== null) {
                      idToContextsMap.set(id, contexts);
                    }
                  }
                  break;
                default:
                  break;
              }
            }
            var NO_CONTEXT = {};
            function getContextsForFiber(fiber) {
              var legacyContext = NO_CONTEXT;
              var modernContext = NO_CONTEXT;
              switch (getElementTypeForFiber(fiber)) {
                case ElementTypeClass:
                  var instance = fiber.stateNode;
                  if (instance != null) {
                    if (instance.constructor && instance.constructor.contextType != null) {
                      modernContext = instance.context;
                    } else {
                      legacyContext = instance.context;
                      if (legacyContext && Object.keys(legacyContext).length === 0) {
                        legacyContext = NO_CONTEXT;
                      }
                    }
                  }
                  return [legacyContext, modernContext];
                case ElementTypeFunction:
                  var dependencies = fiber.dependencies;
                  if (dependencies && dependencies.firstContext) {
                    modernContext = dependencies.firstContext;
                  }
                  return [legacyContext, modernContext];
                default:
                  return null;
              }
            }
            function crawlToInitializeContextsMap(fiber) {
              updateContextsForFiber(fiber);
              var current = fiber.child;
              while (current !== null) {
                crawlToInitializeContextsMap(current);
                current = current.sibling;
              }
            }
            function getContextChangedKeys(fiber) {
              if (idToContextsMap !== null) {
                var id = getFiberIDThrows(fiber);
                var prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;
                var nextContexts = getContextsForFiber(fiber);
                if (prevContexts == null || nextContexts == null) {
                  return null;
                }
                var _prevContexts = _slicedToArray(prevContexts, 2), prevLegacyContext = _prevContexts[0], prevModernContext = _prevContexts[1];
                var _nextContexts = _slicedToArray(nextContexts, 2), nextLegacyContext = _nextContexts[0], nextModernContext = _nextContexts[1];
                switch (getElementTypeForFiber(fiber)) {
                  case ElementTypeClass:
                    if (prevContexts && nextContexts) {
                      if (nextLegacyContext !== NO_CONTEXT) {
                        return getChangedKeys(prevLegacyContext, nextLegacyContext);
                      } else if (nextModernContext !== NO_CONTEXT) {
                        return prevModernContext !== nextModernContext;
                      }
                    }
                    break;
                  case ElementTypeFunction:
                    if (nextModernContext !== NO_CONTEXT) {
                      var prevContext = prevModernContext;
                      var nextContext = nextModernContext;
                      while (prevContext && nextContext) {
                        if (!shared_objectIs(prevContext.memoizedValue, nextContext.memoizedValue)) {
                          return true;
                        }
                        prevContext = prevContext.next;
                        nextContext = nextContext.next;
                      }
                      return false;
                    }
                    break;
                  default:
                    break;
                }
              }
              return null;
            }
            function areHookInputsEqual(nextDeps, prevDeps) {
              if (prevDeps === null) {
                return false;
              }
              for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
                if (shared_objectIs(nextDeps[i2], prevDeps[i2])) {
                  continue;
                }
                return false;
              }
              return true;
            }
            function isEffect(memoizedState) {
              if (memoizedState === null || renderer_typeof(memoizedState) !== "object") {
                return false;
              }
              var deps = memoizedState.deps;
              var hasOwnProperty2 = Object.prototype.hasOwnProperty.bind(memoizedState);
              return hasOwnProperty2("create") && hasOwnProperty2("destroy") && hasOwnProperty2("deps") && hasOwnProperty2("next") && hasOwnProperty2("tag") && (deps === null || shared_isArray(deps));
            }
            function didHookChange(prev, next) {
              var prevMemoizedState = prev.memoizedState;
              var nextMemoizedState = next.memoizedState;
              if (isEffect(prevMemoizedState) && isEffect(nextMemoizedState)) {
                return prevMemoizedState !== nextMemoizedState && !areHookInputsEqual(nextMemoizedState.deps, prevMemoizedState.deps);
              }
              return nextMemoizedState !== prevMemoizedState;
            }
            function didHooksChange(prev, next) {
              if (prev == null || next == null) {
                return false;
              }
              if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                while (next !== null) {
                  if (didHookChange(prev, next)) {
                    return true;
                  } else {
                    next = next.next;
                    prev = prev.next;
                  }
                }
              }
              return false;
            }
            function getChangedHooksIndices(prev, next) {
              if (enableProfilerChangedHookIndices) {
                if (prev == null || next == null) {
                  return null;
                }
                var indices = [];
                var index = 0;
                if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                  while (next !== null) {
                    if (didHookChange(prev, next)) {
                      indices.push(index);
                    }
                    next = next.next;
                    prev = prev.next;
                    index++;
                  }
                }
                return indices;
              }
              return null;
            }
            function getChangedKeys(prev, next) {
              if (prev == null || next == null) {
                return null;
              }
              if (next.hasOwnProperty("baseState") && next.hasOwnProperty("memoizedState") && next.hasOwnProperty("next") && next.hasOwnProperty("queue")) {
                return null;
              }
              var keys = new Set([].concat(renderer_toConsumableArray(Object.keys(prev)), renderer_toConsumableArray(Object.keys(next))));
              var changedKeys = [];
              var _iterator5 = renderer_createForOfIteratorHelper(keys), _step5;
              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                  var key = _step5.value;
                  if (prev[key] !== next[key]) {
                    changedKeys.push(key);
                  }
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
              return changedKeys;
            }
            function didFiberRender(prevFiber, nextFiber) {
              switch (nextFiber.tag) {
                case ClassComponent:
                case FunctionComponent:
                case ContextConsumer:
                case MemoComponent:
                case SimpleMemoComponent:
                  return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;
                default:
                  return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;
              }
            }
            var pendingOperations = [];
            var pendingRealUnmountedIDs = [];
            var pendingSimulatedUnmountedIDs = [];
            var pendingOperationsQueue = [];
            var pendingStringTable = new Map();
            var pendingStringTableLength = 0;
            var pendingUnmountedRootID = null;
            function pushOperation(op) {
              if (false) {
              }
              pendingOperations.push(op);
            }
            function flushOrQueueOperations(operations) {
              if (pendingOperationsQueue !== null) {
                pendingOperationsQueue.push(operations);
              } else {
                hook.emit("operations", operations);
              }
            }
            var flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
            function clearPendingErrorsAndWarningsAfterDelay() {
              if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {
                clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);
                flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
              }
            }
            function flushPendingErrorsAndWarningsAfterDelay() {
              clearPendingErrorsAndWarningsAfterDelay();
              flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(function() {
                flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
                if (pendingOperations.length > 0) {
                  return;
                }
                recordPendingErrorsAndWarnings();
                if (pendingOperations.length === 0) {
                  return;
                }
                var operations = new Array(3 + pendingOperations.length);
                operations[0] = rendererID;
                operations[1] = currentRootID;
                operations[2] = 0;
                for (var j = 0; j < pendingOperations.length; j++) {
                  operations[3 + j] = pendingOperations[j];
                }
                flushOrQueueOperations(operations);
                pendingOperations.length = 0;
              }, 1e3);
            }
            function reevaluateErrorsAndWarnings() {
              fibersWithChangedErrorOrWarningCounts.clear();
              fiberIDToErrorsMap.forEach(function(countMap, fiberID) {
                var fiber = idToArbitraryFiberMap.get(fiberID);
                if (fiber != null) {
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                }
              });
              fiberIDToWarningsMap.forEach(function(countMap, fiberID) {
                var fiber = idToArbitraryFiberMap.get(fiberID);
                if (fiber != null) {
                  fibersWithChangedErrorOrWarningCounts.add(fiber);
                }
              });
              recordPendingErrorsAndWarnings();
            }
            function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
              var newCount = 0;
              var messageCountMap = fiberIDToMessageCountMap.get(fiberID);
              var pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);
              if (pendingMessageCountMap != null) {
                if (messageCountMap == null) {
                  messageCountMap = pendingMessageCountMap;
                  fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);
                } else {
                  var refinedMessageCountMap = messageCountMap;
                  pendingMessageCountMap.forEach(function(pendingCount, message) {
                    var previousCount = refinedMessageCountMap.get(message) || 0;
                    refinedMessageCountMap.set(message, previousCount + pendingCount);
                  });
                }
              }
              if (!shouldFilterFiber(fiber)) {
                if (messageCountMap != null) {
                  messageCountMap.forEach(function(count) {
                    newCount += count;
                  });
                }
              }
              pendingFiberToMessageCountMap.delete(fiber);
              return newCount;
            }
            function recordPendingErrorsAndWarnings() {
              clearPendingErrorsAndWarningsAfterDelay();
              fibersWithChangedErrorOrWarningCounts.forEach(function(fiber) {
                var fiberID = getFiberIDUnsafe(fiber);
                if (fiberID === null) {
                } else {
                  var errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
                  var warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
                  pushOperation(TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS);
                  pushOperation(fiberID);
                  pushOperation(errorCount);
                  pushOperation(warningCount);
                }
                pendingFiberToErrorsMap.delete(fiber);
                pendingFiberToWarningsMap.delete(fiber);
              });
              fibersWithChangedErrorOrWarningCounts.clear();
            }
            function flushPendingEvents(root) {
              recordPendingErrorsAndWarnings();
              if (pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
                if (!isProfiling) {
                  return;
                }
              }
              var numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
              var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
              var i2 = 0;
              operations[i2++] = rendererID;
              operations[i2++] = currentRootID;
              operations[i2++] = pendingStringTableLength;
              pendingStringTable.forEach(function(value, key) {
                operations[i2++] = key.length;
                var encodedKey = utfEncodeString(key);
                for (var j2 = 0; j2 < encodedKey.length; j2++) {
                  operations[i2 + j2] = encodedKey[j2];
                }
                i2 += key.length;
              });
              if (numUnmountIDs > 0) {
                operations[i2++] = TREE_OPERATION_REMOVE;
                operations[i2++] = numUnmountIDs;
                for (var j = pendingRealUnmountedIDs.length - 1; j >= 0; j--) {
                  operations[i2++] = pendingRealUnmountedIDs[j];
                }
                for (var _j = 0; _j < pendingSimulatedUnmountedIDs.length; _j++) {
                  operations[i2 + _j] = pendingSimulatedUnmountedIDs[_j];
                }
                i2 += pendingSimulatedUnmountedIDs.length;
                if (pendingUnmountedRootID !== null) {
                  operations[i2] = pendingUnmountedRootID;
                  i2++;
                }
              }
              for (var _j2 = 0; _j2 < pendingOperations.length; _j2++) {
                operations[i2 + _j2] = pendingOperations[_j2];
              }
              i2 += pendingOperations.length;
              flushOrQueueOperations(operations);
              pendingOperations.length = 0;
              pendingRealUnmountedIDs.length = 0;
              pendingSimulatedUnmountedIDs.length = 0;
              pendingUnmountedRootID = null;
              pendingStringTable.clear();
              pendingStringTableLength = 0;
            }
            function getStringID(str) {
              if (str === null) {
                return 0;
              }
              var existingID = pendingStringTable.get(str);
              if (existingID !== void 0) {
                return existingID;
              }
              var stringID = pendingStringTable.size + 1;
              pendingStringTable.set(str, stringID);
              pendingStringTableLength += str.length + 1;
              return stringID;
            }
            function recordMount(fiber, parentFiber) {
              var isRoot = fiber.tag === HostRoot;
              var id = getOrGenerateFiberID(fiber);
              if (__DEBUG__) {
                debug("recordMount()", fiber, parentFiber);
              }
              var hasOwnerMetadata = fiber.hasOwnProperty("_debugOwner");
              var isProfilingSupported = fiber.hasOwnProperty("treeBaseDuration");
              if (isRoot) {
                pushOperation(TREE_OPERATION_ADD);
                pushOperation(id);
                pushOperation(ElementTypeRoot);
                pushOperation(isProfilingSupported ? 1 : 0);
                pushOperation(hasOwnerMetadata ? 1 : 0);
                if (isProfiling) {
                  if (displayNamesByRootID !== null) {
                    displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));
                  }
                }
              } else {
                var key = fiber.key;
                var displayName = getDisplayNameForFiber(fiber);
                var elementType = getElementTypeForFiber(fiber);
                var _debugOwner = fiber._debugOwner;
                var ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;
                var parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;
                var displayNameStringID = getStringID(displayName);
                var keyString = key === null ? null : "" + key;
                var keyStringID = getStringID(keyString);
                pushOperation(TREE_OPERATION_ADD);
                pushOperation(id);
                pushOperation(elementType);
                pushOperation(parentID);
                pushOperation(ownerID);
                pushOperation(displayNameStringID);
                pushOperation(keyStringID);
              }
              if (isProfilingSupported) {
                idToRootMap.set(id, currentRootID);
                recordProfilingDurations(fiber);
              }
            }
            function recordUnmount(fiber, isSimulated) {
              if (__DEBUG__) {
                debug("recordUnmount()", fiber, null, isSimulated ? "unmount is simulated" : "");
              }
              if (trackedPathMatchFiber !== null) {
                if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {
                  setTrackedPath(null);
                }
              }
              var unsafeID = getFiberIDUnsafe(fiber);
              if (unsafeID === null) {
                return;
              }
              var id = unsafeID;
              var isRoot = fiber.tag === HostRoot;
              if (isRoot) {
                pendingUnmountedRootID = id;
              } else if (!shouldFilterFiber(fiber)) {
                if (isSimulated) {
                  pendingSimulatedUnmountedIDs.push(id);
                } else {
                  pendingRealUnmountedIDs.push(id);
                }
              }
              if (!fiber._debugNeedsRemount) {
                untrackFiberID(fiber);
                var isProfilingSupported = fiber.hasOwnProperty("treeBaseDuration");
                if (isProfilingSupported) {
                  idToRootMap.delete(id);
                  idToTreeBaseDurationMap.delete(id);
                }
              }
            }
            function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {
              var fiber = firstChild;
              while (fiber !== null) {
                getOrGenerateFiberID(fiber);
                if (__DEBUG__) {
                  debug("mountFiberRecursively()", fiber, parentFiber);
                }
                var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);
                var shouldIncludeInTree = !shouldFilterFiber(fiber);
                if (shouldIncludeInTree) {
                  recordMount(fiber, parentFiber);
                }
                if (traceUpdatesEnabled) {
                  if (traceNearestHostComponentUpdate) {
                    var elementType = getElementTypeForFiber(fiber);
                    if (elementType === ElementTypeHostComponent) {
                      traceUpdatesForNodes.add(fiber.stateNode);
                      traceNearestHostComponentUpdate = false;
                    }
                  }
                }
                var isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;
                if (isSuspense) {
                  var isTimedOut = fiber.memoizedState !== null;
                  if (isTimedOut) {
                    var primaryChildFragment = fiber.child;
                    var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                    var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;
                    if (fallbackChild !== null) {
                      mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                    }
                  } else {
                    var primaryChild = null;
                    var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;
                    if (areSuspenseChildrenConditionallyWrapped) {
                      primaryChild = fiber.child;
                    } else if (fiber.child !== null) {
                      primaryChild = fiber.child.child;
                    }
                    if (primaryChild !== null) {
                      mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                    }
                  }
                } else {
                  if (fiber.child !== null) {
                    mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                  }
                }
                updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);
                fiber = traverseSiblings ? fiber.sibling : null;
              }
            }
            function unmountFiberChildrenRecursively(fiber) {
              if (__DEBUG__) {
                debug("unmountFiberChildrenRecursively()", fiber);
              }
              var isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;
              var child = fiber.child;
              if (isTimedOutSuspense) {
                var primaryChildFragment = fiber.child;
                var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                child = fallbackChildFragment ? fallbackChildFragment.child : null;
              }
              while (child !== null) {
                if (child.return !== null) {
                  unmountFiberChildrenRecursively(child);
                  recordUnmount(child, true);
                }
                child = child.sibling;
              }
            }
            function recordProfilingDurations(fiber) {
              var id = getFiberIDThrows(fiber);
              var actualDuration = fiber.actualDuration, treeBaseDuration = fiber.treeBaseDuration;
              idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);
              if (isProfiling) {
                var alternate = fiber.alternate;
                if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {
                  var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1e3);
                  pushOperation(TREE_OPERATION_UPDATE_TREE_BASE_DURATION);
                  pushOperation(id);
                  pushOperation(convertedTreeBaseDuration);
                }
                if (alternate == null || didFiberRender(alternate, fiber)) {
                  if (actualDuration != null) {
                    var selfDuration = actualDuration;
                    var child = fiber.child;
                    while (child !== null) {
                      selfDuration -= child.actualDuration || 0;
                      child = child.sibling;
                    }
                    var metadata = currentCommitProfilingMetadata;
                    metadata.durations.push(id, actualDuration, selfDuration);
                    metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);
                    if (recordChangeDescriptions) {
                      var changeDescription = getChangeDescription(alternate, fiber);
                      if (changeDescription !== null) {
                        if (metadata.changeDescriptions !== null) {
                          metadata.changeDescriptions.set(id, changeDescription);
                        }
                      }
                      updateContextsForFiber(fiber);
                    }
                  }
                }
              }
            }
            function recordResetChildren(fiber, childSet) {
              if (__DEBUG__) {
                debug("recordResetChildren()", childSet, fiber);
              }
              var nextChildren = [];
              var child = childSet;
              while (child !== null) {
                findReorderedChildrenRecursively(child, nextChildren);
                child = child.sibling;
              }
              var numChildren = nextChildren.length;
              if (numChildren < 2) {
                return;
              }
              pushOperation(TREE_OPERATION_REORDER_CHILDREN);
              pushOperation(getFiberIDThrows(fiber));
              pushOperation(numChildren);
              for (var i2 = 0; i2 < nextChildren.length; i2++) {
                pushOperation(nextChildren[i2]);
              }
            }
            function findReorderedChildrenRecursively(fiber, nextChildren) {
              if (!shouldFilterFiber(fiber)) {
                nextChildren.push(getFiberIDThrows(fiber));
              } else {
                var child = fiber.child;
                var isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = fiber.child;
                  var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                  var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;
                  if (fallbackChild !== null) {
                    child = fallbackChild;
                  }
                }
                while (child !== null) {
                  findReorderedChildrenRecursively(child, nextChildren);
                  child = child.sibling;
                }
              }
            }
            function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {
              var id = getOrGenerateFiberID(nextFiber);
              if (__DEBUG__) {
                debug("updateFiberRecursively()", nextFiber, parentFiber);
              }
              if (traceUpdatesEnabled) {
                var elementType = getElementTypeForFiber(nextFiber);
                if (traceNearestHostComponentUpdate) {
                  if (elementType === ElementTypeHostComponent) {
                    traceUpdatesForNodes.add(nextFiber.stateNode);
                    traceNearestHostComponentUpdate = false;
                  }
                } else {
                  if (elementType === ElementTypeFunction || elementType === ElementTypeClass || elementType === ElementTypeContext || elementType === ElementTypeMemo || elementType === ElementTypeForwardRef) {
                    traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);
                  }
                }
              }
              if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {
                hasElementUpdatedSinceLastInspected = true;
              }
              var shouldIncludeInTree = !shouldFilterFiber(nextFiber);
              var isSuspense = nextFiber.tag === SuspenseComponent;
              var shouldResetChildren = false;
              var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;
              var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;
              if (prevDidTimeout && nextDidTimeOut) {
                var nextFiberChild = nextFiber.child;
                var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null;
                var prevFiberChild = prevFiber.child;
                var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;
                if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {
                  shouldResetChildren = true;
                }
              } else if (prevDidTimeout && !nextDidTimeOut) {
                var nextPrimaryChildSet = nextFiber.child;
                if (nextPrimaryChildSet !== null) {
                  mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
                shouldResetChildren = true;
              } else if (!prevDidTimeout && nextDidTimeOut) {
                unmountFiberChildrenRecursively(prevFiber);
                var _nextFiberChild = nextFiber.child;
                var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;
                if (_nextFallbackChildSet != null) {
                  mountFiberRecursively(_nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
                  shouldResetChildren = true;
                }
              } else {
                if (nextFiber.child !== prevFiber.child) {
                  var nextChild = nextFiber.child;
                  var prevChildAtSameIndex = prevFiber.child;
                  while (nextChild) {
                    if (nextChild.alternate) {
                      var prevChild = nextChild.alternate;
                      if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {
                        shouldResetChildren = true;
                      }
                      if (prevChild !== prevChildAtSameIndex) {
                        shouldResetChildren = true;
                      }
                    } else {
                      mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);
                      shouldResetChildren = true;
                    }
                    nextChild = nextChild.sibling;
                    if (!shouldResetChildren && prevChildAtSameIndex !== null) {
                      prevChildAtSameIndex = prevChildAtSameIndex.sibling;
                    }
                  }
                  if (prevChildAtSameIndex !== null) {
                    shouldResetChildren = true;
                  }
                } else {
                  if (traceUpdatesEnabled) {
                    if (traceNearestHostComponentUpdate) {
                      var hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));
                      hostFibers.forEach(function(hostFiber) {
                        traceUpdatesForNodes.add(hostFiber.stateNode);
                      });
                    }
                  }
                }
              }
              if (shouldIncludeInTree) {
                var isProfilingSupported = nextFiber.hasOwnProperty("treeBaseDuration");
                if (isProfilingSupported) {
                  recordProfilingDurations(nextFiber);
                }
              }
              if (shouldResetChildren) {
                if (shouldIncludeInTree) {
                  var nextChildSet = nextFiber.child;
                  if (nextDidTimeOut) {
                    var _nextFiberChild2 = nextFiber.child;
                    nextChildSet = _nextFiberChild2 ? _nextFiberChild2.sibling : null;
                  }
                  if (nextChildSet != null) {
                    recordResetChildren(nextFiber, nextChildSet);
                  }
                  return false;
                } else {
                  return true;
                }
              } else {
                return false;
              }
            }
            function cleanup() {
            }
            function rootSupportsProfiling(root) {
              if (root.memoizedInteractions != null) {
                return true;
              } else if (root.current != null && root.current.hasOwnProperty("treeBaseDuration")) {
                return true;
              } else {
                return false;
              }
            }
            function flushInitialOperations() {
              var localPendingOperationsQueue = pendingOperationsQueue;
              pendingOperationsQueue = null;
              if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {
                localPendingOperationsQueue.forEach(function(operations) {
                  hook.emit("operations", operations);
                });
              } else {
                if (trackedPath !== null) {
                  mightBeOnTrackedPath = true;
                }
                hook.getFiberRoots(rendererID).forEach(function(root) {
                  currentRootID = getOrGenerateFiberID(root.current);
                  setRootPseudoKey(currentRootID, root.current);
                  if (isProfiling && rootSupportsProfiling(root)) {
                    currentCommitProfilingMetadata = {
                      changeDescriptions: recordChangeDescriptions ? new Map() : null,
                      durations: [],
                      commitTime: renderer_getCurrentTime() - profilingStartTime,
                      maxActualDuration: 0,
                      priorityLevel: null,
                      updaters: getUpdatersList(root),
                      effectDuration: null,
                      passiveEffectDuration: null
                    };
                  }
                  mountFiberRecursively(root.current, null, false, false);
                  flushPendingEvents(root);
                  currentRootID = -1;
                });
              }
            }
            function getUpdatersList(root) {
              return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).map(fiberToSerializedElement) : null;
            }
            function handleCommitFiberUnmount(fiber) {
              recordUnmount(fiber, false);
            }
            function handlePostCommitFiberRoot(root) {
              if (isProfiling && rootSupportsProfiling(root)) {
                if (currentCommitProfilingMetadata !== null) {
                  var _getEffectDurations = getEffectDurations(root), effectDuration = _getEffectDurations.effectDuration, passiveEffectDuration = _getEffectDurations.passiveEffectDuration;
                  currentCommitProfilingMetadata.effectDuration = effectDuration;
                  currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;
                }
              }
            }
            function handleCommitFiberRoot(root, priorityLevel) {
              var current = root.current;
              var alternate = current.alternate;
              untrackFibers();
              currentRootID = getOrGenerateFiberID(current);
              if (trackedPath !== null) {
                mightBeOnTrackedPath = true;
              }
              if (traceUpdatesEnabled) {
                traceUpdatesForNodes.clear();
              }
              var isProfilingSupported = rootSupportsProfiling(root);
              if (isProfiling && isProfilingSupported) {
                currentCommitProfilingMetadata = {
                  changeDescriptions: recordChangeDescriptions ? new Map() : null,
                  durations: [],
                  commitTime: renderer_getCurrentTime() - profilingStartTime,
                  maxActualDuration: 0,
                  priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),
                  updaters: getUpdatersList(root),
                  effectDuration: null,
                  passiveEffectDuration: null
                };
              }
              if (alternate) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                  setRootPseudoKey(currentRootID, current);
                  mountFiberRecursively(current, null, false, false);
                } else if (wasMounted && isMounted) {
                  updateFiberRecursively(current, alternate, null, false);
                } else if (wasMounted && !isMounted) {
                  removeRootPseudoKey(currentRootID);
                  recordUnmount(current, false);
                }
              } else {
                setRootPseudoKey(currentRootID, current);
                mountFiberRecursively(current, null, false, false);
              }
              if (isProfiling && isProfilingSupported) {
                var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);
                if (commitProfilingMetadata != null) {
                  commitProfilingMetadata.push(currentCommitProfilingMetadata);
                } else {
                  rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);
                }
              }
              flushPendingEvents(root);
              if (traceUpdatesEnabled) {
                hook.emit("traceUpdates", traceUpdatesForNodes);
              }
              currentRootID = -1;
            }
            function findAllCurrentHostFibers(id) {
              var fibers = [];
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (!fiber) {
                return fibers;
              }
              var node = fiber;
              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  fibers.push(node);
                } else if (node.child) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return fibers;
                }
                while (!node.sibling) {
                  if (!node.return || node.return === fiber) {
                    return fibers;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
              return fibers;
            }
            function findNativeNodesForFiberID(id) {
              try {
                var _fiber3 = findCurrentFiberUsingSlowPathById(id);
                if (_fiber3 === null) {
                  return null;
                }
                var isTimedOutSuspense = _fiber3.tag === SuspenseComponent && _fiber3.memoizedState !== null;
                if (isTimedOutSuspense) {
                  var maybeFallbackFiber = _fiber3.child && _fiber3.child.sibling;
                  if (maybeFallbackFiber != null) {
                    _fiber3 = maybeFallbackFiber;
                  }
                }
                var hostFibers = findAllCurrentHostFibers(id);
                return hostFibers.map(function(hostFiber) {
                  return hostFiber.stateNode;
                }).filter(Boolean);
              } catch (err) {
                return null;
              }
            }
            function getDisplayNameForFiberID(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              return fiber != null ? getDisplayNameForFiber(fiber) : null;
            }
            function getFiberIDForNative(hostInstance) {
              var findNearestUnfilteredAncestor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var fiber = renderer.findFiberByHostInstance(hostInstance);
              if (fiber != null) {
                if (findNearestUnfilteredAncestor) {
                  while (fiber !== null && shouldFilterFiber(fiber)) {
                    fiber = fiber.return;
                  }
                }
                return getFiberIDThrows(fiber);
              }
              return null;
            }
            var MOUNTING = 1;
            var MOUNTED = 2;
            var UNMOUNTED = 3;
            function isFiberMountedImpl(fiber) {
              var node = fiber;
              var prevNode = null;
              if (!fiber.alternate) {
                if ((getFiberFlags(node) & Placement) !== NoFlags) {
                  return MOUNTING;
                }
                if ((getFiberFlags(node) & Incomplete) !== NoFlags) {
                  return UNMOUNTED;
                }
                while (node.return) {
                  prevNode = node;
                  node = node.return;
                  if ((getFiberFlags(node) & Placement) !== NoFlags) {
                    return MOUNTING;
                  }
                  if ((getFiberFlags(node) & Incomplete) !== NoFlags) {
                    return UNMOUNTED;
                  }
                  var isTimedOutSuspense = node.tag === SuspenseComponent && node.memoizedState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = node.child;
                    var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                    if (prevNode !== fallbackChildFragment) {
                      return UNMOUNTED;
                    }
                  }
                }
              } else {
                while (node.return) {
                  node = node.return;
                }
              }
              if (node.tag === HostRoot) {
                return MOUNTED;
              }
              return UNMOUNTED;
            }
            function findCurrentFiberUsingSlowPathById(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return null;
              }
              var alternate = fiber.alternate;
              if (!alternate) {
                var state = isFiberMountedImpl(fiber);
                if (state === UNMOUNTED) {
                  throw Error("Unable to find node on an unmounted component.");
                }
                if (state === MOUNTING) {
                  return null;
                }
                return fiber;
              }
              var a2 = fiber;
              var b2 = alternate;
              while (true) {
                var parentA = a2.return;
                if (parentA === null) {
                  break;
                }
                var parentB = parentA.alternate;
                if (parentB === null) {
                  var nextParent = parentA.return;
                  if (nextParent !== null) {
                    a2 = b2 = nextParent;
                    continue;
                  }
                  break;
                }
                if (parentA.child === parentB.child) {
                  var child = parentA.child;
                  while (child) {
                    if (child === a2) {
                      if (isFiberMountedImpl(parentA) !== MOUNTED) {
                        throw Error("Unable to find node on an unmounted component.");
                      }
                      return fiber;
                    }
                    if (child === b2) {
                      if (isFiberMountedImpl(parentA) !== MOUNTED) {
                        throw Error("Unable to find node on an unmounted component.");
                      }
                      return alternate;
                    }
                    child = child.sibling;
                  }
                  throw Error("Unable to find node on an unmounted component.");
                }
                if (a2.return !== b2.return) {
                  a2 = parentA;
                  b2 = parentB;
                } else {
                  var didFindChild = false;
                  var _child = parentA.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentA;
                      b2 = parentB;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentA;
                      a2 = parentB;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    _child = parentB.child;
                    while (_child) {
                      if (_child === a2) {
                        didFindChild = true;
                        a2 = parentB;
                        b2 = parentA;
                        break;
                      }
                      if (_child === b2) {
                        didFindChild = true;
                        b2 = parentB;
                        a2 = parentA;
                        break;
                      }
                      _child = _child.sibling;
                    }
                    if (!didFindChild) {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
                if (a2.alternate !== b2) {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (a2.tag !== HostRoot) {
                throw Error("Unable to find node on an unmounted component.");
              }
              if (a2.stateNode.current === a2) {
                return fiber;
              }
              return alternate;
            }
            function prepareViewAttributeSource(id, path) {
              if (isMostRecentlyInspectedElement(id)) {
                window.$attribute = getInObject(mostRecentlyInspectedElement, path);
              }
            }
            function prepareViewElementSource(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var elementType = fiber.elementType, tag = fiber.tag, type = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                case IndeterminateComponent:
                case FunctionComponent:
                  global2.$type = type;
                  break;
                case ForwardRef:
                  global2.$type = type.render;
                  break;
                case MemoComponent:
                case SimpleMemoComponent:
                  global2.$type = elementType != null && elementType.type != null ? elementType.type : type;
                  break;
                default:
                  global2.$type = null;
                  break;
              }
            }
            function fiberToSerializedElement(fiber) {
              return {
                displayName: getDisplayNameForFiber(fiber) || "Anonymous",
                id: getFiberIDThrows(fiber),
                key: fiber.key,
                type: getElementTypeForFiber(fiber)
              };
            }
            function getOwnersList(id) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber == null) {
                return null;
              }
              var _debugOwner = fiber._debugOwner;
              var owners = [fiberToSerializedElement(fiber)];
              if (_debugOwner) {
                var owner = _debugOwner;
                while (owner !== null) {
                  owners.unshift(fiberToSerializedElement(owner));
                  owner = owner._debugOwner || null;
                }
              }
              return owners;
            }
            function getInstanceAndStyle(id) {
              var instance = null;
              var style = null;
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                instance = fiber.stateNode;
                if (fiber.memoizedProps !== null) {
                  style = fiber.memoizedProps.style;
                }
              }
              return {
                instance,
                style
              };
            }
            function isErrorBoundary(fiber) {
              var tag = fiber.tag, type = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                  var instance = fiber.stateNode;
                  return typeof type.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function";
                default:
                  return false;
              }
            }
            function getNearestErrorBoundaryID(fiber) {
              var parent = fiber.return;
              while (parent !== null) {
                if (isErrorBoundary(parent)) {
                  return getFiberIDUnsafe(parent);
                }
                parent = parent.return;
              }
              return null;
            }
            function inspectElementRaw(id) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber == null) {
                return null;
              }
              var _debugOwner = fiber._debugOwner, _debugSource = fiber._debugSource, stateNode = fiber.stateNode, key = fiber.key, memoizedProps = fiber.memoizedProps, memoizedState = fiber.memoizedState, dependencies = fiber.dependencies, tag = fiber.tag, type = fiber.type;
              var elementType = getElementTypeForFiber(fiber);
              var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies);
              var showState = !usesHooks && tag !== CacheComponent;
              var typeSymbol = getTypeSymbol(type);
              var canViewSource = false;
              var context = null;
              if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {
                canViewSource = true;
                if (stateNode && stateNode.context != null) {
                  var shouldHideContext = elementType === ElementTypeClass && !(type.contextTypes || type.contextType);
                  if (!shouldHideContext) {
                    context = stateNode.context;
                  }
                }
              } else if (typeSymbol === CONTEXT_NUMBER || typeSymbol === CONTEXT_SYMBOL_STRING) {
                var consumerResolvedContext = type._context || type;
                context = consumerResolvedContext._currentValue || null;
                var _current = fiber.return;
                while (_current !== null) {
                  var currentType = _current.type;
                  var currentTypeSymbol = getTypeSymbol(currentType);
                  if (currentTypeSymbol === PROVIDER_NUMBER || currentTypeSymbol === PROVIDER_SYMBOL_STRING) {
                    var providerResolvedContext = currentType._context || currentType.context;
                    if (providerResolvedContext === consumerResolvedContext) {
                      context = _current.memoizedProps.value;
                      break;
                    }
                  }
                  _current = _current.return;
                }
              }
              var hasLegacyContext = false;
              if (context !== null) {
                hasLegacyContext = !!type.contextTypes;
                context = {
                  value: context
                };
              }
              var owners = null;
              if (_debugOwner) {
                owners = [];
                var owner = _debugOwner;
                while (owner !== null) {
                  owners.push(fiberToSerializedElement(owner));
                  owner = owner._debugOwner || null;
                }
              }
              var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;
              var hooks = null;
              if (usesHooks) {
                var originalConsoleMethods = {};
                for (var method in console) {
                  try {
                    originalConsoleMethods[method] = console[method];
                    console[method] = function() {
                    };
                  } catch (error) {
                  }
                }
                try {
                  hooks = Object(react_debug_tools["inspectHooksOfFiber"])(fiber, renderer.currentDispatcherRef, true);
                } finally {
                  for (var _method in originalConsoleMethods) {
                    try {
                      console[_method] = originalConsoleMethods[_method];
                    } catch (error) {
                    }
                  }
                }
              }
              var rootType = null;
              var current = fiber;
              while (current.return !== null) {
                current = current.return;
              }
              var fiberRoot = current.stateNode;
              if (fiberRoot != null && fiberRoot._debugRootType !== null) {
                rootType = fiberRoot._debugRootType;
              }
              var errors = fiberIDToErrorsMap.get(id) || new Map();
              var warnings = fiberIDToWarningsMap.get(id) || new Map();
              var isErrored = (fiber.flags & DidCapture) !== NoFlags || forceErrorForFiberIDs.get(id) === true;
              var targetErrorBoundaryID;
              if (isErrorBoundary(fiber)) {
                targetErrorBoundaryID = isErrored ? id : getNearestErrorBoundaryID(fiber);
              } else {
                targetErrorBoundaryID = getNearestErrorBoundaryID(fiber);
              }
              return {
                id,
                canEditHooks: typeof overrideHookState === "function",
                canEditFunctionProps: typeof overrideProps === "function",
                canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === "function",
                canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === "function",
                canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === "function",
                canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === "function",
                canToggleError: supportsTogglingError && targetErrorBoundaryID != null,
                isErrored,
                targetErrorBoundaryID,
                canToggleSuspense: supportsTogglingSuspense && (!isTimedOutSuspense || forceFallbackForSuspenseIDs.has(id)),
                canViewSource,
                hasLegacyContext,
                key: key != null ? key : null,
                displayName: getDisplayNameForFiber(fiber),
                type: elementType,
                context,
                hooks,
                props: memoizedProps,
                state: showState ? memoizedState : null,
                errors: Array.from(errors.entries()),
                warnings: Array.from(warnings.entries()),
                owners,
                source: _debugSource || null,
                rootType,
                rendererPackageName: renderer.rendererPackageName,
                rendererVersion: renderer.version
              };
            }
            var mostRecentlyInspectedElement = null;
            var hasElementUpdatedSinceLastInspected = false;
            var currentlyInspectedPaths = {};
            function isMostRecentlyInspectedElement(id) {
              return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;
            }
            function isMostRecentlyInspectedElementCurrent(id) {
              return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;
            }
            function mergeInspectedPaths(path) {
              var current = currentlyInspectedPaths;
              path.forEach(function(key) {
                if (!current[key]) {
                  current[key] = {};
                }
                current = current[key];
              });
            }
            function createIsPathAllowed(key, secondaryCategory) {
              return function isPathAllowed(path) {
                switch (secondaryCategory) {
                  case "hooks":
                    if (path.length === 1) {
                      return true;
                    }
                    if (path[path.length - 2] === "hookSource" && path[path.length - 1] === "fileName") {
                      return true;
                    }
                    if (path[path.length - 1] === "subHooks" || path[path.length - 2] === "subHooks") {
                      return true;
                    }
                    break;
                  default:
                    break;
                }
                var current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];
                if (!current) {
                  return false;
                }
                for (var i2 = 0; i2 < path.length; i2++) {
                  current = current[path[i2]];
                  if (!current) {
                    return false;
                  }
                }
                return true;
              };
            }
            function updateSelectedElement(inspectedElement) {
              var hooks = inspectedElement.hooks, id = inspectedElement.id, props = inspectedElement.props;
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var elementType = fiber.elementType, stateNode = fiber.stateNode, tag = fiber.tag, type = fiber.type;
              switch (tag) {
                case ClassComponent:
                case IncompleteClassComponent:
                case IndeterminateComponent:
                  global2.$r = stateNode;
                  break;
                case FunctionComponent:
                  global2.$r = {
                    hooks,
                    props,
                    type
                  };
                  break;
                case ForwardRef:
                  global2.$r = {
                    hooks,
                    props,
                    type: type.render
                  };
                  break;
                case MemoComponent:
                case SimpleMemoComponent:
                  global2.$r = {
                    hooks,
                    props,
                    type: elementType != null && elementType.type != null ? elementType.type : type
                  };
                  break;
                default:
                  global2.$r = null;
                  break;
              }
            }
            function storeAsGlobal(id, path, count) {
              if (isMostRecentlyInspectedElement(id)) {
                var value = getInObject(mostRecentlyInspectedElement, path);
                var key = "$reactTemp".concat(count);
                window[key] = value;
                console.log(key);
                console.log(value);
              }
            }
            function copyElementPath(id, path) {
              if (isMostRecentlyInspectedElement(id)) {
                copyToClipboard(getInObject(mostRecentlyInspectedElement, path));
              }
            }
            function inspectElement(requestID, id, path) {
              if (path !== null) {
                mergeInspectedPaths(path);
              }
              if (isMostRecentlyInspectedElement(id)) {
                if (!hasElementUpdatedSinceLastInspected) {
                  if (path !== null) {
                    var secondaryCategory = null;
                    if (path[0] === "hooks") {
                      secondaryCategory = "hooks";
                    }
                    return {
                      id,
                      responseID: requestID,
                      type: "hydrated-path",
                      path,
                      value: cleanForBridge(getInObject(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)
                    };
                  } else {
                    return {
                      id,
                      responseID: requestID,
                      type: "no-change"
                    };
                  }
                }
              } else {
                currentlyInspectedPaths = {};
              }
              hasElementUpdatedSinceLastInspected = false;
              mostRecentlyInspectedElement = inspectElementRaw(id);
              if (mostRecentlyInspectedElement === null) {
                return {
                  id,
                  responseID: requestID,
                  type: "not-found"
                };
              }
              updateSelectedElement(mostRecentlyInspectedElement);
              var cleanedInspectedElement = renderer_objectSpread({}, mostRecentlyInspectedElement);
              cleanedInspectedElement.context = cleanForBridge(cleanedInspectedElement.context, createIsPathAllowed("context", null));
              cleanedInspectedElement.hooks = cleanForBridge(cleanedInspectedElement.hooks, createIsPathAllowed("hooks", "hooks"));
              cleanedInspectedElement.props = cleanForBridge(cleanedInspectedElement.props, createIsPathAllowed("props", null));
              cleanedInspectedElement.state = cleanForBridge(cleanedInspectedElement.state, createIsPathAllowed("state", null));
              return {
                id,
                responseID: requestID,
                type: "full-data",
                value: cleanedInspectedElement
              };
            }
            function logElementToConsole(id) {
              var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);
              if (result === null) {
                console.warn('Could not find Fiber with id "'.concat(id, '"'));
                return;
              }
              var supportsGroup = typeof console.groupCollapsed === "function";
              if (supportsGroup) {
                console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || "Component", " />"), "color: var(--dom-tag-name-color); font-weight: normal;");
              }
              if (result.props !== null) {
                console.log("Props:", result.props);
              }
              if (result.state !== null) {
                console.log("State:", result.state);
              }
              if (result.hooks !== null) {
                console.log("Hooks:", result.hooks);
              }
              var nativeNodes = findNativeNodesForFiberID(id);
              if (nativeNodes !== null) {
                console.log("Nodes:", nativeNodes);
              }
              if (result.source !== null) {
                console.log("Location:", result.source);
              }
              if (window.chrome || /firefox/i.test(navigator.userAgent)) {
                console.log("Right-click any value to save it as a global variable for further inspection.");
              }
              if (supportsGroup) {
                console.groupEnd();
              }
            }
            function deletePath(type, id, hookID, path) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type) {
                  case "context":
                    path = path.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (path.length === 0) {
                        } else {
                          deletePathInObject(instance.context, path);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookStateDeletePath === "function") {
                      overrideHookStateDeletePath(fiber, hookID, path);
                    }
                    break;
                  case "props":
                    if (instance === null) {
                      if (typeof overridePropsDeletePath === "function") {
                        overridePropsDeletePath(fiber, path);
                      }
                    } else {
                      fiber.pendingProps = copyWithDelete(instance.props, path);
                      instance.forceUpdate();
                    }
                    break;
                  case "state":
                    deletePathInObject(instance.state, path);
                    instance.forceUpdate();
                    break;
                }
              }
            }
            function renamePath(type, id, hookID, oldPath, newPath) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type) {
                  case "context":
                    oldPath = oldPath.slice(1);
                    newPath = newPath.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (oldPath.length === 0) {
                        } else {
                          renamePathInObject(instance.context, oldPath, newPath);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookStateRenamePath === "function") {
                      overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);
                    }
                    break;
                  case "props":
                    if (instance === null) {
                      if (typeof overridePropsRenamePath === "function") {
                        overridePropsRenamePath(fiber, oldPath, newPath);
                      }
                    } else {
                      fiber.pendingProps = copyWithRename(instance.props, oldPath, newPath);
                      instance.forceUpdate();
                    }
                    break;
                  case "state":
                    renamePathInObject(instance.state, oldPath, newPath);
                    instance.forceUpdate();
                    break;
                }
              }
            }
            function overrideValueAtPath(type, id, hookID, path, value) {
              var fiber = findCurrentFiberUsingSlowPathById(id);
              if (fiber !== null) {
                var instance = fiber.stateNode;
                switch (type) {
                  case "context":
                    path = path.slice(1);
                    switch (fiber.tag) {
                      case ClassComponent:
                        if (path.length === 0) {
                          instance.context = value;
                        } else {
                          setInObject(instance.context, path, value);
                        }
                        instance.forceUpdate();
                        break;
                      case FunctionComponent:
                        break;
                    }
                    break;
                  case "hooks":
                    if (typeof overrideHookState === "function") {
                      overrideHookState(fiber, hookID, path, value);
                    }
                    break;
                  case "props":
                    switch (fiber.tag) {
                      case ClassComponent:
                        fiber.pendingProps = copyWithSet(instance.props, path, value);
                        instance.forceUpdate();
                        break;
                      default:
                        if (typeof overrideProps === "function") {
                          overrideProps(fiber, path, value);
                        }
                        break;
                    }
                    break;
                  case "state":
                    switch (fiber.tag) {
                      case ClassComponent:
                        setInObject(instance.state, path, value);
                        instance.forceUpdate();
                        break;
                    }
                    break;
                }
              }
            }
            var currentCommitProfilingMetadata = null;
            var displayNamesByRootID = null;
            var idToContextsMap = null;
            var initialTreeBaseDurationsMap = null;
            var initialIDToRootMap = null;
            var isProfiling = false;
            var profilingStartTime = 0;
            var recordChangeDescriptions = false;
            var rootToCommitProfilingMetadataMap = null;
            function getProfilingData() {
              var dataForRoots = [];
              if (rootToCommitProfilingMetadataMap === null) {
                throw Error("getProfilingData() called before any profiling data was recorded");
              }
              rootToCommitProfilingMetadataMap.forEach(function(commitProfilingMetadata, rootID) {
                var commitData = [];
                var initialTreeBaseDurations = [];
                var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || "Unknown";
                if (initialTreeBaseDurationsMap != null) {
                  initialTreeBaseDurationsMap.forEach(function(treeBaseDuration, id) {
                    if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {
                      initialTreeBaseDurations.push([id, treeBaseDuration]);
                    }
                  });
                }
                commitProfilingMetadata.forEach(function(commitProfilingData, commitIndex) {
                  var changeDescriptions = commitProfilingData.changeDescriptions, durations = commitProfilingData.durations, effectDuration = commitProfilingData.effectDuration, maxActualDuration = commitProfilingData.maxActualDuration, passiveEffectDuration = commitProfilingData.passiveEffectDuration, priorityLevel = commitProfilingData.priorityLevel, commitTime = commitProfilingData.commitTime, updaters = commitProfilingData.updaters;
                  var fiberActualDurations = [];
                  var fiberSelfDurations = [];
                  for (var i2 = 0; i2 < durations.length; i2 += 3) {
                    var fiberID = durations[i2];
                    fiberActualDurations.push([fiberID, durations[i2 + 1]]);
                    fiberSelfDurations.push([fiberID, durations[i2 + 2]]);
                  }
                  commitData.push({
                    changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,
                    duration: maxActualDuration,
                    effectDuration,
                    fiberActualDurations,
                    fiberSelfDurations,
                    passiveEffectDuration,
                    priorityLevel,
                    timestamp: commitTime,
                    updaters
                  });
                });
                dataForRoots.push({
                  commitData,
                  displayName,
                  initialTreeBaseDurations,
                  rootID
                });
              });
              return {
                dataForRoots,
                rendererID
              };
            }
            function startProfiling(shouldRecordChangeDescriptions) {
              if (isProfiling) {
                return;
              }
              recordChangeDescriptions = shouldRecordChangeDescriptions;
              displayNamesByRootID = new Map();
              initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);
              initialIDToRootMap = new Map(idToRootMap);
              idToContextsMap = new Map();
              hook.getFiberRoots(rendererID).forEach(function(root) {
                var rootID = getFiberIDThrows(root.current);
                displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));
                if (shouldRecordChangeDescriptions) {
                  crawlToInitializeContextsMap(root.current);
                }
              });
              isProfiling = true;
              profilingStartTime = renderer_getCurrentTime();
              rootToCommitProfilingMetadataMap = new Map();
            }
            function stopProfiling() {
              isProfiling = false;
              recordChangeDescriptions = false;
            }
            if (sessionStorageGetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY) === "true") {
              startProfiling(sessionStorageGetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === "true");
            }
            function shouldErrorFiberAlwaysNull() {
              return null;
            }
            var forceErrorForFiberIDs = new Map();
            function shouldErrorFiberAccordingToMap(fiber) {
              if (typeof setErrorHandler !== "function") {
                throw new Error("Expected overrideError() to not get called for earlier React versions.");
              }
              var id = getFiberIDUnsafe(fiber);
              if (id === null) {
                return null;
              }
              var status = null;
              if (forceErrorForFiberIDs.has(id)) {
                status = forceErrorForFiberIDs.get(id);
                if (status === false) {
                  forceErrorForFiberIDs.delete(id);
                  if (forceErrorForFiberIDs.size === 0) {
                    setErrorHandler(shouldErrorFiberAlwaysNull);
                  }
                }
              }
              return status;
            }
            function overrideError(id, forceError) {
              if (typeof setErrorHandler !== "function" || typeof scheduleUpdate !== "function") {
                throw new Error("Expected overrideError() to not get called for earlier React versions.");
              }
              forceErrorForFiberIDs.set(id, forceError);
              if (forceErrorForFiberIDs.size === 1) {
                setErrorHandler(shouldErrorFiberAccordingToMap);
              }
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber != null) {
                scheduleUpdate(fiber);
              }
            }
            function shouldSuspendFiberAlwaysFalse() {
              return false;
            }
            var forceFallbackForSuspenseIDs = new Set();
            function shouldSuspendFiberAccordingToSet(fiber) {
              var maybeID = getFiberIDUnsafe(fiber);
              return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);
            }
            function overrideSuspense(id, forceFallback) {
              if (typeof setSuspenseHandler !== "function" || typeof scheduleUpdate !== "function") {
                throw new Error("Expected overrideSuspense() to not get called for earlier React versions.");
              }
              if (forceFallback) {
                forceFallbackForSuspenseIDs.add(id);
                if (forceFallbackForSuspenseIDs.size === 1) {
                  setSuspenseHandler(shouldSuspendFiberAccordingToSet);
                }
              } else {
                forceFallbackForSuspenseIDs.delete(id);
                if (forceFallbackForSuspenseIDs.size === 0) {
                  setSuspenseHandler(shouldSuspendFiberAlwaysFalse);
                }
              }
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber != null) {
                scheduleUpdate(fiber);
              }
            }
            var trackedPath = null;
            var trackedPathMatchFiber = null;
            var trackedPathMatchDepth = -1;
            var mightBeOnTrackedPath = false;
            function setTrackedPath(path) {
              if (path === null) {
                trackedPathMatchFiber = null;
                trackedPathMatchDepth = -1;
                mightBeOnTrackedPath = false;
              }
              trackedPath = path;
            }
            function updateTrackedPathStateBeforeMount(fiber) {
              if (trackedPath === null || !mightBeOnTrackedPath) {
                return false;
              }
              var returnFiber = fiber.return;
              var returnAlternate = returnFiber !== null ? returnFiber.alternate : null;
              if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {
                var actualFrame = getPathFrame(fiber);
                var expectedFrame = trackedPath[trackedPathMatchDepth + 1];
                if (expectedFrame === void 0) {
                  throw new Error("Expected to see a frame at the next depth.");
                }
                if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {
                  trackedPathMatchFiber = fiber;
                  trackedPathMatchDepth++;
                  if (trackedPathMatchDepth === trackedPath.length - 1) {
                    mightBeOnTrackedPath = false;
                  } else {
                    mightBeOnTrackedPath = true;
                  }
                  return false;
                }
              }
              mightBeOnTrackedPath = false;
              return true;
            }
            function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {
              mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;
            }
            var rootPseudoKeys = new Map();
            var rootDisplayNameCounter = new Map();
            function setRootPseudoKey(id, fiber) {
              var name = getDisplayNameForRoot(fiber);
              var counter = rootDisplayNameCounter.get(name) || 0;
              rootDisplayNameCounter.set(name, counter + 1);
              var pseudoKey = "".concat(name, ":").concat(counter);
              rootPseudoKeys.set(id, pseudoKey);
            }
            function removeRootPseudoKey(id) {
              var pseudoKey = rootPseudoKeys.get(id);
              if (pseudoKey === void 0) {
                throw new Error("Expected root pseudo key to be known.");
              }
              var name = pseudoKey.substring(0, pseudoKey.lastIndexOf(":"));
              var counter = rootDisplayNameCounter.get(name);
              if (counter === void 0) {
                throw new Error("Expected counter to be known.");
              }
              if (counter > 1) {
                rootDisplayNameCounter.set(name, counter - 1);
              } else {
                rootDisplayNameCounter.delete(name);
              }
              rootPseudoKeys.delete(id);
            }
            function getDisplayNameForRoot(fiber) {
              var preferredDisplayName = null;
              var fallbackDisplayName = null;
              var child = fiber.child;
              for (var i2 = 0; i2 < 3; i2++) {
                if (child === null) {
                  break;
                }
                var displayName = getDisplayNameForFiber(child);
                if (displayName !== null) {
                  if (typeof child.type === "function") {
                    preferredDisplayName = displayName;
                  } else if (fallbackDisplayName === null) {
                    fallbackDisplayName = displayName;
                  }
                }
                if (preferredDisplayName !== null) {
                  break;
                }
                child = child.child;
              }
              return preferredDisplayName || fallbackDisplayName || "Anonymous";
            }
            function getPathFrame(fiber) {
              var key = fiber.key;
              var displayName = getDisplayNameForFiber(fiber);
              var index = fiber.index;
              switch (fiber.tag) {
                case HostRoot:
                  var id = getFiberIDThrows(fiber);
                  var pseudoKey = rootPseudoKeys.get(id);
                  if (pseudoKey === void 0) {
                    throw new Error("Expected mounted root to have known pseudo key.");
                  }
                  displayName = pseudoKey;
                  break;
                case HostComponent:
                  displayName = fiber.type;
                  break;
                default:
                  break;
              }
              return {
                displayName,
                key,
                index
              };
            }
            function getPathForElement(id) {
              var fiber = idToArbitraryFiberMap.get(id);
              if (fiber == null) {
                return null;
              }
              var keyPath = [];
              while (fiber !== null) {
                keyPath.push(getPathFrame(fiber));
                fiber = fiber.return;
              }
              keyPath.reverse();
              return keyPath;
            }
            function getBestMatchForTrackedPath() {
              if (trackedPath === null) {
                return null;
              }
              if (trackedPathMatchFiber === null) {
                return null;
              }
              var fiber = trackedPathMatchFiber;
              while (fiber !== null && shouldFilterFiber(fiber)) {
                fiber = fiber.return;
              }
              if (fiber === null) {
                return null;
              }
              return {
                id: getFiberIDThrows(fiber),
                isFullMatch: trackedPathMatchDepth === trackedPath.length - 1
              };
            }
            var formatPriorityLevel = function formatPriorityLevel2(priorityLevel) {
              if (priorityLevel == null) {
                return "Unknown";
              }
              switch (priorityLevel) {
                case ImmediatePriority:
                  return "Immediate";
                case UserBlockingPriority:
                  return "User-Blocking";
                case NormalPriority:
                  return "Normal";
                case LowPriority:
                  return "Low";
                case IdlePriority:
                  return "Idle";
                case NoPriority:
                default:
                  return "Unknown";
              }
            };
            function setTraceUpdatesEnabled(isEnabled2) {
              traceUpdatesEnabled = isEnabled2;
            }
            return {
              cleanup,
              clearErrorsAndWarnings,
              clearErrorsForFiberID,
              clearWarningsForFiberID,
              copyElementPath,
              deletePath,
              findNativeNodesForFiberID,
              flushInitialOperations,
              getBestMatchForTrackedPath,
              getDisplayNameForFiberID,
              getFiberIDForNative,
              getInstanceAndStyle,
              getOwnersList,
              getPathForElement,
              getProfilingData,
              handleCommitFiberRoot,
              handleCommitFiberUnmount,
              handlePostCommitFiberRoot,
              inspectElement,
              logElementToConsole,
              prepareViewAttributeSource,
              prepareViewElementSource,
              overrideError,
              overrideSuspense,
              overrideValueAtPath,
              renamePath,
              renderer,
              setTraceUpdatesEnabled,
              setTrackedPath,
              startProfiling,
              stopProfiling,
              storeAsGlobal,
              updateComponentFilters
            };
          }
          function DevToolsConsolePatching_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function DevToolsConsolePatching_objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                DevToolsConsolePatching_ownKeys(Object(source), true).forEach(function(key) {
                  DevToolsConsolePatching_defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                DevToolsConsolePatching_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function DevToolsConsolePatching_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
          function reenableLogs() {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevLog
                }),
                info: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevInfo
                }),
                warn: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevWarn
                }),
                error: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevError
                }),
                group: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevGroup
                }),
                groupCollapsed: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevGroupCollapsed
                }),
                groupEnd: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
          function DevToolsComponentStackFrame_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              DevToolsComponentStackFrame_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              DevToolsComponentStackFrame_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return DevToolsComponentStackFrame_typeof(obj);
          }
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
          var reentry = false;
          var componentFrameCache;
          if (false) {
            var PossiblyWeakMap;
          }
          function describeNativeComponentFrame(fn, construct, currentDispatcherRef) {
            if (!fn || reentry) {
              return "";
            }
            if (false) {
              var frame;
            }
            var control;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            reentry = true;
            var previousDispatcher = currentDispatcherRef.current;
            currentDispatcherRef.current = null;
            disableLogs();
            try {
              if (construct) {
                var Fake = function Fake2() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function set() {
                    throw Error();
                  }
                });
                if ((typeof Reflect === "undefined" ? "undefined" : DevToolsComponentStackFrame_typeof(Reflect)) === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (false) {
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              Error.prepareStackTrace = previousPrepareStackTrace;
              currentDispatcherRef.current = previousDispatcher;
              reenableLogs();
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            if (false) {
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn, currentDispatcherRef) {
            return describeNativeComponentFrame(ctor, true, currentDispatcherRef);
          }
          function describeFunctionComponentFrame(fn, source, ownerFn, currentDispatcherRef) {
            return describeNativeComponentFrame(fn, false, currentDispatcherRef);
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn, currentDispatcherRef) {
            if (true) {
              return "";
            }
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              return describeNativeComponentFrame(type, shouldConstruct(type), currentDispatcherRef);
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type, source, ownerFn);
            }
            switch (type) {
              case SUSPENSE_NUMBER:
              case SUSPENSE_SYMBOL_STRING:
                return describeBuiltInComponentFrame("Suspense", source, ownerFn);
              case SUSPENSE_LIST_NUMBER:
              case SUSPENSE_LIST_SYMBOL_STRING:
                return describeBuiltInComponentFrame("SuspenseList", source, ownerFn);
            }
            if (DevToolsComponentStackFrame_typeof(type) === "object") {
              switch (type.$$typeof) {
                case FORWARD_REF_NUMBER:
                case FORWARD_REF_SYMBOL_STRING:
                  return describeFunctionComponentFrame(type.render, source, ownerFn, currentDispatcherRef);
                case MEMO_NUMBER:
                case MEMO_SYMBOL_STRING:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn, currentDispatcherRef);
                case LAZY_NUMBER:
                case LAZY_SYMBOL_STRING: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn, currentDispatcherRef);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(workTagMap, workInProgress, currentDispatcherRef) {
            var HostComponent = workTagMap.HostComponent, LazyComponent = workTagMap.LazyComponent, SuspenseComponent = workTagMap.SuspenseComponent, SuspenseListComponent = workTagMap.SuspenseListComponent, FunctionComponent = workTagMap.FunctionComponent, IndeterminateComponent = workTagMap.IndeterminateComponent, SimpleMemoComponent = workTagMap.SimpleMemoComponent, ForwardRef = workTagMap.ForwardRef, ClassComponent = workTagMap.ClassComponent;
            var owner = false ? void 0 : null;
            var source = false ? void 0 : null;
            switch (workInProgress.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(workInProgress.type, source, owner);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy", source, owner);
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense", source, owner);
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList", source, owner);
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);
              case ForwardRef:
                return describeFunctionComponentFrame(workInProgress.type.render, source, owner, currentDispatcherRef);
              case ClassComponent:
                return describeClassComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {
            try {
              var info = "";
              var node = workInProgress;
              do {
                info += describeFiber(workTagMap, node, currentDispatcherRef);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function console_createForOfIteratorHelper(o2, allowArrayLike) {
            var it;
            if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
              if (Array.isArray(o2) || (it = console_unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
                if (it)
                  o2 = it;
                var i2 = 0;
                var F = function F2() {
                };
                return { s: F, n: function n2() {
                  if (i2 >= o2.length)
                    return { done: true };
                  return { done: false, value: o2[i2++] };
                }, e: function e2(_e) {
                  throw _e;
                }, f: F };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var normalCompletion = true, didErr = false, err;
            return { s: function s2() {
              it = o2[Symbol.iterator]();
            }, n: function n2() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
            }, e: function e2(_e2) {
              didErr = true;
              err = _e2;
            }, f: function f() {
              try {
                if (!normalCompletion && it.return != null)
                  it.return();
              } finally {
                if (didErr)
                  throw err;
              }
            } };
          }
          function console_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return console_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return console_arrayLikeToArray(o2, minLen);
          }
          function console_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          var APPEND_STACK_TO_METHODS = ["error", "trace", "warn"];
          var PREFIX_REGEX = /\s{4}(in|at)\s{1}/;
          var ROW_COLUMN_NUMBER_REGEX = /:\d+:\d+(\n|$)/;
          function isStringComponentStack(text) {
            return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);
          }
          var injectedRenderers = new Map();
          var targetConsole = console;
          var targetConsoleMethods = {};
          for (var console_method in console) {
            targetConsoleMethods[console_method] = console[console_method];
          }
          var unpatchFn = null;
          function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
            targetConsole = targetConsoleForTesting;
            targetConsoleMethods = {};
            for (var _method in targetConsole) {
              targetConsoleMethods[_method] = console[_method];
            }
          }
          function registerRenderer(renderer, onErrorOrWarning) {
            var currentDispatcherRef = renderer.currentDispatcherRef, getCurrentFiber = renderer.getCurrentFiber, findFiberByHostInstance = renderer.findFiberByHostInstance, version = renderer.version;
            if (typeof findFiberByHostInstance !== "function") {
              return;
            }
            if (currentDispatcherRef != null && typeof getCurrentFiber === "function") {
              var _getInternalReactCons = getInternalReactConstants(version), ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork;
              injectedRenderers.set(renderer, {
                currentDispatcherRef,
                getCurrentFiber,
                workTagMap: ReactTypeOfWork,
                onErrorOrWarning
              });
            }
          }
          var consoleSettingsRef = {
            appendComponentStack: false,
            breakOnConsoleErrors: false,
            showInlineWarningsAndErrors: false
          };
          function patch(_ref) {
            var appendComponentStack = _ref.appendComponentStack, breakOnConsoleErrors = _ref.breakOnConsoleErrors, showInlineWarningsAndErrors = _ref.showInlineWarningsAndErrors;
            consoleSettingsRef.appendComponentStack = appendComponentStack;
            consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;
            consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;
            if (unpatchFn !== null) {
              return;
            }
            var originalConsoleMethods = {};
            unpatchFn = function unpatchFn2() {
              for (var _method2 in originalConsoleMethods) {
                try {
                  targetConsole[_method2] = originalConsoleMethods[_method2];
                } catch (error) {
                }
              }
            };
            APPEND_STACK_TO_METHODS.forEach(function(method) {
              try {
                var originalMethod = originalConsoleMethods[method] = targetConsole[method];
                var overrideMethod = function overrideMethod2() {
                  var shouldAppendWarningStack = false;
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  if (consoleSettingsRef.appendComponentStack) {
                    var lastArg = args.length > 0 ? args[args.length - 1] : null;
                    var alreadyHasComponentStack = typeof lastArg === "string" && isStringComponentStack(lastArg);
                    shouldAppendWarningStack = !alreadyHasComponentStack;
                  }
                  var shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method === "error" || method === "warn");
                  if (shouldAppendWarningStack || shouldShowInlineWarningsAndErrors) {
                    var _iterator = console_createForOfIteratorHelper(injectedRenderers.values()), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var _step$value = _step.value, currentDispatcherRef = _step$value.currentDispatcherRef, getCurrentFiber = _step$value.getCurrentFiber, onErrorOrWarning = _step$value.onErrorOrWarning, workTagMap = _step$value.workTagMap;
                        var current = getCurrentFiber();
                        if (current != null) {
                          try {
                            if (shouldShowInlineWarningsAndErrors) {
                              if (typeof onErrorOrWarning === "function") {
                                onErrorOrWarning(current, method, args.slice());
                              }
                            }
                            if (shouldAppendWarningStack) {
                              var componentStack = getStackByFiberInDevAndProd(workTagMap, current, currentDispatcherRef);
                              if (componentStack !== "") {
                                args.push(componentStack);
                              }
                            }
                          } catch (error) {
                          } finally {
                            break;
                          }
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                  if (consoleSettingsRef.breakOnConsoleErrors) {
                    debugger;
                  }
                  originalMethod.apply(void 0, args);
                };
                overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;
                originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod;
                targetConsole[method] = overrideMethod;
              } catch (error) {
              }
            });
          }
          function unpatch() {
            if (unpatchFn !== null) {
              unpatchFn();
              unpatchFn = null;
            }
          }
          function bridge_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              bridge_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              bridge_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return bridge_typeof(obj);
          }
          function bridge_toConsumableArray(arr) {
            return bridge_arrayWithoutHoles(arr) || bridge_iterableToArray(arr) || bridge_unsupportedIterableToArray(arr) || bridge_nonIterableSpread();
          }
          function bridge_nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function bridge_unsupportedIterableToArray(o2, minLen) {
            if (!o2)
              return;
            if (typeof o2 === "string")
              return bridge_arrayLikeToArray(o2, minLen);
            var n2 = Object.prototype.toString.call(o2).slice(8, -1);
            if (n2 === "Object" && o2.constructor)
              n2 = o2.constructor.name;
            if (n2 === "Map" || n2 === "Set")
              return Array.from(o2);
            if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
              return bridge_arrayLikeToArray(o2, minLen);
          }
          function bridge_iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
              return Array.from(iter);
          }
          function bridge_arrayWithoutHoles(arr) {
            if (Array.isArray(arr))
              return bridge_arrayLikeToArray(arr);
          }
          function bridge_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function bridge_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function bridge_defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function bridge_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              bridge_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              bridge_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
            if (superClass)
              _setPrototypeOf(subClass, superClass);
          }
          function _setPrototypeOf(o2, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p2) {
              o3.__proto__ = p2;
              return o3;
            };
            return _setPrototypeOf(o2, p);
          }
          function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = _getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return _possibleConstructorReturn(this, result);
            };
          }
          function _possibleConstructorReturn(self2, call) {
            if (call && (bridge_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return _assertThisInitialized(self2);
          }
          function _assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e2) {
              return false;
            }
          }
          function _getPrototypeOf(o2) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
              return o3.__proto__ || Object.getPrototypeOf(o3);
            };
            return _getPrototypeOf(o2);
          }
          function bridge_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var BATCH_DURATION = 100;
          var BRIDGE_PROTOCOL = [
            {
              version: 0,
              minNpmVersion: '"<4.11.0"',
              maxNpmVersion: '"<4.11.0"'
            },
            {
              version: 1,
              minNpmVersion: "4.13.0",
              maxNpmVersion: null
            }
          ];
          var currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];
          var Bridge = /* @__PURE__ */ function(_EventEmitter) {
            _inherits(Bridge2, _EventEmitter);
            var _super = _createSuper(Bridge2);
            function Bridge2(wall) {
              var _this;
              bridge_classCallCheck(this, Bridge2);
              _this = _super.call(this);
              bridge_defineProperty(_assertThisInitialized(_this), "_isShutdown", false);
              bridge_defineProperty(_assertThisInitialized(_this), "_messageQueue", []);
              bridge_defineProperty(_assertThisInitialized(_this), "_timeoutID", null);
              bridge_defineProperty(_assertThisInitialized(_this), "_wallUnlisten", null);
              bridge_defineProperty(_assertThisInitialized(_this), "_flush", function() {
                if (_this._timeoutID !== null) {
                  clearTimeout(_this._timeoutID);
                  _this._timeoutID = null;
                }
                if (_this._messageQueue.length) {
                  for (var i2 = 0; i2 < _this._messageQueue.length; i2 += 2) {
                    var _this$_wall;
                    (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i2]].concat(bridge_toConsumableArray(_this._messageQueue[i2 + 1])));
                  }
                  _this._messageQueue.length = 0;
                  _this._timeoutID = setTimeout(_this._flush, BATCH_DURATION);
                }
              });
              bridge_defineProperty(_assertThisInitialized(_this), "overrideValueAtPath", function(_ref) {
                var id = _ref.id, path = _ref.path, rendererID = _ref.rendererID, type = _ref.type, value = _ref.value;
                switch (type) {
                  case "context":
                    _this.send("overrideContext", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "hooks":
                    _this.send("overrideHookState", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "props":
                    _this.send("overrideProps", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                  case "state":
                    _this.send("overrideState", {
                      id,
                      path,
                      rendererID,
                      wasForwarded: true,
                      value
                    });
                    break;
                }
              });
              _this._wall = wall;
              _this._wallUnlisten = wall.listen(function(message) {
                _assertThisInitialized(_this).emit(message.event, message.payload);
              }) || null;
              _this.addListener("overrideValueAtPath", _this.overrideValueAtPath);
              return _this;
            }
            bridge_createClass(Bridge2, [{
              key: "send",
              value: function send(event) {
                if (this._isShutdown) {
                  console.warn('Cannot send message "'.concat(event, '" through a Bridge that has been shutdown.'));
                  return;
                }
                for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  payload[_key - 1] = arguments[_key];
                }
                this._messageQueue.push(event, payload);
                if (!this._timeoutID) {
                  this._timeoutID = setTimeout(this._flush, 0);
                }
              }
            }, {
              key: "shutdown",
              value: function shutdown() {
                if (this._isShutdown) {
                  console.warn("Bridge was already shutdown.");
                  return;
                }
                this.send("shutdown");
                this._isShutdown = true;
                this.addListener = function() {
                };
                this.emit = function() {
                };
                this.removeAllListeners();
                var wallUnlisten = this._wallUnlisten;
                if (wallUnlisten) {
                  wallUnlisten();
                }
                do {
                  this._flush();
                } while (this._messageQueue.length);
                if (this._timeoutID !== null) {
                  clearTimeout(this._timeoutID);
                  this._timeoutID = null;
                }
              }
            }, {
              key: "wall",
              get: function get() {
                return this._wall;
              }
            }]);
            return Bridge2;
          }(EventEmitter);
          var src_bridge = Bridge;
          function agent_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              agent_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              agent_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return agent_typeof(obj);
          }
          function agent_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function agent_defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function agent_createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              agent_defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              agent_defineProperties(Constructor, staticProps);
            return Constructor;
          }
          function agent_inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
            if (superClass)
              agent_setPrototypeOf(subClass, superClass);
          }
          function agent_setPrototypeOf(o2, p) {
            agent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p2) {
              o3.__proto__ = p2;
              return o3;
            };
            return agent_setPrototypeOf(o2, p);
          }
          function agent_createSuper(Derived) {
            var hasNativeReflectConstruct = agent_isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = agent_getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = agent_getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return agent_possibleConstructorReturn(this, result);
            };
          }
          function agent_possibleConstructorReturn(self2, call) {
            if (call && (agent_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return agent_assertThisInitialized(self2);
          }
          function agent_assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function agent_isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e2) {
              return false;
            }
          }
          function agent_getPrototypeOf(o2) {
            agent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
              return o3.__proto__ || Object.getPrototypeOf(o3);
            };
            return agent_getPrototypeOf(o2);
          }
          function agent_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          var agent_debug = function debug(methodName) {
            if (__DEBUG__) {
              var _console;
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              (_console = console).log.apply(_console, ["%cAgent %c".concat(methodName), "color: purple; font-weight: bold;", "font-weight: bold;"].concat(args));
            }
          };
          var agent_Agent = /* @__PURE__ */ function(_EventEmitter) {
            agent_inherits(Agent, _EventEmitter);
            var _super = agent_createSuper(Agent);
            function Agent(bridge) {
              var _this;
              agent_classCallCheck(this, Agent);
              _this = _super.call(this);
              agent_defineProperty(agent_assertThisInitialized(_this), "_isProfiling", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "_recordChangeDescriptions", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "_rendererInterfaces", {});
              agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelection", null);
              agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelectionMatch", null);
              agent_defineProperty(agent_assertThisInitialized(_this), "_traceUpdatesEnabled", false);
              agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsAndWarnings", function(_ref) {
                var rendererID = _ref.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearErrorsAndWarnings();
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsForFiberID", function(_ref2) {
                var id = _ref2.id, rendererID = _ref2.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearErrorsForFiberID(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "clearWarningsForFiberID", function(_ref3) {
                var id = _ref3.id, rendererID = _ref3.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                } else {
                  renderer.clearWarningsForFiberID(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "copyElementPath", function(_ref4) {
                var id = _ref4.id, path = _ref4.path, rendererID = _ref4.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.copyElementPath(id, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "deletePath", function(_ref5) {
                var hookID = _ref5.hookID, id = _ref5.id, path = _ref5.path, rendererID = _ref5.rendererID, type = _ref5.type;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.deletePath(type, id, hookID, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getBridgeProtocol", function() {
                _this._bridge.send("bridgeProtocol", currentBridgeProtocol);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingData", function(_ref6) {
                var rendererID = _ref6.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                }
                _this._bridge.send("profilingData", renderer.getProfilingData());
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingStatus", function() {
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "getOwnersList", function(_ref7) {
                var id = _ref7.id, rendererID = _ref7.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  var owners = renderer.getOwnersList(id);
                  _this._bridge.send("ownersList", {
                    id,
                    owners
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "inspectElement", function(_ref8) {
                var id = _ref8.id, path = _ref8.path, rendererID = _ref8.rendererID, requestID = _ref8.requestID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  _this._bridge.send("inspectedElement", renderer.inspectElement(requestID, id, path));
                  if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {
                    _this._persistedSelection = null;
                    _this._persistedSelectionMatch = null;
                    renderer.setTrackedPath(null);
                    _this._throttledPersistSelection(rendererID, id);
                  }
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "logElementToConsole", function(_ref9) {
                var id = _ref9.id, rendererID = _ref9.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.logElementToConsole(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideError", function(_ref10) {
                var id = _ref10.id, rendererID = _ref10.rendererID, forceError = _ref10.forceError;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideError(id, forceError);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideSuspense", function(_ref11) {
                var id = _ref11.id, rendererID = _ref11.rendererID, forceFallback = _ref11.forceFallback;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideSuspense(id, forceFallback);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideValueAtPath", function(_ref12) {
                var hookID = _ref12.hookID, id = _ref12.id, path = _ref12.path, rendererID = _ref12.rendererID, type = _ref12.type, value = _ref12.value;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.overrideValueAtPath(type, id, hookID, path, value);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideContext", function(_ref13) {
                var id = _ref13.id, path = _ref13.path, rendererID = _ref13.rendererID, wasForwarded = _ref13.wasForwarded, value = _ref13.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "context",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideHookState", function(_ref14) {
                var id = _ref14.id, hookID = _ref14.hookID, path = _ref14.path, rendererID = _ref14.rendererID, wasForwarded = _ref14.wasForwarded, value = _ref14.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "hooks",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideProps", function(_ref15) {
                var id = _ref15.id, path = _ref15.path, rendererID = _ref15.rendererID, wasForwarded = _ref15.wasForwarded, value = _ref15.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "props",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "overrideState", function(_ref16) {
                var id = _ref16.id, path = _ref16.path, rendererID = _ref16.rendererID, wasForwarded = _ref16.wasForwarded, value = _ref16.value;
                if (!wasForwarded) {
                  _this.overrideValueAtPath({
                    id,
                    path,
                    rendererID,
                    type: "state",
                    value
                  });
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "reloadAndProfile", function(recordChangeDescriptions) {
                sessionStorageSetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY, "true");
                sessionStorageSetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY, recordChangeDescriptions ? "true" : "false");
                _this._bridge.send("reloadAppForProfiling");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "renamePath", function(_ref17) {
                var hookID = _ref17.hookID, id = _ref17.id, newPath = _ref17.newPath, oldPath = _ref17.oldPath, rendererID = _ref17.rendererID, type = _ref17.type;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.renamePath(type, id, hookID, oldPath, newPath);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "setTraceUpdatesEnabled", function(traceUpdatesEnabled) {
                _this._traceUpdatesEnabled = traceUpdatesEnabled;
                toggleEnabled(traceUpdatesEnabled);
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "syncSelectionFromNativeElementsPanel", function() {
                var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;
                if (target == null) {
                  return;
                }
                _this.selectNode(target);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "shutdown", function() {
                _this.emit("shutdown");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "startProfiling", function(recordChangeDescriptions) {
                _this._recordChangeDescriptions = recordChangeDescriptions;
                _this._isProfiling = true;
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.startProfiling(recordChangeDescriptions);
                }
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "stopProfiling", function() {
                _this._isProfiling = false;
                _this._recordChangeDescriptions = false;
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.stopProfiling();
                }
                _this._bridge.send("profilingStatus", _this._isProfiling);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "storeAsGlobal", function(_ref18) {
                var count = _ref18.count, id = _ref18.id, path = _ref18.path, rendererID = _ref18.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.storeAsGlobal(id, path, count);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "updateConsolePatchSettings", function(_ref19) {
                var appendComponentStack = _ref19.appendComponentStack, breakOnConsoleErrors = _ref19.breakOnConsoleErrors, showInlineWarningsAndErrors = _ref19.showInlineWarningsAndErrors;
                if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
                  patch({
                    appendComponentStack,
                    breakOnConsoleErrors,
                    showInlineWarningsAndErrors
                  });
                } else {
                  unpatch();
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "updateComponentFilters", function(componentFilters) {
                for (var rendererID in _this._rendererInterfaces) {
                  var renderer = _this._rendererInterfaces[rendererID];
                  renderer.updateComponentFilters(componentFilters);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "viewAttributeSource", function(_ref20) {
                var id = _ref20.id, path = _ref20.path, rendererID = _ref20.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.prepareViewAttributeSource(id, path);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "viewElementSource", function(_ref21) {
                var id = _ref21.id, rendererID = _ref21.rendererID;
                var renderer = _this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '" for element "').concat(id, '"'));
                } else {
                  renderer.prepareViewElementSource(id);
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onTraceUpdates", function(nodes) {
                _this.emit("traceUpdates", nodes);
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onFastRefreshScheduled", function() {
                if (__DEBUG__) {
                  agent_debug("onFastRefreshScheduled");
                }
                _this._bridge.send("fastRefreshScheduled");
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "onHookOperations", function(operations) {
                if (__DEBUG__) {
                  agent_debug("onHookOperations", "(".concat(operations.length, ") [").concat(operations.join(", "), "]"));
                }
                _this._bridge.send("operations", operations);
                if (_this._persistedSelection !== null) {
                  var rendererID = operations[0];
                  if (_this._persistedSelection.rendererID === rendererID) {
                    var renderer = _this._rendererInterfaces[rendererID];
                    if (renderer == null) {
                      console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                    } else {
                      var prevMatch = _this._persistedSelectionMatch;
                      var nextMatch = renderer.getBestMatchForTrackedPath();
                      _this._persistedSelectionMatch = nextMatch;
                      var prevMatchID = prevMatch !== null ? prevMatch.id : null;
                      var nextMatchID = nextMatch !== null ? nextMatch.id : null;
                      if (prevMatchID !== nextMatchID) {
                        if (nextMatchID !== null) {
                          _this._bridge.send("selectFiber", nextMatchID);
                        }
                      }
                      if (nextMatch !== null && nextMatch.isFullMatch) {
                        _this._persistedSelection = null;
                        _this._persistedSelectionMatch = null;
                        renderer.setTrackedPath(null);
                      }
                    }
                  }
                }
              });
              agent_defineProperty(agent_assertThisInitialized(_this), "_throttledPersistSelection", lodash_throttle_default()(function(rendererID, id) {
                var renderer = _this._rendererInterfaces[rendererID];
                var path = renderer != null ? renderer.getPathForElement(id) : null;
                if (path !== null) {
                  sessionStorageSetItem(SESSION_STORAGE_LAST_SELECTION_KEY, JSON.stringify({
                    rendererID,
                    path
                  }));
                } else {
                  sessionStorageRemoveItem(SESSION_STORAGE_LAST_SELECTION_KEY);
                }
              }, 1e3));
              if (sessionStorageGetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY) === "true") {
                _this._recordChangeDescriptions = sessionStorageGetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === "true";
                _this._isProfiling = true;
                sessionStorageRemoveItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY);
                sessionStorageRemoveItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY);
              }
              var persistedSelectionString = sessionStorageGetItem(SESSION_STORAGE_LAST_SELECTION_KEY);
              if (persistedSelectionString != null) {
                _this._persistedSelection = JSON.parse(persistedSelectionString);
              }
              _this._bridge = bridge;
              bridge.addListener("clearErrorsAndWarnings", _this.clearErrorsAndWarnings);
              bridge.addListener("clearErrorsForFiberID", _this.clearErrorsForFiberID);
              bridge.addListener("clearWarningsForFiberID", _this.clearWarningsForFiberID);
              bridge.addListener("copyElementPath", _this.copyElementPath);
              bridge.addListener("deletePath", _this.deletePath);
              bridge.addListener("getBridgeProtocol", _this.getBridgeProtocol);
              bridge.addListener("getProfilingData", _this.getProfilingData);
              bridge.addListener("getProfilingStatus", _this.getProfilingStatus);
              bridge.addListener("getOwnersList", _this.getOwnersList);
              bridge.addListener("inspectElement", _this.inspectElement);
              bridge.addListener("logElementToConsole", _this.logElementToConsole);
              bridge.addListener("overrideError", _this.overrideError);
              bridge.addListener("overrideSuspense", _this.overrideSuspense);
              bridge.addListener("overrideValueAtPath", _this.overrideValueAtPath);
              bridge.addListener("reloadAndProfile", _this.reloadAndProfile);
              bridge.addListener("renamePath", _this.renamePath);
              bridge.addListener("setTraceUpdatesEnabled", _this.setTraceUpdatesEnabled);
              bridge.addListener("startProfiling", _this.startProfiling);
              bridge.addListener("stopProfiling", _this.stopProfiling);
              bridge.addListener("storeAsGlobal", _this.storeAsGlobal);
              bridge.addListener("syncSelectionFromNativeElementsPanel", _this.syncSelectionFromNativeElementsPanel);
              bridge.addListener("shutdown", _this.shutdown);
              bridge.addListener("updateConsolePatchSettings", _this.updateConsolePatchSettings);
              bridge.addListener("updateComponentFilters", _this.updateComponentFilters);
              bridge.addListener("viewAttributeSource", _this.viewAttributeSource);
              bridge.addListener("viewElementSource", _this.viewElementSource);
              bridge.addListener("overrideContext", _this.overrideContext);
              bridge.addListener("overrideHookState", _this.overrideHookState);
              bridge.addListener("overrideProps", _this.overrideProps);
              bridge.addListener("overrideState", _this.overrideState);
              if (_this._isProfiling) {
                bridge.send("profilingStatus", true);
              }
              var isBackendStorageAPISupported = false;
              try {
                localStorage.getItem("test");
                isBackendStorageAPISupported = true;
              } catch (error) {
              }
              bridge.send("isBackendStorageAPISupported", isBackendStorageAPISupported);
              bridge.send("isSynchronousXHRSupported", isSynchronousXHRSupported());
              setupHighlighter(bridge, agent_assertThisInitialized(_this));
              TraceUpdates_initialize(agent_assertThisInitialized(_this));
              return _this;
            }
            agent_createClass(Agent, [{
              key: "getInstanceAndStyle",
              value: function getInstanceAndStyle(_ref22) {
                var id = _ref22.id, rendererID = _ref22.rendererID;
                var renderer = this._rendererInterfaces[rendererID];
                if (renderer == null) {
                  console.warn('Invalid renderer id "'.concat(rendererID, '"'));
                  return null;
                }
                return renderer.getInstanceAndStyle(id);
              }
            }, {
              key: "getIDForNode",
              value: function getIDForNode(node) {
                for (var rendererID in this._rendererInterfaces) {
                  var renderer = this._rendererInterfaces[rendererID];
                  try {
                    var id = renderer.getFiberIDForNative(node, true);
                    if (id !== null) {
                      return id;
                    }
                  } catch (error) {
                  }
                }
                return null;
              }
            }, {
              key: "selectNode",
              value: function selectNode(target) {
                var id = this.getIDForNode(target);
                if (id !== null) {
                  this._bridge.send("selectFiber", id);
                }
              }
            }, {
              key: "setRendererInterface",
              value: function setRendererInterface(rendererID, rendererInterface) {
                this._rendererInterfaces[rendererID] = rendererInterface;
                if (this._isProfiling) {
                  rendererInterface.startProfiling(this._recordChangeDescriptions);
                }
                rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled);
                var selection = this._persistedSelection;
                if (selection !== null && selection.rendererID === rendererID) {
                  rendererInterface.setTrackedPath(selection.path);
                }
              }
            }, {
              key: "onUnsupportedRenderer",
              value: function onUnsupportedRenderer(rendererID) {
                this._bridge.send("unsupportedRendererVersion", rendererID);
              }
            }, {
              key: "rendererInterfaces",
              get: function get() {
                return this._rendererInterfaces;
              }
            }]);
            return Agent;
          }(EventEmitter);
          function installHook(target) {
            if (target.hasOwnProperty("__REACT_DEVTOOLS_GLOBAL_HOOK__")) {
              return null;
            }
            function detectReactBuildType(renderer) {
              try {
                if (typeof renderer.version === "string") {
                  if (renderer.bundleType > 0) {
                    return "development";
                  }
                  return "production";
                }
                var _toString = Function.prototype.toString;
                if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                  var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent);
                  if (renderRootCode.indexOf("function") !== 0) {
                    return "production";
                  }
                  if (renderRootCode.indexOf("storedMeasure") !== -1) {
                    return "development";
                  }
                  if (renderRootCode.indexOf("should be a pure function") !== -1) {
                    if (renderRootCode.indexOf("NODE_ENV") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("development") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("true") !== -1) {
                      return "development";
                    }
                    if (renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1) {
                      return "unminified";
                    } else {
                      return "development";
                    }
                  }
                  if (renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1) {
                    return "unminified";
                  }
                  return "outdated";
                }
              } catch (err) {
              }
              return "production";
            }
            function checkDCE(fn) {
              try {
                var _toString2 = Function.prototype.toString;
                var code = _toString2.call(fn);
                if (code.indexOf("^_^") > -1) {
                  hasDetectedBadDCE = true;
                  setTimeout(function() {
                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://reactjs.org/link/perf-use-production-build");
                  });
                }
              } catch (err) {
              }
            }
            var uidCounter = 0;
            function inject(renderer) {
              var id = ++uidCounter;
              renderers.set(id, renderer);
              var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
              if (true) {
                try {
                  var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
                  var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
                  var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;
                  if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
                    registerRenderer(renderer);
                    patch({
                      appendComponentStack,
                      breakOnConsoleErrors,
                      showInlineWarningsAndErrors
                    });
                  }
                } catch (error) {
                }
              }
              var attach = target.__REACT_DEVTOOLS_ATTACH__;
              if (typeof attach === "function") {
                var rendererInterface = attach(hook, id, renderer, target);
                hook.rendererInterfaces.set(id, rendererInterface);
              }
              hook.emit("renderer", {
                id,
                renderer,
                reactBuildType
              });
              return id;
            }
            var hasDetectedBadDCE = false;
            function sub(event, fn) {
              hook.on(event, fn);
              return function() {
                return hook.off(event, fn);
              };
            }
            function on(event, fn) {
              if (!listeners[event]) {
                listeners[event] = [];
              }
              listeners[event].push(fn);
            }
            function off(event, fn) {
              if (!listeners[event]) {
                return;
              }
              var index = listeners[event].indexOf(fn);
              if (index !== -1) {
                listeners[event].splice(index, 1);
              }
              if (!listeners[event].length) {
                delete listeners[event];
              }
            }
            function emit(event, data) {
              if (listeners[event]) {
                listeners[event].map(function(fn) {
                  return fn(data);
                });
              }
            }
            function getFiberRoots(rendererID) {
              var roots = fiberRoots;
              if (!roots[rendererID]) {
                roots[rendererID] = new Set();
              }
              return roots[rendererID];
            }
            function onCommitFiberUnmount(rendererID, fiber) {
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handleCommitFiberUnmount(fiber);
              }
            }
            function onCommitFiberRoot(rendererID, root, priorityLevel) {
              var mountedRoots = hook.getFiberRoots(rendererID);
              var current = root.current;
              var isKnownRoot = mountedRoots.has(root);
              var isUnmounting = current.memoizedState == null || current.memoizedState.element == null;
              if (!isKnownRoot && !isUnmounting) {
                mountedRoots.add(root);
              } else if (isKnownRoot && isUnmounting) {
                mountedRoots.delete(root);
              }
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handleCommitFiberRoot(root, priorityLevel);
              }
            }
            function onPostCommitFiberRoot(rendererID, root) {
              var rendererInterface = rendererInterfaces.get(rendererID);
              if (rendererInterface != null) {
                rendererInterface.handlePostCommitFiberRoot(root);
              }
            }
            var fiberRoots = {};
            var rendererInterfaces = new Map();
            var listeners = {};
            var renderers = new Map();
            var hook = {
              rendererInterfaces,
              listeners,
              renderers,
              emit,
              getFiberRoots,
              inject,
              on,
              off,
              sub,
              supportsFiber: true,
              checkDCE,
              onCommitFiberUnmount,
              onCommitFiberRoot,
              onPostCommitFiberRoot
            };
            Object.defineProperty(target, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
              configurable: false,
              enumerable: false,
              get: function get() {
                return hook;
              }
            });
            return hook;
          }
          function decorate(object, attr, fn) {
            var old = object[attr];
            object[attr] = function(instance) {
              return fn.call(this, old, arguments);
            };
            return old;
          }
          function decorateMany(source, fns) {
            var olds = {};
            for (var name in fns) {
              olds[name] = decorate(source, name, fns[name]);
            }
            return olds;
          }
          function restoreMany(source, olds) {
            for (var name in olds) {
              source[name] = olds[name];
            }
          }
          function forceUpdate(instance) {
            if (typeof instance.forceUpdate === "function") {
              instance.forceUpdate();
            } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === "function") {
              instance.updater.enqueueForceUpdate(this, function() {
              }, "forceUpdate");
            }
          }
          function legacy_renderer_ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }
          function legacy_renderer_objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2] != null ? arguments[i2] : {};
              if (i2 % 2) {
                legacy_renderer_ownKeys(Object(source), true).forEach(function(key) {
                  legacy_renderer_defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
              } else {
                legacy_renderer_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
              }
            }
            return target;
          }
          function legacy_renderer_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function legacy_renderer_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              legacy_renderer_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              legacy_renderer_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return legacy_renderer_typeof(obj);
          }
          function getData(internalInstance) {
            var displayName = null;
            var key = null;
            if (internalInstance._currentElement != null) {
              if (internalInstance._currentElement.key) {
                key = "" + internalInstance._currentElement.key;
              }
              var elementType = internalInstance._currentElement.type;
              if (typeof elementType === "string") {
                displayName = elementType;
              } else if (typeof elementType === "function") {
                displayName = getDisplayName(elementType);
              }
            }
            return {
              displayName,
              key
            };
          }
          function getElementType(internalInstance) {
            if (internalInstance._currentElement != null) {
              var elementType = internalInstance._currentElement.type;
              if (typeof elementType === "function") {
                var publicInstance = internalInstance.getPublicInstance();
                if (publicInstance !== null) {
                  return ElementTypeClass;
                } else {
                  return ElementTypeFunction;
                }
              } else if (typeof elementType === "string") {
                return ElementTypeHostComponent;
              }
            }
            return ElementTypeOtherOrUnknown;
          }
          function getChildren(internalInstance) {
            var children = [];
            if (legacy_renderer_typeof(internalInstance) !== "object") {
            } else if (internalInstance._currentElement === null || internalInstance._currentElement === false) {
            } else if (internalInstance._renderedComponent) {
              var child = internalInstance._renderedComponent;
              if (getElementType(child) !== ElementTypeOtherOrUnknown) {
                children.push(child);
              }
            } else if (internalInstance._renderedChildren) {
              var renderedChildren = internalInstance._renderedChildren;
              for (var name in renderedChildren) {
                var _child = renderedChildren[name];
                if (getElementType(_child) !== ElementTypeOtherOrUnknown) {
                  children.push(_child);
                }
              }
            }
            return children;
          }
          function legacy_renderer_attach(hook, rendererID, renderer, global2) {
            var idToInternalInstanceMap = new Map();
            var internalInstanceToIDMap = new WeakMap();
            var internalInstanceToRootIDMap = new WeakMap();
            var getInternalIDForNative = null;
            var findNativeNodeForInternalID;
            if (renderer.ComponentTree) {
              getInternalIDForNative = function getInternalIDForNative2(node, findNearestUnfilteredAncestor) {
                var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);
                return internalInstanceToIDMap.get(internalInstance) || null;
              };
              findNativeNodeForInternalID = function findNativeNodeForInternalID2(id) {
                var internalInstance = idToInternalInstanceMap.get(id);
                return renderer.ComponentTree.getNodeFromInstance(internalInstance);
              };
            } else if (renderer.Mount.getID && renderer.Mount.getNode) {
              getInternalIDForNative = function getInternalIDForNative2(node, findNearestUnfilteredAncestor) {
                return null;
              };
              findNativeNodeForInternalID = function findNativeNodeForInternalID2(id) {
                return null;
              };
            }
            function getDisplayNameForFiberID(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              return internalInstance ? getData(internalInstance).displayName : null;
            }
            function getID(internalInstance) {
              if (legacy_renderer_typeof(internalInstance) !== "object" || internalInstance === null) {
                throw new Error("Invalid internal instance: " + internalInstance);
              }
              if (!internalInstanceToIDMap.has(internalInstance)) {
                var _id = getUID();
                internalInstanceToIDMap.set(internalInstance, _id);
                idToInternalInstanceMap.set(_id, internalInstance);
              }
              return internalInstanceToIDMap.get(internalInstance);
            }
            function areEqualArrays(a2, b2) {
              if (a2.length !== b2.length) {
                return false;
              }
              for (var i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2] !== b2[i2]) {
                  return false;
                }
              }
              return true;
            }
            var parentIDStack = [];
            var oldReconcilerMethods = null;
            if (renderer.Reconciler) {
              oldReconcilerMethods = decorateMany(renderer.Reconciler, {
                mountComponent: function mountComponent(fn, args) {
                  var internalInstance = args[0];
                  var hostContainerInfo = args[3];
                  if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                    return fn.apply(this, args);
                  }
                  if (hostContainerInfo._topLevelWrapper === void 0) {
                    return fn.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;
                  recordMount(internalInstance, id, parentID);
                  parentIDStack.push(id);
                  internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));
                  try {
                    var result = fn.apply(this, args);
                    parentIDStack.pop();
                    return result;
                  } catch (err) {
                    parentIDStack = [];
                    throw err;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                performUpdateIfNecessary: function performUpdateIfNecessary(fn, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                    return fn.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  var prevChildren = getChildren(internalInstance);
                  try {
                    var result = fn.apply(this, args);
                    var nextChildren = getChildren(internalInstance);
                    if (!areEqualArrays(prevChildren, nextChildren)) {
                      recordReorder(internalInstance, id, nextChildren);
                    }
                    parentIDStack.pop();
                    return result;
                  } catch (err) {
                    parentIDStack = [];
                    throw err;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                receiveComponent: function receiveComponent(fn, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                    return fn.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  var prevChildren = getChildren(internalInstance);
                  try {
                    var result = fn.apply(this, args);
                    var nextChildren = getChildren(internalInstance);
                    if (!areEqualArrays(prevChildren, nextChildren)) {
                      recordReorder(internalInstance, id, nextChildren);
                    }
                    parentIDStack.pop();
                    return result;
                  } catch (err) {
                    parentIDStack = [];
                    throw err;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                },
                unmountComponent: function unmountComponent(fn, args) {
                  var internalInstance = args[0];
                  if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                    return fn.apply(this, args);
                  }
                  var id = getID(internalInstance);
                  parentIDStack.push(id);
                  try {
                    var result = fn.apply(this, args);
                    parentIDStack.pop();
                    recordUnmount(internalInstance, id);
                    return result;
                  } catch (err) {
                    parentIDStack = [];
                    throw err;
                  } finally {
                    if (parentIDStack.length === 0) {
                      var rootID = internalInstanceToRootIDMap.get(internalInstance);
                      if (rootID === void 0) {
                        throw new Error("Expected to find root ID.");
                      }
                      flushPendingEvents(rootID);
                    }
                  }
                }
              });
            }
            function cleanup() {
              if (oldReconcilerMethods !== null) {
                if (renderer.Component) {
                  restoreMany(renderer.Component.Mixin, oldReconcilerMethods);
                } else {
                  restoreMany(renderer.Reconciler, oldReconcilerMethods);
                }
              }
              oldReconcilerMethods = null;
            }
            function recordMount(internalInstance, id, parentID) {
              var isRoot = parentID === 0;
              if (__DEBUG__) {
                console.log("%crecordMount()", "color: green; font-weight: bold;", id, getData(internalInstance).displayName);
              }
              if (isRoot) {
                var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;
                pushOperation(TREE_OPERATION_ADD);
                pushOperation(id);
                pushOperation(ElementTypeRoot);
                pushOperation(0);
                pushOperation(hasOwnerMetadata ? 1 : 0);
              } else {
                var type = getElementType(internalInstance);
                var _getData = getData(internalInstance), displayName = _getData.displayName, key = _getData.key;
                var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;
                var displayNameStringID = getStringID(displayName);
                var keyStringID = getStringID(key);
                pushOperation(TREE_OPERATION_ADD);
                pushOperation(id);
                pushOperation(type);
                pushOperation(parentID);
                pushOperation(ownerID);
                pushOperation(displayNameStringID);
                pushOperation(keyStringID);
              }
            }
            function recordReorder(internalInstance, id, nextChildren) {
              pushOperation(TREE_OPERATION_REORDER_CHILDREN);
              pushOperation(id);
              var nextChildIDs = nextChildren.map(getID);
              pushOperation(nextChildIDs.length);
              for (var i2 = 0; i2 < nextChildIDs.length; i2++) {
                pushOperation(nextChildIDs[i2]);
              }
            }
            function recordUnmount(internalInstance, id) {
              pendingUnmountedIDs.push(id);
              idToInternalInstanceMap.delete(id);
            }
            function crawlAndRecordInitialMounts(id, parentID, rootID) {
              if (__DEBUG__) {
                console.group("crawlAndRecordInitialMounts() id:", id);
              }
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                internalInstanceToRootIDMap.set(internalInstance, rootID);
                recordMount(internalInstance, id, parentID);
                getChildren(internalInstance).forEach(function(child) {
                  return crawlAndRecordInitialMounts(getID(child), id, rootID);
                });
              }
              if (__DEBUG__) {
                console.groupEnd();
              }
            }
            function flushInitialOperations() {
              var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;
              for (var key in roots) {
                var internalInstance = roots[key];
                var _id2 = getID(internalInstance);
                crawlAndRecordInitialMounts(_id2, 0, _id2);
                flushPendingEvents(_id2);
              }
            }
            var pendingOperations = [];
            var pendingStringTable = new Map();
            var pendingUnmountedIDs = [];
            var pendingStringTableLength = 0;
            var pendingUnmountedRootID = null;
            function flushPendingEvents(rootID) {
              if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
                return;
              }
              var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
              var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
              var i2 = 0;
              operations[i2++] = rendererID;
              operations[i2++] = rootID;
              operations[i2++] = pendingStringTableLength;
              pendingStringTable.forEach(function(value, key) {
                operations[i2++] = key.length;
                var encodedKey = utfEncodeString(key);
                for (var j2 = 0; j2 < encodedKey.length; j2++) {
                  operations[i2 + j2] = encodedKey[j2];
                }
                i2 += key.length;
              });
              if (numUnmountIDs > 0) {
                operations[i2++] = TREE_OPERATION_REMOVE;
                operations[i2++] = numUnmountIDs;
                for (var j = 0; j < pendingUnmountedIDs.length; j++) {
                  operations[i2++] = pendingUnmountedIDs[j];
                }
                if (pendingUnmountedRootID !== null) {
                  operations[i2] = pendingUnmountedRootID;
                  i2++;
                }
              }
              for (var _j = 0; _j < pendingOperations.length; _j++) {
                operations[i2 + _j] = pendingOperations[_j];
              }
              i2 += pendingOperations.length;
              if (__DEBUG__) {
                printOperationsArray(operations);
              }
              hook.emit("operations", operations);
              pendingOperations.length = 0;
              pendingUnmountedIDs = [];
              pendingUnmountedRootID = null;
              pendingStringTable.clear();
              pendingStringTableLength = 0;
            }
            function pushOperation(op) {
              if (false) {
              }
              pendingOperations.push(op);
            }
            function getStringID(str) {
              if (str === null) {
                return 0;
              }
              var existingID = pendingStringTable.get(str);
              if (existingID !== void 0) {
                return existingID;
              }
              var stringID = pendingStringTable.size + 1;
              pendingStringTable.set(str, stringID);
              pendingStringTableLength += str.length + 1;
              return stringID;
            }
            var currentlyInspectedElementID = null;
            var currentlyInspectedPaths = {};
            function mergeInspectedPaths(path) {
              var current = currentlyInspectedPaths;
              path.forEach(function(key) {
                if (!current[key]) {
                  current[key] = {};
                }
                current = current[key];
              });
            }
            function createIsPathAllowed(key) {
              return function isPathAllowed(path) {
                var current = currentlyInspectedPaths[key];
                if (!current) {
                  return false;
                }
                for (var i2 = 0; i2 < path.length; i2++) {
                  current = current[path[i2]];
                  if (!current) {
                    return false;
                  }
                }
                return true;
              };
            }
            function getInstanceAndStyle(id) {
              var instance = null;
              var style = null;
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                instance = internalInstance._instance || null;
                var element = internalInstance._currentElement;
                if (element != null && element.props != null) {
                  style = element.props.style || null;
                }
              }
              return {
                instance,
                style
              };
            }
            function updateSelectedElement(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                console.warn('Could not find instance with id "'.concat(id, '"'));
                return;
              }
              switch (getElementType(internalInstance)) {
                case ElementTypeClass:
                  global2.$r = internalInstance._instance;
                  break;
                case ElementTypeFunction:
                  var element = internalInstance._currentElement;
                  if (element == null) {
                    console.warn('Could not find element with id "'.concat(id, '"'));
                    return;
                  }
                  global2.$r = {
                    props: element.props,
                    type: element.type
                  };
                  break;
                default:
                  global2.$r = null;
                  break;
              }
            }
            function storeAsGlobal(id, path, count) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                var value = getInObject(inspectedElement, path);
                var key = "$reactTemp".concat(count);
                window[key] = value;
                console.log(key);
                console.log(value);
              }
            }
            function copyElementPath(id, path) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                copyToClipboard(getInObject(inspectedElement, path));
              }
            }
            function inspectElement(requestID, id, path) {
              if (currentlyInspectedElementID !== id) {
                currentlyInspectedElementID = id;
                currentlyInspectedPaths = {};
              }
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement === null) {
                return {
                  id,
                  responseID: requestID,
                  type: "not-found"
                };
              }
              if (path !== null) {
                mergeInspectedPaths(path);
              }
              updateSelectedElement(id);
              inspectedElement.context = cleanForBridge(inspectedElement.context, createIsPathAllowed("context"));
              inspectedElement.props = cleanForBridge(inspectedElement.props, createIsPathAllowed("props"));
              inspectedElement.state = cleanForBridge(inspectedElement.state, createIsPathAllowed("state"));
              return {
                id,
                responseID: requestID,
                type: "full-data",
                value: inspectedElement
              };
            }
            function inspectElementRaw(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                return null;
              }
              var _getData2 = getData(internalInstance), displayName = _getData2.displayName, key = _getData2.key;
              var type = getElementType(internalInstance);
              var context = null;
              var owners = null;
              var props = null;
              var state = null;
              var source = null;
              var element = internalInstance._currentElement;
              if (element !== null) {
                props = element.props;
                source = element._source != null ? element._source : null;
                var owner = element._owner;
                if (owner) {
                  owners = [];
                  while (owner != null) {
                    owners.push({
                      displayName: getData(owner).displayName || "Unknown",
                      id: getID(owner),
                      key: element.key,
                      type: getElementType(owner)
                    });
                    if (owner._currentElement) {
                      owner = owner._currentElement._owner;
                    }
                  }
                }
              }
              var publicInstance = internalInstance._instance;
              if (publicInstance != null) {
                context = publicInstance.context || null;
                state = publicInstance.state || null;
              }
              var errors = [];
              var warnings = [];
              return {
                id,
                canEditHooks: false,
                canEditFunctionProps: false,
                canEditHooksAndDeletePaths: false,
                canEditHooksAndRenamePaths: false,
                canEditFunctionPropsDeletePaths: false,
                canEditFunctionPropsRenamePaths: false,
                canToggleError: false,
                isErrored: false,
                targetErrorBoundaryID: null,
                canToggleSuspense: false,
                canViewSource: type === ElementTypeClass || type === ElementTypeFunction,
                hasLegacyContext: true,
                displayName,
                type,
                key: key != null ? key : null,
                context,
                hooks: null,
                props,
                state,
                errors,
                warnings,
                owners,
                source,
                rootType: null,
                rendererPackageName: null,
                rendererVersion: null
              };
            }
            function logElementToConsole(id) {
              var result = inspectElementRaw(id);
              if (result === null) {
                console.warn('Could not find element with id "'.concat(id, '"'));
                return;
              }
              var supportsGroup = typeof console.groupCollapsed === "function";
              if (supportsGroup) {
                console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || "Component", " />"), "color: var(--dom-tag-name-color); font-weight: normal;");
              }
              if (result.props !== null) {
                console.log("Props:", result.props);
              }
              if (result.state !== null) {
                console.log("State:", result.state);
              }
              if (result.context !== null) {
                console.log("Context:", result.context);
              }
              var nativeNode = findNativeNodeForInternalID(id);
              if (nativeNode !== null) {
                console.log("Node:", nativeNode);
              }
              if (window.chrome || /firefox/i.test(navigator.userAgent)) {
                console.log("Right-click any value to save it as a global variable for further inspection.");
              }
              if (supportsGroup) {
                console.groupEnd();
              }
            }
            function prepareViewAttributeSource(id, path) {
              var inspectedElement = inspectElementRaw(id);
              if (inspectedElement !== null) {
                window.$attribute = getInObject(inspectedElement, path);
              }
            }
            function prepareViewElementSource(id) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance == null) {
                console.warn('Could not find instance with id "'.concat(id, '"'));
                return;
              }
              var element = internalInstance._currentElement;
              if (element == null) {
                console.warn('Could not find element with id "'.concat(id, '"'));
                return;
              }
              global2.$type = element.type;
            }
            function deletePath(type, id, hookID, path) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type) {
                    case "context":
                      deletePathInObject(publicInstance.context, path);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                        props: copyWithDelete(element.props, path)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      deletePathInObject(publicInstance.state, path);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            function renamePath(type, id, hookID, oldPath, newPath) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type) {
                    case "context":
                      renamePathInObject(publicInstance.context, oldPath, newPath);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                        props: copyWithRename(element.props, oldPath, newPath)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      renamePathInObject(publicInstance.state, oldPath, newPath);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            function overrideValueAtPath(type, id, hookID, path, value) {
              var internalInstance = idToInternalInstanceMap.get(id);
              if (internalInstance != null) {
                var publicInstance = internalInstance._instance;
                if (publicInstance != null) {
                  switch (type) {
                    case "context":
                      setInObject(publicInstance.context, path, value);
                      forceUpdate(publicInstance);
                      break;
                    case "hooks":
                      throw new Error("Hooks not supported by this renderer");
                    case "props":
                      var element = internalInstance._currentElement;
                      internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                        props: copyWithSet(element.props, path, value)
                      });
                      forceUpdate(publicInstance);
                      break;
                    case "state":
                      setInObject(publicInstance.state, path, value);
                      forceUpdate(publicInstance);
                      break;
                  }
                }
              }
            }
            var getProfilingData = function getProfilingData2() {
              throw new Error("getProfilingData not supported by this renderer");
            };
            var handleCommitFiberRoot = function handleCommitFiberRoot2() {
              throw new Error("handleCommitFiberRoot not supported by this renderer");
            };
            var handleCommitFiberUnmount = function handleCommitFiberUnmount2() {
              throw new Error("handleCommitFiberUnmount not supported by this renderer");
            };
            var handlePostCommitFiberRoot = function handlePostCommitFiberRoot2() {
              throw new Error("handlePostCommitFiberRoot not supported by this renderer");
            };
            var overrideError = function overrideError2() {
              throw new Error("overrideError not supported by this renderer");
            };
            var overrideSuspense = function overrideSuspense2() {
              throw new Error("overrideSuspense not supported by this renderer");
            };
            var startProfiling = function startProfiling2() {
            };
            var stopProfiling = function stopProfiling2() {
            };
            function getBestMatchForTrackedPath() {
              return null;
            }
            function getPathForElement(id) {
              return null;
            }
            function updateComponentFilters(componentFilters) {
            }
            function setTraceUpdatesEnabled(enabled) {
            }
            function setTrackedPath(path) {
            }
            function getOwnersList(id) {
              return null;
            }
            function clearErrorsAndWarnings() {
            }
            function clearErrorsForFiberID(id) {
            }
            function clearWarningsForFiberID(id) {
            }
            return {
              clearErrorsAndWarnings,
              clearErrorsForFiberID,
              clearWarningsForFiberID,
              cleanup,
              copyElementPath,
              deletePath,
              flushInitialOperations,
              getBestMatchForTrackedPath,
              getDisplayNameForFiberID,
              getFiberIDForNative: getInternalIDForNative,
              getInstanceAndStyle,
              findNativeNodesForFiberID: function findNativeNodesForFiberID(id) {
                var nativeNode = findNativeNodeForInternalID(id);
                return nativeNode == null ? null : [nativeNode];
              },
              getOwnersList,
              getPathForElement,
              getProfilingData,
              handleCommitFiberRoot,
              handleCommitFiberUnmount,
              handlePostCommitFiberRoot,
              inspectElement,
              logElementToConsole,
              overrideError,
              overrideSuspense,
              overrideValueAtPath,
              renamePath,
              prepareViewAttributeSource,
              prepareViewElementSource,
              renderer,
              setTraceUpdatesEnabled,
              setTrackedPath,
              startProfiling,
              stopProfiling,
              storeAsGlobal,
              updateComponentFilters
            };
          }
          function initBackend(hook, agent, global2) {
            if (hook == null) {
              return function() {
              };
            }
            var subs = [
              hook.sub("renderer-attached", function(_ref) {
                var id = _ref.id, renderer = _ref.renderer, rendererInterface = _ref.rendererInterface;
                agent.setRendererInterface(id, rendererInterface);
                rendererInterface.flushInitialOperations();
              }),
              hook.sub("unsupported-renderer-version", function(id) {
                agent.onUnsupportedRenderer(id);
              }),
              hook.sub("fastRefreshScheduled", agent.onFastRefreshScheduled),
              hook.sub("operations", agent.onHookOperations),
              hook.sub("traceUpdates", agent.onTraceUpdates)
            ];
            var attachRenderer = function attachRenderer2(id, renderer) {
              var rendererInterface = hook.rendererInterfaces.get(id);
              if (rendererInterface == null) {
                if (typeof renderer.findFiberByHostInstance === "function") {
                  rendererInterface = renderer_attach(hook, id, renderer, global2);
                } else if (renderer.ComponentTree) {
                  rendererInterface = legacy_renderer_attach(hook, id, renderer, global2);
                } else {
                }
                if (rendererInterface != null) {
                  hook.rendererInterfaces.set(id, rendererInterface);
                }
              }
              if (rendererInterface != null) {
                hook.emit("renderer-attached", {
                  id,
                  renderer,
                  rendererInterface
                });
              } else {
                hook.emit("unsupported-renderer-version", id);
              }
            };
            hook.renderers.forEach(function(renderer, id) {
              attachRenderer(id, renderer);
            });
            subs.push(hook.sub("renderer", function(_ref2) {
              var id = _ref2.id, renderer = _ref2.renderer;
              attachRenderer(id, renderer);
            }));
            hook.emit("react-devtools", agent);
            hook.reactDevtoolsAgent = agent;
            var onAgentShutdown = function onAgentShutdown2() {
              subs.forEach(function(fn) {
                return fn();
              });
              hook.rendererInterfaces.forEach(function(rendererInterface) {
                rendererInterface.cleanup();
              });
              hook.reactDevtoolsAgent = null;
            };
            agent.addListener("shutdown", onAgentShutdown);
            subs.push(function() {
              agent.removeListener("shutdown", onAgentShutdown);
            });
            return function() {
              subs.forEach(function(fn) {
                return fn();
              });
            };
          }
          function resolveBoxStyle(prefix2, style) {
            var hasParts = false;
            var result = {
              bottom: 0,
              left: 0,
              right: 0,
              top: 0
            };
            var styleForAll = style[prefix2];
            if (styleForAll != null) {
              for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
                var key = _Object$keys[_i];
                result[key] = styleForAll;
              }
              hasParts = true;
            }
            var styleForHorizontal = style[prefix2 + "Horizontal"];
            if (styleForHorizontal != null) {
              result.left = styleForHorizontal;
              result.right = styleForHorizontal;
              hasParts = true;
            } else {
              var styleForLeft = style[prefix2 + "Left"];
              if (styleForLeft != null) {
                result.left = styleForLeft;
                hasParts = true;
              }
              var styleForRight = style[prefix2 + "Right"];
              if (styleForRight != null) {
                result.right = styleForRight;
                hasParts = true;
              }
              var styleForEnd = style[prefix2 + "End"];
              if (styleForEnd != null) {
                result.right = styleForEnd;
                hasParts = true;
              }
              var styleForStart = style[prefix2 + "Start"];
              if (styleForStart != null) {
                result.left = styleForStart;
                hasParts = true;
              }
            }
            var styleForVertical = style[prefix2 + "Vertical"];
            if (styleForVertical != null) {
              result.bottom = styleForVertical;
              result.top = styleForVertical;
              hasParts = true;
            } else {
              var styleForBottom = style[prefix2 + "Bottom"];
              if (styleForBottom != null) {
                result.bottom = styleForBottom;
                hasParts = true;
              }
              var styleForTop = style[prefix2 + "Top"];
              if (styleForTop != null) {
                result.top = styleForTop;
                hasParts = true;
              }
            }
            return hasParts ? result : null;
          }
          function setupNativeStyleEditor_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              setupNativeStyleEditor_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              setupNativeStyleEditor_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return setupNativeStyleEditor_typeof(obj);
          }
          function setupNativeStyleEditor_defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
            } else {
              obj[key] = value;
            }
            return obj;
          }
          function setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {
            bridge.addListener("NativeStyleEditor_measure", function(_ref) {
              var id = _ref.id, rendererID = _ref.rendererID;
              measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
            });
            bridge.addListener("NativeStyleEditor_renameAttribute", function(_ref2) {
              var id = _ref2.id, rendererID = _ref2.rendererID, oldName = _ref2.oldName, newName = _ref2.newName, value = _ref2.value;
              renameStyle(agent, id, rendererID, oldName, newName, value);
              setTimeout(function() {
                return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
              });
            });
            bridge.addListener("NativeStyleEditor_setValue", function(_ref3) {
              var id = _ref3.id, rendererID = _ref3.rendererID, name = _ref3.name, value = _ref3.value;
              setStyle(agent, id, rendererID, name, value);
              setTimeout(function() {
                return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
              });
            });
            bridge.send("isNativeStyleEditorSupported", {
              isSupported: true,
              validAttributes
            });
          }
          var EMPTY_BOX_STYLE = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
          };
          var componentIDToStyleOverrides = new Map();
          function measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: null,
                style: null
              });
              return;
            }
            var instance = data.instance, style = data.style;
            var resolvedStyle = resolveNativeStyle(style);
            var styleOverrides = componentIDToStyleOverrides.get(id);
            if (styleOverrides != null) {
              resolvedStyle = Object.assign({}, resolvedStyle, styleOverrides);
            }
            if (!instance || typeof instance.measure !== "function") {
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: null,
                style: resolvedStyle || null
              });
              return;
            }
            instance.measure(function(x, y2, width, height, left, top) {
              if (typeof x !== "number") {
                bridge.send("NativeStyleEditor_styleAndLayout", {
                  id,
                  layout: null,
                  style: resolvedStyle || null
                });
                return;
              }
              var margin = resolvedStyle != null && resolveBoxStyle("margin", resolvedStyle) || EMPTY_BOX_STYLE;
              var padding = resolvedStyle != null && resolveBoxStyle("padding", resolvedStyle) || EMPTY_BOX_STYLE;
              bridge.send("NativeStyleEditor_styleAndLayout", {
                id,
                layout: {
                  x,
                  y: y2,
                  width,
                  height,
                  left,
                  top,
                  margin,
                  padding
                },
                style: resolvedStyle || null
              });
            });
          }
          function shallowClone(object) {
            var cloned = {};
            for (var n2 in object) {
              cloned[n2] = object[n2];
            }
            return cloned;
          }
          function renameStyle(agent, id, rendererID, oldName, newName, value) {
            var _ref4;
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              return;
            }
            var instance = data.instance, style = data.style;
            var newStyle = newName ? (_ref4 = {}, setupNativeStyleEditor_defineProperty(_ref4, oldName, void 0), setupNativeStyleEditor_defineProperty(_ref4, newName, value), _ref4) : setupNativeStyleEditor_defineProperty({}, oldName, void 0);
            var customStyle;
            if (instance !== null && typeof instance.setNativeProps === "function") {
              var styleOverrides = componentIDToStyleOverrides.get(id);
              if (!styleOverrides) {
                componentIDToStyleOverrides.set(id, newStyle);
              } else {
                Object.assign(styleOverrides, newStyle);
              }
              instance.setNativeProps({
                style: newStyle
              });
            } else if (Array.isArray(style)) {
              var lastIndex = style.length - 1;
              if (setupNativeStyleEditor_typeof(style[lastIndex]) === "object" && !Array.isArray(style[lastIndex])) {
                customStyle = shallowClone(style[lastIndex]);
                delete customStyle[oldName];
                if (newName) {
                  customStyle[newName] = value;
                } else {
                  customStyle[oldName] = void 0;
                }
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style", lastIndex],
                  value: customStyle
                });
              } else {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style"],
                  value: style.concat([newStyle])
                });
              }
            } else if (setupNativeStyleEditor_typeof(style) === "object") {
              customStyle = shallowClone(style);
              delete customStyle[oldName];
              if (newName) {
                customStyle[newName] = value;
              } else {
                customStyle[oldName] = void 0;
              }
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: customStyle
              });
            } else {
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: [style, newStyle]
              });
            }
            agent.emit("hideNativeHighlight");
          }
          function setStyle(agent, id, rendererID, name, value) {
            var data = agent.getInstanceAndStyle({
              id,
              rendererID
            });
            if (!data || !data.style) {
              return;
            }
            var instance = data.instance, style = data.style;
            var newStyle = setupNativeStyleEditor_defineProperty({}, name, value);
            if (instance !== null && typeof instance.setNativeProps === "function") {
              var styleOverrides = componentIDToStyleOverrides.get(id);
              if (!styleOverrides) {
                componentIDToStyleOverrides.set(id, newStyle);
              } else {
                Object.assign(styleOverrides, newStyle);
              }
              instance.setNativeProps({
                style: newStyle
              });
            } else if (Array.isArray(style)) {
              var lastLength = style.length - 1;
              if (setupNativeStyleEditor_typeof(style[lastLength]) === "object" && !Array.isArray(style[lastLength])) {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style", lastLength, name],
                  value
                });
              } else {
                agent.overrideValueAtPath({
                  type: "props",
                  id,
                  rendererID,
                  path: ["style"],
                  value: style.concat([newStyle])
                });
              }
            } else {
              agent.overrideValueAtPath({
                type: "props",
                id,
                rendererID,
                path: ["style"],
                value: [style, newStyle]
              });
            }
            agent.emit("hideNativeHighlight");
          }
          installHook(window);
          var backend_hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
          var savedComponentFilters = getDefaultComponentFilters();
          function backend_debug(methodName) {
            if (__DEBUG__) {
              var _console;
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              (_console = console).log.apply(_console, ["%c[core/backend] %c".concat(methodName), "color: teal; font-weight: bold;", "font-weight: bold;"].concat(args));
            }
          }
          function connectToDevTools(options) {
            if (backend_hook == null) {
              return;
            }
            var _ref = options || {}, _ref$host = _ref.host, host = _ref$host === void 0 ? "localhost" : _ref$host, nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes, _ref$useHttps = _ref.useHttps, useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps, _ref$port = _ref.port, port = _ref$port === void 0 ? 8097 : _ref$port, websocket = _ref.websocket, _ref$resolveRNStyle = _ref.resolveRNStyle, resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle, _ref$retryConnectionD = _ref.retryConnectionDelay, retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2e3 : _ref$retryConnectionD, _ref$isAppActive = _ref.isAppActive, isAppActive = _ref$isAppActive === void 0 ? function() {
              return true;
            } : _ref$isAppActive;
            var protocol = useHttps ? "wss" : "ws";
            var retryTimeoutID = null;
            function scheduleRetry() {
              if (retryTimeoutID === null) {
                retryTimeoutID = setTimeout(function() {
                  return connectToDevTools(options);
                }, retryConnectionDelay);
              }
            }
            if (!isAppActive()) {
              scheduleRetry();
              return;
            }
            var bridge = null;
            var messageListeners = [];
            var uri = protocol + "://" + host + ":" + port;
            var ws = websocket ? websocket : new window.WebSocket(uri);
            ws.onclose = handleClose;
            ws.onerror = handleFailed;
            ws.onmessage = handleMessage;
            ws.onopen = function() {
              bridge = new src_bridge({
                listen: function listen(fn) {
                  messageListeners.push(fn);
                  return function() {
                    var index = messageListeners.indexOf(fn);
                    if (index >= 0) {
                      messageListeners.splice(index, 1);
                    }
                  };
                },
                send: function send(event, payload, transferable) {
                  if (ws.readyState === ws.OPEN) {
                    if (__DEBUG__) {
                      backend_debug("wall.send()", event, payload);
                    }
                    ws.send(JSON.stringify({
                      event,
                      payload
                    }));
                  } else {
                    if (__DEBUG__) {
                      backend_debug("wall.send()", "Shutting down bridge because of closed WebSocket connection");
                    }
                    if (bridge !== null) {
                      bridge.shutdown();
                    }
                    scheduleRetry();
                  }
                }
              });
              bridge.addListener("inspectElement", function(_ref2) {
                var id = _ref2.id, rendererID = _ref2.rendererID;
                var renderer = agent.rendererInterfaces[rendererID];
                if (renderer != null) {
                  var nodes = renderer.findNativeNodesForFiberID(id);
                  if (nodes != null && nodes[0] != null) {
                    agent.emit("showNativeHighlight", nodes[0]);
                  }
                }
              });
              bridge.addListener("updateComponentFilters", function(componentFilters) {
                savedComponentFilters = componentFilters;
              });
              if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {
                bridge.send("overrideComponentFilters", savedComponentFilters);
              }
              var agent = new agent_Agent(bridge);
              agent.addListener("shutdown", function() {
                backend_hook.emit("shutdown");
              });
              initBackend(backend_hook, agent, window);
              if (resolveRNStyle != null || backend_hook.resolveRNStyle != null) {
                setupNativeStyleEditor(bridge, agent, resolveRNStyle || backend_hook.resolveRNStyle, nativeStyleEditorValidAttributes || backend_hook.nativeStyleEditorValidAttributes || null);
              } else {
                var lazyResolveRNStyle;
                var lazyNativeStyleEditorValidAttributes;
                var initAfterTick = function initAfterTick2() {
                  if (bridge !== null) {
                    setupNativeStyleEditor(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);
                  }
                };
                if (!backend_hook.hasOwnProperty("resolveRNStyle")) {
                  Object.defineProperty(backend_hook, "resolveRNStyle", {
                    enumerable: false,
                    get: function get() {
                      return lazyResolveRNStyle;
                    },
                    set: function set(value) {
                      lazyResolveRNStyle = value;
                      initAfterTick();
                    }
                  });
                }
                if (!backend_hook.hasOwnProperty("nativeStyleEditorValidAttributes")) {
                  Object.defineProperty(backend_hook, "nativeStyleEditorValidAttributes", {
                    enumerable: false,
                    get: function get() {
                      return lazyNativeStyleEditorValidAttributes;
                    },
                    set: function set(value) {
                      lazyNativeStyleEditorValidAttributes = value;
                      initAfterTick();
                    }
                  });
                }
              }
            };
            function handleClose() {
              if (__DEBUG__) {
                backend_debug("WebSocket.onclose");
              }
              if (bridge !== null) {
                bridge.emit("shutdown");
              }
              scheduleRetry();
            }
            function handleFailed() {
              if (__DEBUG__) {
                backend_debug("WebSocket.onerror");
              }
              scheduleRetry();
            }
            function handleMessage(event) {
              var data;
              try {
                if (typeof event.data === "string") {
                  data = JSON.parse(event.data);
                  if (__DEBUG__) {
                    backend_debug("WebSocket.onmessage", data);
                  }
                } else {
                  throw Error();
                }
              } catch (e2) {
                console.error("[React DevTools] Failed to parse JSON: " + event.data);
                return;
              }
              messageListeners.forEach(function(fn) {
                try {
                  fn(data);
                } catch (error) {
                  console.log("[React DevTools] Error calling listener", data);
                  console.log("error:", error);
                  throw error;
                }
              });
            }
          }
        }
      ]);
    });
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/devtools.js
var require_devtools = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/devtools.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    require_devtools_window_polyfill();
    var react_devtools_core_1 = require_backend();
    react_devtools_core_1.connectToDevTools();
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/reconciler.js
var require_reconciler = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/reconciler.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var scheduler_1 = require_scheduler();
    var react_reconciler_1 = __importDefault(require_react_reconciler());
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    var dom_1 = require_dom();
    if (process.env.DEV === "true") {
      require_devtools();
    }
    var cleanupYogaNode = (node) => {
      node === null || node === void 0 ? void 0 : node.unsetMeasureFunc();
      node === null || node === void 0 ? void 0 : node.freeRecursive();
    };
    exports2.default = react_reconciler_1.default({
      schedulePassiveEffects: scheduler_1.unstable_scheduleCallback,
      cancelPassiveEffects: scheduler_1.unstable_cancelCallback,
      now: Date.now,
      getRootHostContext: () => ({
        isInsideText: false
      }),
      prepareForCommit: () => {
      },
      resetAfterCommit: (rootNode) => {
        if (rootNode.isStaticDirty) {
          rootNode.isStaticDirty = false;
          if (typeof rootNode.onImmediateRender === "function") {
            rootNode.onImmediateRender();
          }
          return;
        }
        if (typeof rootNode.onRender === "function") {
          rootNode.onRender();
        }
      },
      getChildHostContext: (parentHostContext, type) => {
        const previousIsInsideText = parentHostContext.isInsideText;
        const isInsideText = type === "ink-text" || type === "ink-virtual-text";
        if (previousIsInsideText === isInsideText) {
          return parentHostContext;
        }
        return { isInsideText };
      },
      shouldSetTextContent: () => false,
      createInstance: (originalType, newProps, _root, hostContext) => {
        if (hostContext.isInsideText && originalType === "ink-box") {
          throw new Error(`<Box> can\u2019t be nested inside <Text> component`);
        }
        const type = originalType === "ink-text" && hostContext.isInsideText ? "ink-virtual-text" : originalType;
        const node = dom_1.createNode(type);
        for (const [key, value] of Object.entries(newProps)) {
          if (key === "children") {
            continue;
          } else if (key === "style") {
            dom_1.setStyle(node, value);
          } else if (key === "internal_transform") {
            node.internal_transform = value;
          } else if (key === "internal_static") {
            node.internal_static = true;
          } else {
            dom_1.setAttribute(node, key, value);
          }
        }
        return node;
      },
      createTextInstance: (text, _root, hostContext) => {
        if (!hostContext.isInsideText) {
          throw new Error(`Text string "${text}" must be rendered inside <Text> component`);
        }
        return dom_1.createTextNode(text);
      },
      resetTextContent: () => {
      },
      hideTextInstance: (node) => {
        dom_1.setTextNodeValue(node, "");
      },
      unhideTextInstance: (node, text) => {
        dom_1.setTextNodeValue(node, text);
      },
      getPublicInstance: (instance) => instance,
      hideInstance: (node) => {
        var _a;
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_NONE);
      },
      unhideInstance: (node) => {
        var _a;
        (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.setDisplay(yoga_layout_prebuilt_1.default.DISPLAY_FLEX);
      },
      appendInitialChild: dom_1.appendChildNode,
      appendChild: dom_1.appendChildNode,
      insertBefore: dom_1.insertBeforeNode,
      finalizeInitialChildren: (node, _type, _props, rootNode) => {
        if (node.internal_static) {
          rootNode.isStaticDirty = true;
          rootNode.staticNode = node;
        }
        return false;
      },
      supportsMutation: true,
      appendChildToContainer: dom_1.appendChildNode,
      insertInContainerBefore: dom_1.insertBeforeNode,
      removeChildFromContainer: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
      },
      prepareUpdate: (node, _type, oldProps, newProps, rootNode) => {
        if (node.internal_static) {
          rootNode.isStaticDirty = true;
        }
        const updatePayload = {};
        const keys = Object.keys(newProps);
        for (const key of keys) {
          if (newProps[key] !== oldProps[key]) {
            const isStyle = key === "style" && typeof newProps.style === "object" && typeof oldProps.style === "object";
            if (isStyle) {
              const newStyle = newProps.style;
              const oldStyle = oldProps.style;
              const styleKeys = Object.keys(newStyle);
              for (const styleKey of styleKeys) {
                if (styleKey === "borderStyle" || styleKey === "borderColor") {
                  if (typeof updatePayload.style !== "object") {
                    const style = {};
                    updatePayload.style = style;
                  }
                  updatePayload.style.borderStyle = newStyle.borderStyle;
                  updatePayload.style.borderColor = newStyle.borderColor;
                }
                if (newStyle[styleKey] !== oldStyle[styleKey]) {
                  if (typeof updatePayload.style !== "object") {
                    const style = {};
                    updatePayload.style = style;
                  }
                  updatePayload.style[styleKey] = newStyle[styleKey];
                }
              }
              continue;
            }
            updatePayload[key] = newProps[key];
          }
        }
        return updatePayload;
      },
      commitUpdate: (node, updatePayload) => {
        for (const [key, value] of Object.entries(updatePayload)) {
          if (key === "children") {
            continue;
          } else if (key === "style") {
            dom_1.setStyle(node, value);
          } else if (key === "internal_transform") {
            node.internal_transform = value;
          } else if (key === "internal_static") {
            node.internal_static = true;
          } else {
            dom_1.setAttribute(node, key, value);
          }
        }
      },
      commitTextUpdate: (node, _oldText, newText) => {
        dom_1.setTextNodeValue(node, newText);
      },
      removeChild: (node, removeNode) => {
        dom_1.removeChildNode(node, removeNode);
        cleanupYogaNode(removeNode.yogaNode);
      }
    });
  }
});

// node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js
var require_indent_string = __commonJS({
  "node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (string, count = 1, options) => {
      options = __spreadValues({
        indent: " ",
        includeEmptyLines: false
      }, options);
      if (typeof string !== "string") {
        throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
      }
      if (typeof count !== "number") {
        throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
      }
      if (typeof options.indent !== "string") {
        throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
      }
      if (count === 0) {
        return string;
      }
      const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
      return string.replace(regex, options.indent.repeat(count));
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/get-max-width.js
var require_get_max_width = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/get-max-width.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    exports2.default = (yogaNode) => {
      return yogaNode.getComputedWidth() - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedPadding(yoga_layout_prebuilt_1.default.EDGE_RIGHT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_LEFT) - yogaNode.getComputedBorder(yoga_layout_prebuilt_1.default.EDGE_RIGHT);
    };
  }
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/boxes.json
var require_boxes = __commonJS({
  "node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/boxes.json"(exports2, module2) {
    module2.exports = {
      single: {
        topLeft: "\u250C",
        topRight: "\u2510",
        bottomRight: "\u2518",
        bottomLeft: "\u2514",
        vertical: "\u2502",
        horizontal: "\u2500"
      },
      double: {
        topLeft: "\u2554",
        topRight: "\u2557",
        bottomRight: "\u255D",
        bottomLeft: "\u255A",
        vertical: "\u2551",
        horizontal: "\u2550"
      },
      round: {
        topLeft: "\u256D",
        topRight: "\u256E",
        bottomRight: "\u256F",
        bottomLeft: "\u2570",
        vertical: "\u2502",
        horizontal: "\u2500"
      },
      bold: {
        topLeft: "\u250F",
        topRight: "\u2513",
        bottomRight: "\u251B",
        bottomLeft: "\u2517",
        vertical: "\u2503",
        horizontal: "\u2501"
      },
      singleDouble: {
        topLeft: "\u2553",
        topRight: "\u2556",
        bottomRight: "\u255C",
        bottomLeft: "\u2559",
        vertical: "\u2551",
        horizontal: "\u2500"
      },
      doubleSingle: {
        topLeft: "\u2552",
        topRight: "\u2555",
        bottomRight: "\u255B",
        bottomLeft: "\u2558",
        vertical: "\u2502",
        horizontal: "\u2550"
      },
      classic: {
        topLeft: "+",
        topRight: "+",
        bottomRight: "+",
        bottomLeft: "+",
        vertical: "|",
        horizontal: "-"
      }
    };
  }
});

// node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/index.js
var require_cli_boxes = __commonJS({
  "node_modules/.pnpm/cli-boxes@2.2.1/node_modules/cli-boxes/index.js"(exports2, module2) {
    "use strict";
    var cliBoxes = require_boxes();
    module2.exports = cliBoxes;
    module2.exports.default = cliBoxes;
  }
});

// node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os2 = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os2.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js"(exports2, module2) {
    "use strict";
    var stringReplaceAll = (string, substring, replacer) => {
      let index = string.indexOf(substring);
      if (index === -1) {
        return string;
      }
      const substringLength = substring.length;
      let endIndex = 0;
      let returnValue = "";
      do {
        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
      let endIndex = 0;
      let returnValue = "";
      do {
        const gotCR = string[index - 1] === "\r";
        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
        endIndex = index + 1;
        index = string.indexOf("\n", endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    module2.exports = {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js
var require_templates = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js"(exports2, module2) {
    "use strict";
    var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = new Map([
      ["n", "\n"],
      ["r", "\r"],
      ["t", "	"],
      ["b", "\b"],
      ["f", "\f"],
      ["v", "\v"],
      ["0", "\0"],
      ["\\", "\\"],
      ["e", ""],
      ["a", "\x07"]
    ]);
    function unescape(c2) {
      const u2 = c2[0] === "u";
      const bracket = c2[1] === "{";
      if (u2 && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
        return String.fromCharCode(parseInt(c2.slice(1), 16));
      }
      if (u2 && bracket) {
        return String.fromCodePoint(parseInt(c2.slice(2, -1), 16));
      }
      return ESCAPES.get(c2) || c2;
    }
    function parseArguments(name, arguments_) {
      const results = [];
      const chunks = arguments_.trim().split(/\s*,\s*/g);
      let matches;
      for (const chunk of chunks) {
        const number = Number(chunk);
        if (!Number.isNaN(number)) {
          results.push(number);
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk;
      for (const [styleName, styles2] of Object.entries(enabled)) {
        if (!Array.isArray(styles2)) {
          continue;
        }
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
      }
      return current;
    }
    module2.exports = (chalk, temporary) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
        if (escapeCharacter) {
          chunk.push(unescape(escapeCharacter));
        } else if (style) {
          const string = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
          styles.push({ inverse, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }
          chunks.push(buildStyle(chalk, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(character);
        }
      });
      chunks.push(chunk.join(""));
      if (styles.length > 0) {
        const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
        throw new Error(errMessage);
      }
      return chunks.join("");
    };
  }
});

// node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js
var require_source = __commonJS({
  "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js"(exports2, module2) {
    "use strict";
    var ansiStyles = require_ansi_styles();
    var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
    var {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    } = require_util();
    var { isArray } = Array;
    var levelMapping = [
      "ansi",
      "ansi",
      "ansi256",
      "ansi16m"
    ];
    var styles = Object.create(null);
    var applyOptions = (object, options = {}) => {
      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error("The `level` option should be an integer from 0 to 3");
      }
      const colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === void 0 ? colorLevel : options.level;
    };
    var ChalkClass = class {
      constructor(options) {
        return chalkFactory(options);
      }
    };
    var chalkFactory = (options) => {
      const chalk2 = {};
      applyOptions(chalk2, options);
      chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
      Object.setPrototypeOf(chalk2, Chalk.prototype);
      Object.setPrototypeOf(chalk2.template, chalk2);
      chalk2.template.constructor = () => {
        throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
      };
      chalk2.template.Instance = ChalkClass;
      return chalk2.template;
    };
    function Chalk(options) {
      return chalkFactory(options);
    }
    for (const [styleName, style] of Object.entries(ansiStyles)) {
      styles[styleName] = {
        get() {
          const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          Object.defineProperty(this, styleName, { value: builder });
          return builder;
        }
      };
    }
    styles.visible = {
      get() {
        const builder = createBuilder(this, this._styler, true);
        Object.defineProperty(this, "visible", { value: builder });
        return builder;
      }
    };
    var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
    for (const model of usedModels) {
      styles[model] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    for (const model of usedModels) {
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, __spreadProps(__spreadValues({}, styles), {
      level: {
        enumerable: true,
        get() {
          return this._generator.level;
        },
        set(level) {
          this._generator.level = level;
        }
      }
    }));
    var createStyler = (open, close, parent) => {
      let openAll;
      let closeAll;
      if (parent === void 0) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }
      return {
        open,
        close,
        openAll,
        closeAll,
        parent
      };
    };
    var createBuilder = (self2, _styler, _isEmpty) => {
      const builder = (...arguments_) => {
        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
          return applyStyle(builder, chalkTag(builder, ...arguments_));
        }
        return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
      };
      Object.setPrototypeOf(builder, proto);
      builder._generator = self2;
      builder._styler = _styler;
      builder._isEmpty = _isEmpty;
      return builder;
    };
    var applyStyle = (self2, string) => {
      if (self2.level <= 0 || !string) {
        return self2._isEmpty ? "" : string;
      }
      let styler = self2._styler;
      if (styler === void 0) {
        return string;
      }
      const { openAll, closeAll } = styler;
      if (string.indexOf("") !== -1) {
        while (styler !== void 0) {
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      }
      const lfIndex = string.indexOf("\n");
      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }
      return openAll + string + closeAll;
    };
    var template;
    var chalkTag = (chalk2, ...strings) => {
      const [firstString] = strings;
      if (!isArray(firstString) || !isArray(firstString.raw)) {
        return strings.join(" ");
      }
      const arguments_ = strings.slice(1);
      const parts = [firstString.raw[0]];
      for (let i2 = 1; i2 < firstString.length; i2++) {
        parts.push(String(arguments_[i2 - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i2]));
      }
      if (template === void 0) {
        template = require_templates();
      }
      return template(chalk2, parts.join(""));
    };
    Object.defineProperties(Chalk.prototype, styles);
    var chalk = Chalk();
    chalk.supportsColor = stdoutColor;
    chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
    chalk.stderr.supportsColor = stderrColor;
    module2.exports = chalk;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/colorize.js
var require_colorize = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/colorize.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var chalk_1 = __importDefault(require_source());
    var RGB_LIKE_REGEX = /^(rgb|hsl|hsv|hwb)\(\s?(\d+),\s?(\d+),\s?(\d+)\s?\)$/;
    var ANSI_REGEX = /^(ansi|ansi256)\(\s?(\d+)\s?\)$/;
    var getMethod = (name, type) => {
      if (type === "foreground") {
        return name;
      }
      return "bg" + name[0].toUpperCase() + name.slice(1);
    };
    exports2.default = (str, color, type) => {
      if (!color) {
        return str;
      }
      if (color in chalk_1.default) {
        const method = getMethod(color, type);
        return chalk_1.default[method](str);
      }
      if (color.startsWith("#")) {
        const method = getMethod("hex", type);
        return chalk_1.default[method](color)(str);
      }
      if (color.startsWith("ansi")) {
        const matches = ANSI_REGEX.exec(color);
        if (!matches) {
          return str;
        }
        const method = getMethod(matches[1], type);
        const value = Number(matches[2]);
        return chalk_1.default[method](value)(str);
      }
      const isRgbLike = color.startsWith("rgb") || color.startsWith("hsl") || color.startsWith("hsv") || color.startsWith("hwb");
      if (isRgbLike) {
        const matches = RGB_LIKE_REGEX.exec(color);
        if (!matches) {
          return str;
        }
        const method = getMethod(matches[1], type);
        const firstValue = Number(matches[2]);
        const secondValue = Number(matches[3]);
        const thirdValue = Number(matches[4]);
        return chalk_1.default[method](firstValue, secondValue, thirdValue)(str);
      }
      return str;
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render-border.js
var require_render_border = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render-border.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cli_boxes_1 = __importDefault(require_cli_boxes());
    var colorize_1 = __importDefault(require_colorize());
    exports2.default = (x, y2, node, output) => {
      if (typeof node.style.borderStyle === "string") {
        const width = node.yogaNode.getComputedWidth();
        const height = node.yogaNode.getComputedHeight();
        const color = node.style.borderColor;
        const box = cli_boxes_1.default[node.style.borderStyle];
        const topBorder = colorize_1.default(box.topLeft + box.horizontal.repeat(width - 2) + box.topRight, color, "foreground");
        const verticalBorder = (colorize_1.default(box.vertical, color, "foreground") + "\n").repeat(height - 2);
        const bottomBorder = colorize_1.default(box.bottomLeft + box.horizontal.repeat(width - 2) + box.bottomRight, color, "foreground");
        output.write(x, y2, topBorder, { transformers: [] });
        output.write(x, y2 + 1, verticalBorder, { transformers: [] });
        output.write(x + width - 1, y2 + 1, verticalBorder, { transformers: [] });
        output.write(x, y2 + height - 1, bottomBorder, { transformers: [] });
      }
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render-node-to-output.js
var require_render_node_to_output = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render-node-to-output.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    var widest_line_1 = __importDefault(require_widest_line());
    var indent_string_1 = __importDefault(require_indent_string());
    var wrap_text_1 = __importDefault(require_wrap_text());
    var get_max_width_1 = __importDefault(require_get_max_width());
    var squash_text_nodes_1 = __importDefault(require_squash_text_nodes());
    var render_border_1 = __importDefault(require_render_border());
    var applyPaddingToText = (node, text) => {
      var _a;
      const yogaNode = (_a = node.childNodes[0]) === null || _a === void 0 ? void 0 : _a.yogaNode;
      if (yogaNode) {
        const offsetX = yogaNode.getComputedLeft();
        const offsetY = yogaNode.getComputedTop();
        text = "\n".repeat(offsetY) + indent_string_1.default(text, offsetX);
      }
      return text;
    };
    var renderNodeToOutput = (node, output, options) => {
      var _a;
      const { offsetX = 0, offsetY = 0, transformers = [], skipStaticElements } = options;
      if (skipStaticElements && node.internal_static) {
        return;
      }
      const { yogaNode } = node;
      if (yogaNode) {
        if (yogaNode.getDisplay() === yoga_layout_prebuilt_1.default.DISPLAY_NONE) {
          return;
        }
        const x = offsetX + yogaNode.getComputedLeft();
        const y2 = offsetY + yogaNode.getComputedTop();
        let newTransformers = transformers;
        if (typeof node.internal_transform === "function") {
          newTransformers = [node.internal_transform, ...transformers];
        }
        if (node.nodeName === "ink-text") {
          let text = squash_text_nodes_1.default(node);
          if (text.length > 0) {
            const currentWidth = widest_line_1.default(text);
            const maxWidth = get_max_width_1.default(yogaNode);
            if (currentWidth > maxWidth) {
              const textWrap = (_a = node.style.textWrap) !== null && _a !== void 0 ? _a : "wrap";
              text = wrap_text_1.default(text, maxWidth, textWrap);
            }
            text = applyPaddingToText(node, text);
            output.write(x, y2, text, { transformers: newTransformers });
          }
          return;
        }
        if (node.nodeName === "ink-box") {
          render_border_1.default(x, y2, node, output);
        }
        if (node.nodeName === "ink-root" || node.nodeName === "ink-box") {
          for (const childNode of node.childNodes) {
            renderNodeToOutput(childNode, output, {
              offsetX: x,
              offsetY: y2,
              transformers: newTransformers,
              skipStaticElements
            });
          }
        }
      }
    };
    exports2.default = renderNodeToOutput;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/output.js
var require_output = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/output.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var slice_ansi_1 = __importDefault(require_slice_ansi());
    var string_width_1 = __importDefault(require_string_width());
    var Output = class {
      constructor(options) {
        this.writes = [];
        const { width, height } = options;
        this.width = width;
        this.height = height;
      }
      write(x, y2, text, options) {
        const { transformers } = options;
        if (!text) {
          return;
        }
        this.writes.push({ x, y: y2, text, transformers });
      }
      get() {
        const output = [];
        for (let y2 = 0; y2 < this.height; y2++) {
          output.push(" ".repeat(this.width));
        }
        for (const write of this.writes) {
          const { x, y: y2, text, transformers } = write;
          const lines = text.split("\n");
          let offsetY = 0;
          for (let line of lines) {
            const currentLine = output[y2 + offsetY];
            if (!currentLine) {
              continue;
            }
            const width = string_width_1.default(line);
            for (const transformer of transformers) {
              line = transformer(line);
            }
            output[y2 + offsetY] = slice_ansi_1.default(currentLine, 0, x) + line + slice_ansi_1.default(currentLine, x + width);
            offsetY++;
          }
        }
        const generatedOutput = output.map((line) => line.trimRight()).join("\n");
        return {
          output: generatedOutput,
          height: output.length
        };
      }
    };
    exports2.default = Output;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/renderer.js
var require_renderer = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/renderer.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
    var render_node_to_output_1 = __importDefault(require_render_node_to_output());
    var output_1 = __importDefault(require_output());
    exports2.default = (node, terminalWidth) => {
      var _a;
      node.yogaNode.setWidth(terminalWidth);
      if (node.yogaNode) {
        node.yogaNode.calculateLayout(void 0, void 0, yoga_layout_prebuilt_1.default.DIRECTION_LTR);
        const output = new output_1.default({
          width: node.yogaNode.getComputedWidth(),
          height: node.yogaNode.getComputedHeight()
        });
        render_node_to_output_1.default(node, output, { skipStaticElements: true });
        let staticOutput;
        if ((_a = node.staticNode) === null || _a === void 0 ? void 0 : _a.yogaNode) {
          staticOutput = new output_1.default({
            width: node.staticNode.yogaNode.getComputedWidth(),
            height: node.staticNode.yogaNode.getComputedHeight()
          });
          render_node_to_output_1.default(node.staticNode, staticOutput, {
            skipStaticElements: false
          });
        }
        const { output: generatedOutput, height: outputHeight } = output.get();
        return {
          output: generatedOutput,
          outputHeight,
          staticOutput: staticOutput ? `${staticOutput.get().output}
` : ""
        };
      }
      return {
        output: "",
        outputHeight: 0,
        staticOutput: ""
      };
    };
  }
});

// node_modules/.pnpm/patch-console@1.0.0/node_modules/patch-console/build/index.js
var require_build = __commonJS({
  "node_modules/.pnpm/patch-console@1.0.0/node_modules/patch-console/build/index.js"(exports2, module2) {
    "use strict";
    var stream_1 = require("stream");
    var CONSOLE_METHODS = [
      "assert",
      "count",
      "countReset",
      "debug",
      "dir",
      "dirxml",
      "error",
      "group",
      "groupCollapsed",
      "groupEnd",
      "info",
      "log",
      "table",
      "time",
      "timeEnd",
      "timeLog",
      "trace",
      "warn"
    ];
    var originalMethods = {};
    var patchConsole = (callback) => {
      const stdout = new stream_1.PassThrough();
      const stderr = new stream_1.PassThrough();
      stdout.write = (data) => callback("stdout", data);
      stderr.write = (data) => callback("stderr", data);
      const internalConsole = new console.Console(stdout, stderr);
      for (const method of CONSOLE_METHODS) {
        originalMethods[method] = console[method];
        console[method] = internalConsole[method];
      }
      return () => {
        for (const method of CONSOLE_METHODS) {
          console[method] = originalMethods[method];
        }
        originalMethods = {};
      };
    };
    module2.exports = patchConsole;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/instances.js
var require_instances = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/instances.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = new WeakMap();
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/AppContext.js
var require_AppContext = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/AppContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var AppContext = react_1.createContext({
      exit: () => {
      }
    });
    AppContext.displayName = "InternalAppContext";
    exports2.default = AppContext;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StdinContext.js
var require_StdinContext = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StdinContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdinContext = react_1.createContext({
      stdin: void 0,
      setRawMode: () => {
      },
      isRawModeSupported: false,
      internal_exitOnCtrlC: true
    });
    StdinContext.displayName = "InternalStdinContext";
    exports2.default = StdinContext;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StdoutContext.js
var require_StdoutContext = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StdoutContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdoutContext = react_1.createContext({
      stdout: void 0,
      write: () => {
      }
    });
    StdoutContext.displayName = "InternalStdoutContext";
    exports2.default = StdoutContext;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StderrContext.js
var require_StderrContext = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/StderrContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StderrContext = react_1.createContext({
      stderr: void 0,
      write: () => {
      }
    });
    StderrContext.displayName = "InternalStderrContext";
    exports2.default = StderrContext;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/FocusContext.js
var require_FocusContext = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/FocusContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext = react_1.createContext({
      activeId: void 0,
      add: () => {
      },
      remove: () => {
      },
      activate: () => {
      },
      deactivate: () => {
      },
      enableFocus: () => {
      },
      disableFocus: () => {
      },
      focusNext: () => {
      },
      focusPrevious: () => {
      }
    });
    FocusContext.displayName = "InternalFocusContext";
    exports2.default = FocusContext;
  }
});

// node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  "node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
    module2.exports = (string) => {
      if (typeof string !== "string") {
        throw new TypeError("Expected a string");
      }
      return string.replace(matchOperatorsRegex, "\\$&");
    };
  }
});

// node_modules/.pnpm/stack-utils@2.0.3/node_modules/stack-utils/index.js
var require_stack_utils = __commonJS({
  "node_modules/.pnpm/stack-utils@2.0.3/node_modules/stack-utils/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp2 = require_escape_string_regexp();
    var natives = [].concat(require("module").builtinModules, "bootstrap_node", "node").map((n2) => new RegExp(`(?:\\((?:node:)?${n2}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n2}(?:\\.js)?:\\d+:\\d+$)`));
    natives.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
    var StackUtils = class {
      constructor(opts) {
        opts = __spreadValues({
          ignoredPackages: []
        }, opts);
        if ("internals" in opts === false) {
          opts.internals = StackUtils.nodeInternals();
        }
        if ("cwd" in opts === false) {
          opts.cwd = process.cwd();
        }
        this._cwd = opts.cwd.replace(/\\/g, "/");
        this._internals = [].concat(opts.internals, ignoredPackagesRegExp(opts.ignoredPackages));
        this._wrapCallSite = opts.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...natives];
      }
      clean(stack, indent = 0) {
        indent = " ".repeat(indent);
        if (!Array.isArray(stack)) {
          stack = stack.split("\n");
        }
        if (!/^\s*at /.test(stack[0]) && /^\s*at /.test(stack[1])) {
          stack = stack.slice(1);
        }
        let outdent = false;
        let lastNonAtLine = null;
        const result = [];
        stack.forEach((st) => {
          st = st.replace(/\\/g, "/");
          if (this._internals.some((internal) => internal.test(st))) {
            return;
          }
          const isAtLine = /^\s*at /.test(st);
          if (outdent) {
            st = st.trimEnd().replace(/^(\s+)at /, "$1");
          } else {
            st = st.trim();
            if (isAtLine) {
              st = st.slice(3);
            }
          }
          st = st.replace(`${this._cwd}/`, "");
          if (st) {
            if (isAtLine) {
              if (lastNonAtLine) {
                result.push(lastNonAtLine);
                lastNonAtLine = null;
              }
              result.push(st);
            } else {
              outdent = true;
              lastNonAtLine = st;
            }
          }
        });
        return result.map((line) => `${indent}${line}
`).join("");
      }
      captureString(limit, fn = this.captureString) {
        if (typeof limit === "function") {
          fn = limit;
          limit = Infinity;
        }
        const { stackTraceLimit } = Error;
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn);
        const { stack } = obj;
        Error.stackTraceLimit = stackTraceLimit;
        return this.clean(stack);
      }
      capture(limit, fn = this.capture) {
        if (typeof limit === "function") {
          fn = limit;
          limit = Infinity;
        }
        const { prepareStackTrace, stackTraceLimit } = Error;
        Error.prepareStackTrace = (obj2, site) => {
          if (this._wrapCallSite) {
            return site.map(this._wrapCallSite);
          }
          return site;
        };
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn);
        const { stack } = obj;
        Object.assign(Error, { prepareStackTrace, stackTraceLimit });
        return stack;
      }
      at(fn = this.at) {
        const [site] = this.capture(1, fn);
        if (!site) {
          return {};
        }
        const res = {
          line: site.getLineNumber(),
          column: site.getColumnNumber()
        };
        setFile(res, site.getFileName(), this._cwd);
        if (site.isConstructor()) {
          res.constructor = true;
        }
        if (site.isEval()) {
          res.evalOrigin = site.getEvalOrigin();
        }
        if (site.isNative()) {
          res.native = true;
        }
        let typename;
        try {
          typename = site.getTypeName();
        } catch (_) {
        }
        if (typename && typename !== "Object" && typename !== "[object Object]") {
          res.type = typename;
        }
        const fname = site.getFunctionName();
        if (fname) {
          res.function = fname;
        }
        const meth = site.getMethodName();
        if (meth && fname !== meth) {
          res.method = meth;
        }
        return res;
      }
      parseLine(line) {
        const match = line && line.match(re);
        if (!match) {
          return null;
        }
        const ctor = match[1] === "new";
        let fname = match[2];
        const evalOrigin = match[3];
        const evalFile = match[4];
        const evalLine = Number(match[5]);
        const evalCol = Number(match[6]);
        let file = match[7];
        const lnum = match[8];
        const col = match[9];
        const native = match[10] === "native";
        const closeParen = match[11] === ")";
        let method;
        const res = {};
        if (lnum) {
          res.line = Number(lnum);
        }
        if (col) {
          res.column = Number(col);
        }
        if (closeParen && file) {
          let closes = 0;
          for (let i2 = file.length - 1; i2 > 0; i2--) {
            if (file.charAt(i2) === ")") {
              closes++;
            } else if (file.charAt(i2) === "(" && file.charAt(i2 - 1) === " ") {
              closes--;
              if (closes === -1 && file.charAt(i2 - 1) === " ") {
                const before = file.slice(0, i2 - 1);
                const after = file.slice(i2 + 1);
                file = after;
                fname += ` (${before}`;
                break;
              }
            }
          }
        }
        if (fname) {
          const methodMatch = fname.match(methodRe);
          if (methodMatch) {
            fname = methodMatch[1];
            method = methodMatch[2];
          }
        }
        setFile(res, file, this._cwd);
        if (ctor) {
          res.constructor = true;
        }
        if (evalOrigin) {
          res.evalOrigin = evalOrigin;
          res.evalLine = evalLine;
          res.evalColumn = evalCol;
          res.evalFile = evalFile && evalFile.replace(/\\/g, "/");
        }
        if (native) {
          res.native = true;
        }
        if (fname) {
          res.function = fname;
        }
        if (method && fname !== method) {
          res.method = method;
        }
        return res;
      }
    };
    function setFile(result, filename, cwd) {
      if (filename) {
        filename = filename.replace(/\\/g, "/");
        if (filename.startsWith(`${cwd}/`)) {
          filename = filename.slice(cwd.length + 1);
        }
        result.file = filename;
      }
    }
    function ignoredPackagesRegExp(ignoredPackages) {
      if (ignoredPackages.length === 0) {
        return [];
      }
      const packages = ignoredPackages.map((mod) => escapeStringRegexp2(mod));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${packages.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var re = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$");
    var methodRe = /^(.*?) \[as (.*?)\]$/;
    module2.exports = StackUtils;
  }
});

// node_modules/.pnpm/convert-to-spaces@1.0.2/node_modules/convert-to-spaces/index.js
var require_convert_to_spaces = __commonJS({
  "node_modules/.pnpm/convert-to-spaces@1.0.2/node_modules/convert-to-spaces/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (str, spaces) => {
      return str.replace(/^\t+/gm, ($1) => " ".repeat($1.length * (spaces || 2)));
    };
  }
});

// node_modules/.pnpm/code-excerpt@3.0.0/node_modules/code-excerpt/index.js
var require_code_excerpt = __commonJS({
  "node_modules/.pnpm/code-excerpt@3.0.0/node_modules/code-excerpt/index.js"(exports2, module2) {
    "use strict";
    var tabsToSpaces = require_convert_to_spaces();
    var generateLineNumbers = (line, around) => {
      const lineNumbers = [];
      const min = line - around;
      const max = line + around;
      for (let lineNumber = min; lineNumber <= max; lineNumber++) {
        lineNumbers.push(lineNumber);
      }
      return lineNumbers;
    };
    module2.exports = (source, line, options) => {
      if (typeof source !== "string") {
        throw new TypeError("Source code is missing.");
      }
      if (!line || line < 1) {
        throw new TypeError("Line number must start from `1`.");
      }
      source = tabsToSpaces(source).split(/\r?\n/);
      if (line > source.length) {
        return;
      }
      options = __spreadValues({
        around: 3
      }, options);
      return generateLineNumbers(line, options.around).filter((line2) => source[line2 - 1] !== void 0).map((line2) => ({ line: line2, value: source[line2 - 1] }));
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Box.js
var require_Box = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Box.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __rest = exports2 && exports2.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var Box = react_1.forwardRef((_a, ref2) => {
      var { children } = _a, style = __rest(_a, ["children"]);
      const transformedStyle = Object.assign(Object.assign({}, style), { marginLeft: style.marginLeft || style.marginX || style.margin || 0, marginRight: style.marginRight || style.marginX || style.margin || 0, marginTop: style.marginTop || style.marginY || style.margin || 0, marginBottom: style.marginBottom || style.marginY || style.margin || 0, paddingLeft: style.paddingLeft || style.paddingX || style.padding || 0, paddingRight: style.paddingRight || style.paddingX || style.padding || 0, paddingTop: style.paddingTop || style.paddingY || style.padding || 0, paddingBottom: style.paddingBottom || style.paddingY || style.padding || 0 });
      return react_1.default.createElement("ink-box", { ref: ref2, style: transformedStyle }, children);
    });
    Box.displayName = "Box";
    Box.defaultProps = {
      flexDirection: "row",
      flexGrow: 0,
      flexShrink: 1
    };
    exports2.default = Box;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Text.js
var require_Text = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Text.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var chalk_1 = __importDefault(require_source());
    var colorize_1 = __importDefault(require_colorize());
    var Text = ({ color, backgroundColor, dimColor, bold, italic, underline, strikethrough, inverse, wrap, children }) => {
      if (children === void 0 || children === null) {
        return null;
      }
      const transform = (children2) => {
        if (dimColor) {
          children2 = chalk_1.default.dim(children2);
        }
        if (color) {
          children2 = colorize_1.default(children2, color, "foreground");
        }
        if (backgroundColor) {
          children2 = colorize_1.default(children2, backgroundColor, "background");
        }
        if (bold) {
          children2 = chalk_1.default.bold(children2);
        }
        if (italic) {
          children2 = chalk_1.default.italic(children2);
        }
        if (underline) {
          children2 = chalk_1.default.underline(children2);
        }
        if (strikethrough) {
          children2 = chalk_1.default.strikethrough(children2);
        }
        if (inverse) {
          children2 = chalk_1.default.inverse(children2);
        }
        return children2;
      };
      return react_1.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: "row", textWrap: wrap }, internal_transform: transform }, children);
    };
    Text.displayName = "Text";
    Text.defaultProps = {
      dimColor: false,
      bold: false,
      italic: false,
      underline: false,
      strikethrough: false,
      wrap: "wrap"
    };
    exports2.default = Text;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/ErrorOverview.js
var require_ErrorOverview = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/ErrorOverview.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs = __importStar(require("fs"));
    var react_1 = __importDefault(require_react());
    var stack_utils_1 = __importDefault(require_stack_utils());
    var code_excerpt_1 = __importDefault(require_code_excerpt());
    var Box_1 = __importDefault(require_Box());
    var Text_1 = __importDefault(require_Text());
    var stackUtils = new stack_utils_1.default({
      cwd: process.cwd(),
      internals: stack_utils_1.default.nodeInternals()
    });
    var ErrorOverview = ({ error }) => {
      const stack = error.stack ? error.stack.split("\n").slice(1) : void 0;
      const origin = stack ? stackUtils.parseLine(stack[0]) : void 0;
      let excerpt;
      let lineWidth = 0;
      if ((origin === null || origin === void 0 ? void 0 : origin.file) && (origin === null || origin === void 0 ? void 0 : origin.line) && fs.existsSync(origin.file)) {
        const sourceCode = fs.readFileSync(origin.file, "utf8");
        excerpt = code_excerpt_1.default(sourceCode, origin.line);
        if (excerpt) {
          for (const { line } of excerpt) {
            lineWidth = Math.max(lineWidth, String(line).length);
          }
        }
      }
      return react_1.default.createElement(Box_1.default, { flexDirection: "column", padding: 1 }, react_1.default.createElement(Box_1.default, null, react_1.default.createElement(Text_1.default, { backgroundColor: "red", color: "white" }, " ", "ERROR", " "), react_1.default.createElement(Text_1.default, null, " ", error.message)), origin && react_1.default.createElement(Box_1.default, { marginTop: 1 }, react_1.default.createElement(Text_1.default, { dimColor: true }, origin.file, ":", origin.line, ":", origin.column)), origin && excerpt && react_1.default.createElement(Box_1.default, { marginTop: 1, flexDirection: "column" }, excerpt.map(({ line, value }) => react_1.default.createElement(Box_1.default, { key: line }, react_1.default.createElement(Box_1.default, { width: lineWidth + 1 }, react_1.default.createElement(Text_1.default, { dimColor: line !== origin.line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 }, String(line).padStart(lineWidth, " "), ":")), react_1.default.createElement(Text_1.default, { key: line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 }, " " + value)))), error.stack && react_1.default.createElement(Box_1.default, { marginTop: 1, flexDirection: "column" }, error.stack.split("\n").slice(1).map((line) => {
        const parsedLine = stackUtils.parseLine(line);
        if (!parsedLine) {
          return react_1.default.createElement(Box_1.default, { key: line }, react_1.default.createElement(Text_1.default, { dimColor: true }, "- "), react_1.default.createElement(Text_1.default, { dimColor: true, bold: true }, line));
        }
        return react_1.default.createElement(Box_1.default, { key: line }, react_1.default.createElement(Text_1.default, { dimColor: true }, "- "), react_1.default.createElement(Text_1.default, { dimColor: true, bold: true }, parsedLine.function), react_1.default.createElement(Text_1.default, { dimColor: true, color: "gray" }, " ", "(", parsedLine.file, ":", parsedLine.line, ":", parsedLine.column, ")"));
      })));
    };
    exports2.default = ErrorOverview;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/App.js
var require_App = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/App.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var cli_cursor_1 = __importDefault(require_cli_cursor());
    var AppContext_1 = __importDefault(require_AppContext());
    var StdinContext_1 = __importDefault(require_StdinContext());
    var StdoutContext_1 = __importDefault(require_StdoutContext());
    var StderrContext_1 = __importDefault(require_StderrContext());
    var FocusContext_1 = __importDefault(require_FocusContext());
    var ErrorOverview_1 = __importDefault(require_ErrorOverview());
    var TAB = "	";
    var SHIFT_TAB = "[Z";
    var ESC = "";
    var App = class extends react_1.PureComponent {
      constructor() {
        super(...arguments);
        this.state = {
          isFocusEnabled: true,
          activeFocusId: void 0,
          focusables: [],
          error: void 0
        };
        this.rawModeEnabledCount = 0;
        this.handleSetRawMode = (isEnabled) => {
          const { stdin } = this.props;
          if (!this.isRawModeSupported()) {
            if (stdin === process.stdin) {
              throw new Error("Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
            } else {
              throw new Error("Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
            }
          }
          stdin.setEncoding("utf8");
          if (isEnabled) {
            if (this.rawModeEnabledCount === 0) {
              stdin.addListener("data", this.handleInput);
              stdin.resume();
              stdin.setRawMode(true);
            }
            this.rawModeEnabledCount++;
            return;
          }
          if (--this.rawModeEnabledCount === 0) {
            stdin.setRawMode(false);
            stdin.removeListener("data", this.handleInput);
            stdin.pause();
          }
        };
        this.handleInput = (input) => {
          if (input === "" && this.props.exitOnCtrlC) {
            this.handleExit();
          }
          if (input === ESC && this.state.activeFocusId) {
            this.setState({
              activeFocusId: void 0
            });
          }
          if (this.state.isFocusEnabled && this.state.focusables.length > 0) {
            if (input === TAB) {
              this.focusNext();
            }
            if (input === SHIFT_TAB) {
              this.focusPrevious();
            }
          }
        };
        this.handleExit = (error) => {
          if (this.isRawModeSupported()) {
            this.handleSetRawMode(false);
          }
          this.props.onExit(error);
        };
        this.enableFocus = () => {
          this.setState({
            isFocusEnabled: true
          });
        };
        this.disableFocus = () => {
          this.setState({
            isFocusEnabled: false
          });
        };
        this.focusNext = () => {
          this.setState((previousState) => {
            var _a;
            const firstFocusableId = (_a = previousState.focusables[0]) === null || _a === void 0 ? void 0 : _a.id;
            const nextFocusableId = this.findNextFocusable(previousState);
            return {
              activeFocusId: nextFocusableId || firstFocusableId
            };
          });
        };
        this.focusPrevious = () => {
          this.setState((previousState) => {
            var _a;
            const lastFocusableId = (_a = previousState.focusables[previousState.focusables.length - 1]) === null || _a === void 0 ? void 0 : _a.id;
            const previousFocusableId = this.findPreviousFocusable(previousState);
            return {
              activeFocusId: previousFocusableId || lastFocusableId
            };
          });
        };
        this.addFocusable = (id, { autoFocus }) => {
          this.setState((previousState) => {
            let nextFocusId = previousState.activeFocusId;
            if (!nextFocusId && autoFocus) {
              nextFocusId = id;
            }
            return {
              activeFocusId: nextFocusId,
              focusables: [
                ...previousState.focusables,
                {
                  id,
                  isActive: true
                }
              ]
            };
          });
        };
        this.removeFocusable = (id) => {
          this.setState((previousState) => ({
            activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
            focusables: previousState.focusables.filter((focusable) => {
              return focusable.id !== id;
            })
          }));
        };
        this.activateFocusable = (id) => {
          this.setState((previousState) => ({
            focusables: previousState.focusables.map((focusable) => {
              if (focusable.id !== id) {
                return focusable;
              }
              return {
                id,
                isActive: true
              };
            })
          }));
        };
        this.deactivateFocusable = (id) => {
          this.setState((previousState) => ({
            activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
            focusables: previousState.focusables.map((focusable) => {
              if (focusable.id !== id) {
                return focusable;
              }
              return {
                id,
                isActive: false
              };
            })
          }));
        };
        this.findNextFocusable = (state) => {
          var _a;
          const activeIndex = state.focusables.findIndex((focusable) => {
            return focusable.id === state.activeFocusId;
          });
          for (let index = activeIndex + 1; index < state.focusables.length; index++) {
            if ((_a = state.focusables[index]) === null || _a === void 0 ? void 0 : _a.isActive) {
              return state.focusables[index].id;
            }
          }
          return void 0;
        };
        this.findPreviousFocusable = (state) => {
          var _a;
          const activeIndex = state.focusables.findIndex((focusable) => {
            return focusable.id === state.activeFocusId;
          });
          for (let index = activeIndex - 1; index >= 0; index--) {
            if ((_a = state.focusables[index]) === null || _a === void 0 ? void 0 : _a.isActive) {
              return state.focusables[index].id;
            }
          }
          return void 0;
        };
      }
      static getDerivedStateFromError(error) {
        return { error };
      }
      isRawModeSupported() {
        return this.props.stdin.isTTY;
      }
      render() {
        return react_1.default.createElement(AppContext_1.default.Provider, { value: {
          exit: this.handleExit
        } }, react_1.default.createElement(StdinContext_1.default.Provider, { value: {
          stdin: this.props.stdin,
          setRawMode: this.handleSetRawMode,
          isRawModeSupported: this.isRawModeSupported(),
          internal_exitOnCtrlC: this.props.exitOnCtrlC
        } }, react_1.default.createElement(StdoutContext_1.default.Provider, { value: {
          stdout: this.props.stdout,
          write: this.props.writeToStdout
        } }, react_1.default.createElement(StderrContext_1.default.Provider, { value: {
          stderr: this.props.stderr,
          write: this.props.writeToStderr
        } }, react_1.default.createElement(FocusContext_1.default.Provider, { value: {
          activeId: this.state.activeFocusId,
          add: this.addFocusable,
          remove: this.removeFocusable,
          activate: this.activateFocusable,
          deactivate: this.deactivateFocusable,
          enableFocus: this.enableFocus,
          disableFocus: this.disableFocus,
          focusNext: this.focusNext,
          focusPrevious: this.focusPrevious
        } }, this.state.error ? react_1.default.createElement(ErrorOverview_1.default, { error: this.state.error }) : this.props.children)))));
      }
      componentDidMount() {
        cli_cursor_1.default.hide(this.props.stdout);
      }
      componentWillUnmount() {
        cli_cursor_1.default.show(this.props.stdout);
        if (this.isRawModeSupported()) {
          this.handleSetRawMode(false);
        }
      }
      componentDidCatch(error) {
        this.handleExit(error);
      }
    };
    exports2.default = App;
    App.displayName = "InternalApp";
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/ink.js
var require_ink = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/ink.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var lodash_1 = require_lodash();
    var log_update_1 = __importDefault(require_log_update());
    var ansi_escapes_1 = __importDefault(require_ansi_escapes());
    var is_ci_1 = __importDefault(require_is_ci());
    var auto_bind_1 = __importDefault(require_auto_bind());
    var reconciler_1 = __importDefault(require_reconciler());
    var renderer_1 = __importDefault(require_renderer());
    var signal_exit_1 = __importDefault(require_signal_exit());
    var patch_console_1 = __importDefault(require_build());
    var dom = __importStar(require_dom());
    var instances_1 = __importDefault(require_instances());
    var App_1 = __importDefault(require_App());
    var isCI = process.env.CI === "false" ? false : is_ci_1.default;
    var noop = () => {
    };
    var Ink = class {
      constructor(options) {
        this.resolveExitPromise = () => {
        };
        this.rejectExitPromise = () => {
        };
        this.unsubscribeExit = () => {
        };
        this.onRender = () => {
          if (this.isUnmounted) {
            return;
          }
          const { output, outputHeight, staticOutput } = renderer_1.default(this.rootNode, this.options.stdout.columns || 80);
          const hasStaticOutput = staticOutput && staticOutput !== "\n";
          if (this.options.debug) {
            if (hasStaticOutput) {
              this.fullStaticOutput += staticOutput;
            }
            this.options.stdout.write(this.fullStaticOutput + output);
            return;
          }
          if (isCI) {
            if (hasStaticOutput) {
              this.options.stdout.write(staticOutput);
            }
            this.lastOutput = output;
            return;
          }
          if (hasStaticOutput) {
            this.fullStaticOutput += staticOutput;
          }
          if (outputHeight >= this.options.stdout.rows) {
            this.options.stdout.write(ansi_escapes_1.default.clearTerminal + this.fullStaticOutput + output);
            this.lastOutput = output;
            return;
          }
          if (hasStaticOutput) {
            this.log.clear();
            this.options.stdout.write(staticOutput);
            this.log(output);
          }
          if (!hasStaticOutput && output !== this.lastOutput) {
            this.throttledLog(output);
          }
          this.lastOutput = output;
        };
        auto_bind_1.default(this);
        this.options = options;
        this.rootNode = dom.createNode("ink-root");
        this.rootNode.onRender = options.debug ? this.onRender : lodash_1.throttle(this.onRender, 32, {
          leading: true,
          trailing: true
        });
        this.rootNode.onImmediateRender = this.onRender;
        this.log = log_update_1.default.create(options.stdout);
        this.throttledLog = options.debug ? this.log : lodash_1.throttle(this.log, void 0, {
          leading: true,
          trailing: true
        });
        this.isUnmounted = false;
        this.lastOutput = "";
        this.fullStaticOutput = "";
        this.container = reconciler_1.default.createContainer(this.rootNode, false, false);
        this.unsubscribeExit = signal_exit_1.default(this.unmount, { alwaysLast: false });
        if (process.env.DEV === "true") {
          reconciler_1.default.injectIntoDevTools({
            bundleType: 0,
            version: "16.13.1",
            rendererPackageName: "ink"
          });
        }
        if (options.patchConsole) {
          this.patchConsole();
        }
        if (!isCI) {
          options.stdout.on("resize", this.onRender);
          this.unsubscribeResize = () => {
            options.stdout.off("resize", this.onRender);
          };
        }
      }
      render(node) {
        const tree = react_1.default.createElement(App_1.default, { stdin: this.options.stdin, stdout: this.options.stdout, stderr: this.options.stderr, writeToStdout: this.writeToStdout, writeToStderr: this.writeToStderr, exitOnCtrlC: this.options.exitOnCtrlC, onExit: this.unmount }, node);
        reconciler_1.default.updateContainer(tree, this.container, null, noop);
      }
      writeToStdout(data) {
        if (this.isUnmounted) {
          return;
        }
        if (this.options.debug) {
          this.options.stdout.write(data + this.fullStaticOutput + this.lastOutput);
          return;
        }
        if (isCI) {
          this.options.stdout.write(data);
          return;
        }
        this.log.clear();
        this.options.stdout.write(data);
        this.log(this.lastOutput);
      }
      writeToStderr(data) {
        if (this.isUnmounted) {
          return;
        }
        if (this.options.debug) {
          this.options.stderr.write(data);
          this.options.stdout.write(this.fullStaticOutput + this.lastOutput);
          return;
        }
        if (isCI) {
          this.options.stderr.write(data);
          return;
        }
        this.log.clear();
        this.options.stderr.write(data);
        this.log(this.lastOutput);
      }
      unmount(error) {
        if (this.isUnmounted) {
          return;
        }
        this.onRender();
        this.unsubscribeExit();
        if (typeof this.restoreConsole === "function") {
          this.restoreConsole();
        }
        if (typeof this.unsubscribeResize === "function") {
          this.unsubscribeResize();
        }
        if (isCI) {
          this.options.stdout.write(this.lastOutput + "\n");
        } else if (!this.options.debug) {
          this.log.done();
        }
        this.isUnmounted = true;
        reconciler_1.default.updateContainer(null, this.container, null, noop);
        instances_1.default.delete(this.options.stdout);
        if (error instanceof Error) {
          this.rejectExitPromise(error);
        } else {
          this.resolveExitPromise();
        }
      }
      waitUntilExit() {
        if (!this.exitPromise) {
          this.exitPromise = new Promise((resolve, reject) => {
            this.resolveExitPromise = resolve;
            this.rejectExitPromise = reject;
          });
        }
        return this.exitPromise;
      }
      clear() {
        if (!isCI && !this.options.debug) {
          this.log.clear();
        }
      }
      patchConsole() {
        if (this.options.debug) {
          return;
        }
        this.restoreConsole = patch_console_1.default((stream, data) => {
          if (stream === "stdout") {
            this.writeToStdout(data);
          }
          if (stream === "stderr") {
            const isReactMessage = data.startsWith("The above error occurred");
            if (!isReactMessage) {
              this.writeToStderr(data);
            }
          }
        });
      }
    };
    exports2.default = Ink;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render.js
var require_render = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/render.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ink_1 = __importDefault(require_ink());
    var instances_1 = __importDefault(require_instances());
    var stream_1 = require("stream");
    var render2 = (node, options) => {
      const inkOptions = Object.assign({ stdout: process.stdout, stdin: process.stdin, stderr: process.stderr, debug: false, exitOnCtrlC: true, patchConsole: true }, getOptions(options));
      const instance = getInstance(inkOptions.stdout, () => new ink_1.default(inkOptions));
      instance.render(node);
      return {
        rerender: instance.render,
        unmount: () => instance.unmount(),
        waitUntilExit: instance.waitUntilExit,
        cleanup: () => instances_1.default.delete(inkOptions.stdout),
        clear: instance.clear
      };
    };
    exports2.default = render2;
    var getOptions = (stdout = {}) => {
      if (stdout instanceof stream_1.Stream) {
        return {
          stdout,
          stdin: process.stdin
        };
      }
      return stdout;
    };
    var getInstance = (stdout, createInstance) => {
      let instance;
      if (instances_1.default.has(stdout)) {
        instance = instances_1.default.get(stdout);
      } else {
        instance = createInstance();
        instances_1.default.set(stdout, instance);
      }
      return instance;
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Static.js
var require_Static = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Static.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var Static = (props) => {
      const { items, children: render2, style: customStyle } = props;
      const [index, setIndex] = react_1.useState(0);
      const itemsToRender = react_1.useMemo(() => {
        return items.slice(index);
      }, [items, index]);
      react_1.useLayoutEffect(() => {
        setIndex(items.length);
      }, [items.length]);
      const children = itemsToRender.map((item, itemIndex) => {
        return render2(item, index + itemIndex);
      });
      const style = react_1.useMemo(() => Object.assign({ position: "absolute", flexDirection: "column" }, customStyle), [customStyle]);
      return react_1.default.createElement("ink-box", {
        internal_static: true,
        style
      }, children);
    };
    Static.displayName = "Static";
    exports2.default = Static;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Transform.js
var require_Transform = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Transform.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Transform = ({ children, transform }) => {
      if (children === void 0 || children === null) {
        return null;
      }
      return react_1.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: "row" }, internal_transform: transform }, children);
    };
    Transform.displayName = "Transform";
    exports2.default = Transform;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Newline.js
var require_Newline = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Newline.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Newline = ({ count = 1 }) => react_1.default.createElement("ink-text", null, "\n".repeat(count));
    Newline.displayName = "Newline";
    exports2.default = Newline;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Spacer.js
var require_Spacer = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/components/Spacer.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var Box_1 = __importDefault(require_Box());
    var Spacer = () => react_1.default.createElement(Box_1.default, { flexGrow: 1 });
    Spacer.displayName = "Spacer";
    exports2.default = Spacer;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stdin.js
var require_use_stdin = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stdin.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdinContext_1 = __importDefault(require_StdinContext());
    var useStdin = () => react_1.useContext(StdinContext_1.default);
    exports2.default = useStdin;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-input.js
var require_use_input = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-input.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var use_stdin_1 = __importDefault(require_use_stdin());
    var useInput = (inputHandler, options = {}) => {
      const { stdin, setRawMode, internal_exitOnCtrlC } = use_stdin_1.default();
      react_1.useEffect(() => {
        if (options.isActive === false) {
          return;
        }
        setRawMode(true);
        return () => {
          setRawMode(false);
        };
      }, [options.isActive, setRawMode]);
      react_1.useEffect(() => {
        if (options.isActive === false) {
          return;
        }
        const handleData = (data) => {
          let input = String(data);
          const key = {
            upArrow: input === "[A",
            downArrow: input === "[B",
            leftArrow: input === "[D",
            rightArrow: input === "[C",
            pageDown: input === "[6~",
            pageUp: input === "[5~",
            return: input === "\r",
            escape: input === "",
            ctrl: false,
            shift: false,
            tab: input === "	" || input === "[Z",
            backspace: input === "\b",
            delete: input === "\x7F" || input === "[3~",
            meta: false
          };
          if (input <= "" && !key.return) {
            input = String.fromCharCode(input.charCodeAt(0) + "a".charCodeAt(0) - 1);
            key.ctrl = true;
          }
          if (input.startsWith("")) {
            input = input.slice(1);
            key.meta = true;
          }
          const isLatinUppercase = input >= "A" && input <= "Z";
          const isCyrillicUppercase = input >= "\u0410" && input <= "\u042F";
          if (input.length === 1 && (isLatinUppercase || isCyrillicUppercase)) {
            key.shift = true;
          }
          if (key.tab && input === "[Z") {
            key.shift = true;
          }
          if (key.tab || key.backspace || key.delete) {
            input = "";
          }
          if (!(input === "c" && key.ctrl) || !internal_exitOnCtrlC) {
            inputHandler(input, key);
          }
        };
        stdin === null || stdin === void 0 ? void 0 : stdin.on("data", handleData);
        return () => {
          stdin === null || stdin === void 0 ? void 0 : stdin.off("data", handleData);
        };
      }, [options.isActive, stdin, internal_exitOnCtrlC, inputHandler]);
    };
    exports2.default = useInput;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-app.js
var require_use_app = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-app.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var AppContext_1 = __importDefault(require_AppContext());
    var useApp = () => react_1.useContext(AppContext_1.default);
    exports2.default = useApp;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stdout.js
var require_use_stdout = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stdout.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StdoutContext_1 = __importDefault(require_StdoutContext());
    var useStdout = () => react_1.useContext(StdoutContext_1.default);
    exports2.default = useStdout;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stderr.js
var require_use_stderr = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-stderr.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var StderrContext_1 = __importDefault(require_StderrContext());
    var useStderr = () => react_1.useContext(StderrContext_1.default);
    exports2.default = useStderr;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-focus.js
var require_use_focus = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-focus.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext_1 = __importDefault(require_FocusContext());
    var use_stdin_1 = __importDefault(require_use_stdin());
    var useFocus = ({ isActive = true, autoFocus = false } = {}) => {
      const { isRawModeSupported, setRawMode } = use_stdin_1.default();
      const { activeId, add, remove, activate, deactivate } = react_1.useContext(FocusContext_1.default);
      const id = react_1.useMemo(() => Math.random().toString().slice(2, 7), []);
      react_1.useEffect(() => {
        add(id, { autoFocus });
        return () => {
          remove(id);
        };
      }, [id, autoFocus]);
      react_1.useEffect(() => {
        if (isActive) {
          activate(id);
        } else {
          deactivate(id);
        }
      }, [isActive, id]);
      react_1.useEffect(() => {
        if (!isRawModeSupported || !isActive) {
          return;
        }
        setRawMode(true);
        return () => {
          setRawMode(false);
        };
      }, [isActive]);
      return {
        isFocused: Boolean(id) && activeId === id
      };
    };
    exports2.default = useFocus;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-focus-manager.js
var require_use_focus_manager = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/hooks/use-focus-manager.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var react_1 = require_react();
    var FocusContext_1 = __importDefault(require_FocusContext());
    var useFocusManager = () => {
      const focusContext = react_1.useContext(FocusContext_1.default);
      return {
        enableFocus: focusContext.enableFocus,
        disableFocus: focusContext.disableFocus,
        focusNext: focusContext.focusNext,
        focusPrevious: focusContext.focusPrevious
      };
    };
    exports2.default = useFocusManager;
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/measure-element.js
var require_measure_element = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/measure-element.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = (node) => {
      var _a, _b, _c, _d;
      return {
        width: (_b = (_a = node.yogaNode) === null || _a === void 0 ? void 0 : _a.getComputedWidth()) !== null && _b !== void 0 ? _b : 0,
        height: (_d = (_c = node.yogaNode) === null || _c === void 0 ? void 0 : _c.getComputedHeight()) !== null && _d !== void 0 ? _d : 0
      };
    };
  }
});

// node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/index.js
var require_build2 = __commonJS({
  "node_modules/.pnpm/ink@3.0.9_4cd822c6044f4c1a7e1f1fea0e728f12/node_modules/ink/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var render_1 = require_render();
    Object.defineProperty(exports2, "render", { enumerable: true, get: function() {
      return render_1.default;
    } });
    var Box_1 = require_Box();
    Object.defineProperty(exports2, "Box", { enumerable: true, get: function() {
      return Box_1.default;
    } });
    var Text_1 = require_Text();
    Object.defineProperty(exports2, "Text", { enumerable: true, get: function() {
      return Text_1.default;
    } });
    var Static_1 = require_Static();
    Object.defineProperty(exports2, "Static", { enumerable: true, get: function() {
      return Static_1.default;
    } });
    var Transform_1 = require_Transform();
    Object.defineProperty(exports2, "Transform", { enumerable: true, get: function() {
      return Transform_1.default;
    } });
    var Newline_1 = require_Newline();
    Object.defineProperty(exports2, "Newline", { enumerable: true, get: function() {
      return Newline_1.default;
    } });
    var Spacer_1 = require_Spacer();
    Object.defineProperty(exports2, "Spacer", { enumerable: true, get: function() {
      return Spacer_1.default;
    } });
    var use_input_1 = require_use_input();
    Object.defineProperty(exports2, "useInput", { enumerable: true, get: function() {
      return use_input_1.default;
    } });
    var use_app_1 = require_use_app();
    Object.defineProperty(exports2, "useApp", { enumerable: true, get: function() {
      return use_app_1.default;
    } });
    var use_stdin_1 = require_use_stdin();
    Object.defineProperty(exports2, "useStdin", { enumerable: true, get: function() {
      return use_stdin_1.default;
    } });
    var use_stdout_1 = require_use_stdout();
    Object.defineProperty(exports2, "useStdout", { enumerable: true, get: function() {
      return use_stdout_1.default;
    } });
    var use_stderr_1 = require_use_stderr();
    Object.defineProperty(exports2, "useStderr", { enumerable: true, get: function() {
      return use_stderr_1.default;
    } });
    var use_focus_1 = require_use_focus();
    Object.defineProperty(exports2, "useFocus", { enumerable: true, get: function() {
      return use_focus_1.default;
    } });
    var use_focus_manager_1 = require_use_focus_manager();
    Object.defineProperty(exports2, "useFocusManager", { enumerable: true, get: function() {
      return use_focus_manager_1.default;
    } });
    var measure_element_1 = require_measure_element();
    Object.defineProperty(exports2, "measureElement", { enumerable: true, get: function() {
      return measure_element_1.default;
    } });
  }
});

// node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.production.min.js"(exports2) {
    "use strict";
    var b2 = typeof Symbol === "function" && Symbol.for;
    var c2 = b2 ? Symbol.for("react.element") : 60103;
    var d = b2 ? Symbol.for("react.portal") : 60106;
    var e2 = b2 ? Symbol.for("react.fragment") : 60107;
    var f = b2 ? Symbol.for("react.strict_mode") : 60108;
    var g2 = b2 ? Symbol.for("react.profiler") : 60114;
    var h = b2 ? Symbol.for("react.provider") : 60109;
    var k = b2 ? Symbol.for("react.context") : 60110;
    var l2 = b2 ? Symbol.for("react.async_mode") : 60111;
    var m = b2 ? Symbol.for("react.concurrent_mode") : 60111;
    var n2 = b2 ? Symbol.for("react.forward_ref") : 60112;
    var p = b2 ? Symbol.for("react.suspense") : 60113;
    var q = b2 ? Symbol.for("react.suspense_list") : 60120;
    var r2 = b2 ? Symbol.for("react.memo") : 60115;
    var t2 = b2 ? Symbol.for("react.lazy") : 60116;
    var v = b2 ? Symbol.for("react.block") : 60121;
    var w = b2 ? Symbol.for("react.fundamental") : 60117;
    var x = b2 ? Symbol.for("react.responder") : 60118;
    var y2 = b2 ? Symbol.for("react.scope") : 60119;
    function z(a2) {
      if (typeof a2 === "object" && a2 !== null) {
        var u2 = a2.$$typeof;
        switch (u2) {
          case c2:
            switch (a2 = a2.type, a2) {
              case l2:
              case m:
              case e2:
              case g2:
              case f:
              case p:
                return a2;
              default:
                switch (a2 = a2 && a2.$$typeof, a2) {
                  case k:
                  case n2:
                  case t2:
                  case r2:
                  case h:
                    return a2;
                  default:
                    return u2;
                }
            }
          case d:
            return u2;
        }
      }
    }
    function A(a2) {
      return z(a2) === m;
    }
    exports2.AsyncMode = l2;
    exports2.ConcurrentMode = m;
    exports2.ContextConsumer = k;
    exports2.ContextProvider = h;
    exports2.Element = c2;
    exports2.ForwardRef = n2;
    exports2.Fragment = e2;
    exports2.Lazy = t2;
    exports2.Memo = r2;
    exports2.Portal = d;
    exports2.Profiler = g2;
    exports2.StrictMode = f;
    exports2.Suspense = p;
    exports2.isAsyncMode = function(a2) {
      return A(a2) || z(a2) === l2;
    };
    exports2.isConcurrentMode = A;
    exports2.isContextConsumer = function(a2) {
      return z(a2) === k;
    };
    exports2.isContextProvider = function(a2) {
      return z(a2) === h;
    };
    exports2.isElement = function(a2) {
      return typeof a2 === "object" && a2 !== null && a2.$$typeof === c2;
    };
    exports2.isForwardRef = function(a2) {
      return z(a2) === n2;
    };
    exports2.isFragment = function(a2) {
      return z(a2) === e2;
    };
    exports2.isLazy = function(a2) {
      return z(a2) === t2;
    };
    exports2.isMemo = function(a2) {
      return z(a2) === r2;
    };
    exports2.isPortal = function(a2) {
      return z(a2) === d;
    };
    exports2.isProfiler = function(a2) {
      return z(a2) === g2;
    };
    exports2.isStrictMode = function(a2) {
      return z(a2) === f;
    };
    exports2.isSuspense = function(a2) {
      return z(a2) === p;
    };
    exports2.isValidElementType = function(a2) {
      return typeof a2 === "string" || typeof a2 === "function" || a2 === e2 || a2 === m || a2 === g2 || a2 === f || a2 === p || a2 === q || typeof a2 === "object" && a2 !== null && (a2.$$typeof === t2 || a2.$$typeof === r2 || a2.$$typeof === h || a2.$$typeof === k || a2.$$typeof === n2 || a2.$$typeof === w || a2.$$typeof === x || a2.$$typeof === y2 || a2.$$typeof === v);
    };
    exports2.typeOf = z;
  }
});

// node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_is_production_min();
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var checkPropTypes = require_checkPropTypes();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y2) {
        if (x === y2) {
          return x !== 0 || 1 / x === 1 / y2;
        } else {
          return x !== x && y2 !== y2;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== "production") {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== "production") {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/factoryWithThrowingShims.js
var require_factoryWithThrowingShims = __commonJS({
  "node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/factoryWithThrowingShims.js"(exports2, module2) {
    "use strict";
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    module2.exports = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/index.js"(exports2, module2) {
    if (process.env.NODE_ENV !== "production") {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = require_factoryWithThrowingShims()();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/TaskList.js
var require_TaskList = __commonJS({
  "node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/TaskList.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var react_1 = __importDefault(require_react());
    var ink_1 = require_build2();
    var prop_types_1 = __importDefault(require_prop_types());
    var TaskList2 = ({ children }) => react_1.default.createElement(ink_1.Box, { flexDirection: "column" }, children);
    TaskList2.propTypes = {
      children: prop_types_1.default.oneOfType([
        prop_types_1.default.arrayOf(prop_types_1.default.node),
        prop_types_1.default.node
      ]).isRequired
    };
    module2.exports = TaskList2;
  }
});

// node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp2 = __commonJS({
  "node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    module2.exports = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
  }
});

// node_modules/.pnpm/figures@3.2.0/node_modules/figures/index.js
var require_figures = __commonJS({
  "node_modules/.pnpm/figures@3.2.0/node_modules/figures/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp2 = require_escape_string_regexp2();
    var { platform } = process;
    var main = {
      tick: "\u2714",
      cross: "\u2716",
      star: "\u2605",
      square: "\u2587",
      squareSmall: "\u25FB",
      squareSmallFilled: "\u25FC",
      play: "\u25B6",
      circle: "\u25EF",
      circleFilled: "\u25C9",
      circleDotted: "\u25CC",
      circleDouble: "\u25CE",
      circleCircle: "\u24DE",
      circleCross: "\u24E7",
      circlePipe: "\u24BE",
      circleQuestionMark: "?\u20DD",
      bullet: "\u25CF",
      dot: "\u2024",
      line: "\u2500",
      ellipsis: "\u2026",
      pointer: "\u276F",
      pointerSmall: "\u203A",
      info: "\u2139",
      warning: "\u26A0",
      hamburger: "\u2630",
      smiley: "\u32E1",
      mustache: "\u0DF4",
      heart: "\u2665",
      nodejs: "\u2B22",
      arrowUp: "\u2191",
      arrowDown: "\u2193",
      arrowLeft: "\u2190",
      arrowRight: "\u2192",
      radioOn: "\u25C9",
      radioOff: "\u25EF",
      checkboxOn: "\u2612",
      checkboxOff: "\u2610",
      checkboxCircleOn: "\u24E7",
      checkboxCircleOff: "\u24BE",
      questionMarkPrefix: "?\u20DD",
      oneHalf: "\xBD",
      oneThird: "\u2153",
      oneQuarter: "\xBC",
      oneFifth: "\u2155",
      oneSixth: "\u2159",
      oneSeventh: "\u2150",
      oneEighth: "\u215B",
      oneNinth: "\u2151",
      oneTenth: "\u2152",
      twoThirds: "\u2154",
      twoFifths: "\u2156",
      threeQuarters: "\xBE",
      threeFifths: "\u2157",
      threeEighths: "\u215C",
      fourFifths: "\u2158",
      fiveSixths: "\u215A",
      fiveEighths: "\u215D",
      sevenEighths: "\u215E"
    };
    var windows = {
      tick: "\u221A",
      cross: "\xD7",
      star: "*",
      square: "\u2588",
      squareSmall: "[ ]",
      squareSmallFilled: "[\u2588]",
      play: "\u25BA",
      circle: "( )",
      circleFilled: "(*)",
      circleDotted: "( )",
      circleDouble: "( )",
      circleCircle: "(\u25CB)",
      circleCross: "(\xD7)",
      circlePipe: "(\u2502)",
      circleQuestionMark: "(?)",
      bullet: "*",
      dot: ".",
      line: "\u2500",
      ellipsis: "...",
      pointer: ">",
      pointerSmall: "\xBB",
      info: "i",
      warning: "\u203C",
      hamburger: "\u2261",
      smiley: "\u263A",
      mustache: "\u250C\u2500\u2510",
      heart: main.heart,
      nodejs: "\u2666",
      arrowUp: main.arrowUp,
      arrowDown: main.arrowDown,
      arrowLeft: main.arrowLeft,
      arrowRight: main.arrowRight,
      radioOn: "(*)",
      radioOff: "( )",
      checkboxOn: "[\xD7]",
      checkboxOff: "[ ]",
      checkboxCircleOn: "(\xD7)",
      checkboxCircleOff: "( )",
      questionMarkPrefix: "\uFF1F",
      oneHalf: "1/2",
      oneThird: "1/3",
      oneQuarter: "1/4",
      oneFifth: "1/5",
      oneSixth: "1/6",
      oneSeventh: "1/7",
      oneEighth: "1/8",
      oneNinth: "1/9",
      oneTenth: "1/10",
      twoThirds: "2/3",
      twoFifths: "2/5",
      threeQuarters: "3/4",
      threeFifths: "3/5",
      threeEighths: "3/8",
      fourFifths: "4/5",
      fiveSixths: "5/6",
      fiveEighths: "5/8",
      sevenEighths: "7/8"
    };
    if (platform === "linux") {
      main.questionMarkPrefix = "?";
    }
    var figures = platform === "win32" ? windows : main;
    var fn = (string) => {
      if (figures === main) {
        return string;
      }
      for (const [key, value] of Object.entries(main)) {
        if (value === figures[key]) {
          continue;
        }
        string = string.replace(new RegExp(escapeStringRegexp2(value), "g"), figures[key]);
      }
      return string;
    };
    module2.exports = Object.assign(fn, figures);
    module2.exports.main = main;
    module2.exports.windows = windows;
  }
});

// node_modules/.pnpm/cli-spinners@2.6.0/node_modules/cli-spinners/spinners.json
var require_spinners = __commonJS({
  "node_modules/.pnpm/cli-spinners@2.6.0/node_modules/cli-spinners/spinners.json"(exports2, module2) {
    module2.exports = {
      dots: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u2839",
          "\u2838",
          "\u283C",
          "\u2834",
          "\u2826",
          "\u2827",
          "\u2807",
          "\u280F"
        ]
      },
      dots2: {
        interval: 80,
        frames: [
          "\u28FE",
          "\u28FD",
          "\u28FB",
          "\u28BF",
          "\u287F",
          "\u28DF",
          "\u28EF",
          "\u28F7"
        ]
      },
      dots3: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u281A",
          "\u281E",
          "\u2816",
          "\u2826",
          "\u2834",
          "\u2832",
          "\u2833",
          "\u2813"
        ]
      },
      dots4: {
        interval: 80,
        frames: [
          "\u2804",
          "\u2806",
          "\u2807",
          "\u280B",
          "\u2819",
          "\u2838",
          "\u2830",
          "\u2820",
          "\u2830",
          "\u2838",
          "\u2819",
          "\u280B",
          "\u2807",
          "\u2806"
        ]
      },
      dots5: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B"
        ]
      },
      dots6: {
        interval: 80,
        frames: [
          "\u2801",
          "\u2809",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2824",
          "\u2804",
          "\u2804",
          "\u2824",
          "\u2834",
          "\u2832",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u281A",
          "\u2819",
          "\u2809",
          "\u2801"
        ]
      },
      dots7: {
        interval: 80,
        frames: [
          "\u2808",
          "\u2809",
          "\u280B",
          "\u2813",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2816",
          "\u2826",
          "\u2824",
          "\u2820",
          "\u2820",
          "\u2824",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B",
          "\u2809",
          "\u2808"
        ]
      },
      dots8: {
        interval: 80,
        frames: [
          "\u2801",
          "\u2801",
          "\u2809",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2824",
          "\u2804",
          "\u2804",
          "\u2824",
          "\u2820",
          "\u2820",
          "\u2824",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B",
          "\u2809",
          "\u2808",
          "\u2808"
        ]
      },
      dots9: {
        interval: 80,
        frames: [
          "\u28B9",
          "\u28BA",
          "\u28BC",
          "\u28F8",
          "\u28C7",
          "\u2867",
          "\u2857",
          "\u284F"
        ]
      },
      dots10: {
        interval: 80,
        frames: [
          "\u2884",
          "\u2882",
          "\u2881",
          "\u2841",
          "\u2848",
          "\u2850",
          "\u2860"
        ]
      },
      dots11: {
        interval: 100,
        frames: [
          "\u2801",
          "\u2802",
          "\u2804",
          "\u2840",
          "\u2880",
          "\u2820",
          "\u2810",
          "\u2808"
        ]
      },
      dots12: {
        interval: 80,
        frames: [
          "\u2880\u2800",
          "\u2840\u2800",
          "\u2804\u2800",
          "\u2882\u2800",
          "\u2842\u2800",
          "\u2805\u2800",
          "\u2883\u2800",
          "\u2843\u2800",
          "\u280D\u2800",
          "\u288B\u2800",
          "\u284B\u2800",
          "\u280D\u2801",
          "\u288B\u2801",
          "\u284B\u2801",
          "\u280D\u2809",
          "\u280B\u2809",
          "\u280B\u2809",
          "\u2809\u2819",
          "\u2809\u2819",
          "\u2809\u2829",
          "\u2808\u2899",
          "\u2808\u2859",
          "\u2888\u2829",
          "\u2840\u2899",
          "\u2804\u2859",
          "\u2882\u2829",
          "\u2842\u2898",
          "\u2805\u2858",
          "\u2883\u2828",
          "\u2843\u2890",
          "\u280D\u2850",
          "\u288B\u2820",
          "\u284B\u2880",
          "\u280D\u2841",
          "\u288B\u2801",
          "\u284B\u2801",
          "\u280D\u2809",
          "\u280B\u2809",
          "\u280B\u2809",
          "\u2809\u2819",
          "\u2809\u2819",
          "\u2809\u2829",
          "\u2808\u2899",
          "\u2808\u2859",
          "\u2808\u2829",
          "\u2800\u2899",
          "\u2800\u2859",
          "\u2800\u2829",
          "\u2800\u2898",
          "\u2800\u2858",
          "\u2800\u2828",
          "\u2800\u2890",
          "\u2800\u2850",
          "\u2800\u2820",
          "\u2800\u2880",
          "\u2800\u2840"
        ]
      },
      dots8Bit: {
        interval: 80,
        frames: [
          "\u2800",
          "\u2801",
          "\u2802",
          "\u2803",
          "\u2804",
          "\u2805",
          "\u2806",
          "\u2807",
          "\u2840",
          "\u2841",
          "\u2842",
          "\u2843",
          "\u2844",
          "\u2845",
          "\u2846",
          "\u2847",
          "\u2808",
          "\u2809",
          "\u280A",
          "\u280B",
          "\u280C",
          "\u280D",
          "\u280E",
          "\u280F",
          "\u2848",
          "\u2849",
          "\u284A",
          "\u284B",
          "\u284C",
          "\u284D",
          "\u284E",
          "\u284F",
          "\u2810",
          "\u2811",
          "\u2812",
          "\u2813",
          "\u2814",
          "\u2815",
          "\u2816",
          "\u2817",
          "\u2850",
          "\u2851",
          "\u2852",
          "\u2853",
          "\u2854",
          "\u2855",
          "\u2856",
          "\u2857",
          "\u2818",
          "\u2819",
          "\u281A",
          "\u281B",
          "\u281C",
          "\u281D",
          "\u281E",
          "\u281F",
          "\u2858",
          "\u2859",
          "\u285A",
          "\u285B",
          "\u285C",
          "\u285D",
          "\u285E",
          "\u285F",
          "\u2820",
          "\u2821",
          "\u2822",
          "\u2823",
          "\u2824",
          "\u2825",
          "\u2826",
          "\u2827",
          "\u2860",
          "\u2861",
          "\u2862",
          "\u2863",
          "\u2864",
          "\u2865",
          "\u2866",
          "\u2867",
          "\u2828",
          "\u2829",
          "\u282A",
          "\u282B",
          "\u282C",
          "\u282D",
          "\u282E",
          "\u282F",
          "\u2868",
          "\u2869",
          "\u286A",
          "\u286B",
          "\u286C",
          "\u286D",
          "\u286E",
          "\u286F",
          "\u2830",
          "\u2831",
          "\u2832",
          "\u2833",
          "\u2834",
          "\u2835",
          "\u2836",
          "\u2837",
          "\u2870",
          "\u2871",
          "\u2872",
          "\u2873",
          "\u2874",
          "\u2875",
          "\u2876",
          "\u2877",
          "\u2838",
          "\u2839",
          "\u283A",
          "\u283B",
          "\u283C",
          "\u283D",
          "\u283E",
          "\u283F",
          "\u2878",
          "\u2879",
          "\u287A",
          "\u287B",
          "\u287C",
          "\u287D",
          "\u287E",
          "\u287F",
          "\u2880",
          "\u2881",
          "\u2882",
          "\u2883",
          "\u2884",
          "\u2885",
          "\u2886",
          "\u2887",
          "\u28C0",
          "\u28C1",
          "\u28C2",
          "\u28C3",
          "\u28C4",
          "\u28C5",
          "\u28C6",
          "\u28C7",
          "\u2888",
          "\u2889",
          "\u288A",
          "\u288B",
          "\u288C",
          "\u288D",
          "\u288E",
          "\u288F",
          "\u28C8",
          "\u28C9",
          "\u28CA",
          "\u28CB",
          "\u28CC",
          "\u28CD",
          "\u28CE",
          "\u28CF",
          "\u2890",
          "\u2891",
          "\u2892",
          "\u2893",
          "\u2894",
          "\u2895",
          "\u2896",
          "\u2897",
          "\u28D0",
          "\u28D1",
          "\u28D2",
          "\u28D3",
          "\u28D4",
          "\u28D5",
          "\u28D6",
          "\u28D7",
          "\u2898",
          "\u2899",
          "\u289A",
          "\u289B",
          "\u289C",
          "\u289D",
          "\u289E",
          "\u289F",
          "\u28D8",
          "\u28D9",
          "\u28DA",
          "\u28DB",
          "\u28DC",
          "\u28DD",
          "\u28DE",
          "\u28DF",
          "\u28A0",
          "\u28A1",
          "\u28A2",
          "\u28A3",
          "\u28A4",
          "\u28A5",
          "\u28A6",
          "\u28A7",
          "\u28E0",
          "\u28E1",
          "\u28E2",
          "\u28E3",
          "\u28E4",
          "\u28E5",
          "\u28E6",
          "\u28E7",
          "\u28A8",
          "\u28A9",
          "\u28AA",
          "\u28AB",
          "\u28AC",
          "\u28AD",
          "\u28AE",
          "\u28AF",
          "\u28E8",
          "\u28E9",
          "\u28EA",
          "\u28EB",
          "\u28EC",
          "\u28ED",
          "\u28EE",
          "\u28EF",
          "\u28B0",
          "\u28B1",
          "\u28B2",
          "\u28B3",
          "\u28B4",
          "\u28B5",
          "\u28B6",
          "\u28B7",
          "\u28F0",
          "\u28F1",
          "\u28F2",
          "\u28F3",
          "\u28F4",
          "\u28F5",
          "\u28F6",
          "\u28F7",
          "\u28B8",
          "\u28B9",
          "\u28BA",
          "\u28BB",
          "\u28BC",
          "\u28BD",
          "\u28BE",
          "\u28BF",
          "\u28F8",
          "\u28F9",
          "\u28FA",
          "\u28FB",
          "\u28FC",
          "\u28FD",
          "\u28FE",
          "\u28FF"
        ]
      },
      line: {
        interval: 130,
        frames: [
          "-",
          "\\",
          "|",
          "/"
        ]
      },
      line2: {
        interval: 100,
        frames: [
          "\u2802",
          "-",
          "\u2013",
          "\u2014",
          "\u2013",
          "-"
        ]
      },
      pipe: {
        interval: 100,
        frames: [
          "\u2524",
          "\u2518",
          "\u2534",
          "\u2514",
          "\u251C",
          "\u250C",
          "\u252C",
          "\u2510"
        ]
      },
      simpleDots: {
        interval: 400,
        frames: [
          ".  ",
          ".. ",
          "...",
          "   "
        ]
      },
      simpleDotsScrolling: {
        interval: 200,
        frames: [
          ".  ",
          ".. ",
          "...",
          " ..",
          "  .",
          "   "
        ]
      },
      star: {
        interval: 70,
        frames: [
          "\u2736",
          "\u2738",
          "\u2739",
          "\u273A",
          "\u2739",
          "\u2737"
        ]
      },
      star2: {
        interval: 80,
        frames: [
          "+",
          "x",
          "*"
        ]
      },
      flip: {
        interval: 70,
        frames: [
          "_",
          "_",
          "_",
          "-",
          "`",
          "`",
          "'",
          "\xB4",
          "-",
          "_",
          "_",
          "_"
        ]
      },
      hamburger: {
        interval: 100,
        frames: [
          "\u2631",
          "\u2632",
          "\u2634"
        ]
      },
      growVertical: {
        interval: 120,
        frames: [
          "\u2581",
          "\u2583",
          "\u2584",
          "\u2585",
          "\u2586",
          "\u2587",
          "\u2586",
          "\u2585",
          "\u2584",
          "\u2583"
        ]
      },
      growHorizontal: {
        interval: 120,
        frames: [
          "\u258F",
          "\u258E",
          "\u258D",
          "\u258C",
          "\u258B",
          "\u258A",
          "\u2589",
          "\u258A",
          "\u258B",
          "\u258C",
          "\u258D",
          "\u258E"
        ]
      },
      balloon: {
        interval: 140,
        frames: [
          " ",
          ".",
          "o",
          "O",
          "@",
          "*",
          " "
        ]
      },
      balloon2: {
        interval: 120,
        frames: [
          ".",
          "o",
          "O",
          "\xB0",
          "O",
          "o",
          "."
        ]
      },
      noise: {
        interval: 100,
        frames: [
          "\u2593",
          "\u2592",
          "\u2591"
        ]
      },
      bounce: {
        interval: 120,
        frames: [
          "\u2801",
          "\u2802",
          "\u2804",
          "\u2802"
        ]
      },
      boxBounce: {
        interval: 120,
        frames: [
          "\u2596",
          "\u2598",
          "\u259D",
          "\u2597"
        ]
      },
      boxBounce2: {
        interval: 100,
        frames: [
          "\u258C",
          "\u2580",
          "\u2590",
          "\u2584"
        ]
      },
      triangle: {
        interval: 50,
        frames: [
          "\u25E2",
          "\u25E3",
          "\u25E4",
          "\u25E5"
        ]
      },
      arc: {
        interval: 100,
        frames: [
          "\u25DC",
          "\u25E0",
          "\u25DD",
          "\u25DE",
          "\u25E1",
          "\u25DF"
        ]
      },
      circle: {
        interval: 120,
        frames: [
          "\u25E1",
          "\u2299",
          "\u25E0"
        ]
      },
      squareCorners: {
        interval: 180,
        frames: [
          "\u25F0",
          "\u25F3",
          "\u25F2",
          "\u25F1"
        ]
      },
      circleQuarters: {
        interval: 120,
        frames: [
          "\u25F4",
          "\u25F7",
          "\u25F6",
          "\u25F5"
        ]
      },
      circleHalves: {
        interval: 50,
        frames: [
          "\u25D0",
          "\u25D3",
          "\u25D1",
          "\u25D2"
        ]
      },
      squish: {
        interval: 100,
        frames: [
          "\u256B",
          "\u256A"
        ]
      },
      toggle: {
        interval: 250,
        frames: [
          "\u22B6",
          "\u22B7"
        ]
      },
      toggle2: {
        interval: 80,
        frames: [
          "\u25AB",
          "\u25AA"
        ]
      },
      toggle3: {
        interval: 120,
        frames: [
          "\u25A1",
          "\u25A0"
        ]
      },
      toggle4: {
        interval: 100,
        frames: [
          "\u25A0",
          "\u25A1",
          "\u25AA",
          "\u25AB"
        ]
      },
      toggle5: {
        interval: 100,
        frames: [
          "\u25AE",
          "\u25AF"
        ]
      },
      toggle6: {
        interval: 300,
        frames: [
          "\u101D",
          "\u1040"
        ]
      },
      toggle7: {
        interval: 80,
        frames: [
          "\u29BE",
          "\u29BF"
        ]
      },
      toggle8: {
        interval: 100,
        frames: [
          "\u25CD",
          "\u25CC"
        ]
      },
      toggle9: {
        interval: 100,
        frames: [
          "\u25C9",
          "\u25CE"
        ]
      },
      toggle10: {
        interval: 100,
        frames: [
          "\u3282",
          "\u3280",
          "\u3281"
        ]
      },
      toggle11: {
        interval: 50,
        frames: [
          "\u29C7",
          "\u29C6"
        ]
      },
      toggle12: {
        interval: 120,
        frames: [
          "\u2617",
          "\u2616"
        ]
      },
      toggle13: {
        interval: 80,
        frames: [
          "=",
          "*",
          "-"
        ]
      },
      arrow: {
        interval: 100,
        frames: [
          "\u2190",
          "\u2196",
          "\u2191",
          "\u2197",
          "\u2192",
          "\u2198",
          "\u2193",
          "\u2199"
        ]
      },
      arrow2: {
        interval: 80,
        frames: [
          "\u2B06\uFE0F ",
          "\u2197\uFE0F ",
          "\u27A1\uFE0F ",
          "\u2198\uFE0F ",
          "\u2B07\uFE0F ",
          "\u2199\uFE0F ",
          "\u2B05\uFE0F ",
          "\u2196\uFE0F "
        ]
      },
      arrow3: {
        interval: 120,
        frames: [
          "\u25B9\u25B9\u25B9\u25B9\u25B9",
          "\u25B8\u25B9\u25B9\u25B9\u25B9",
          "\u25B9\u25B8\u25B9\u25B9\u25B9",
          "\u25B9\u25B9\u25B8\u25B9\u25B9",
          "\u25B9\u25B9\u25B9\u25B8\u25B9",
          "\u25B9\u25B9\u25B9\u25B9\u25B8"
        ]
      },
      bouncingBar: {
        interval: 80,
        frames: [
          "[    ]",
          "[=   ]",
          "[==  ]",
          "[=== ]",
          "[ ===]",
          "[  ==]",
          "[   =]",
          "[    ]",
          "[   =]",
          "[  ==]",
          "[ ===]",
          "[====]",
          "[=== ]",
          "[==  ]",
          "[=   ]"
        ]
      },
      bouncingBall: {
        interval: 80,
        frames: [
          "( \u25CF    )",
          "(  \u25CF   )",
          "(   \u25CF  )",
          "(    \u25CF )",
          "(     \u25CF)",
          "(    \u25CF )",
          "(   \u25CF  )",
          "(  \u25CF   )",
          "( \u25CF    )",
          "(\u25CF     )"
        ]
      },
      smiley: {
        interval: 200,
        frames: [
          "\u{1F604} ",
          "\u{1F61D} "
        ]
      },
      monkey: {
        interval: 300,
        frames: [
          "\u{1F648} ",
          "\u{1F648} ",
          "\u{1F649} ",
          "\u{1F64A} "
        ]
      },
      hearts: {
        interval: 100,
        frames: [
          "\u{1F49B} ",
          "\u{1F499} ",
          "\u{1F49C} ",
          "\u{1F49A} ",
          "\u2764\uFE0F "
        ]
      },
      clock: {
        interval: 100,
        frames: [
          "\u{1F55B} ",
          "\u{1F550} ",
          "\u{1F551} ",
          "\u{1F552} ",
          "\u{1F553} ",
          "\u{1F554} ",
          "\u{1F555} ",
          "\u{1F556} ",
          "\u{1F557} ",
          "\u{1F558} ",
          "\u{1F559} ",
          "\u{1F55A} "
        ]
      },
      earth: {
        interval: 180,
        frames: [
          "\u{1F30D} ",
          "\u{1F30E} ",
          "\u{1F30F} "
        ]
      },
      material: {
        interval: 17,
        frames: [
          "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581"
        ]
      },
      moon: {
        interval: 80,
        frames: [
          "\u{1F311} ",
          "\u{1F312} ",
          "\u{1F313} ",
          "\u{1F314} ",
          "\u{1F315} ",
          "\u{1F316} ",
          "\u{1F317} ",
          "\u{1F318} "
        ]
      },
      runner: {
        interval: 140,
        frames: [
          "\u{1F6B6} ",
          "\u{1F3C3} "
        ]
      },
      pong: {
        interval: 80,
        frames: [
          "\u2590\u2802       \u258C",
          "\u2590\u2808       \u258C",
          "\u2590 \u2802      \u258C",
          "\u2590 \u2820      \u258C",
          "\u2590  \u2840     \u258C",
          "\u2590  \u2820     \u258C",
          "\u2590   \u2802    \u258C",
          "\u2590   \u2808    \u258C",
          "\u2590    \u2802   \u258C",
          "\u2590    \u2820   \u258C",
          "\u2590     \u2840  \u258C",
          "\u2590     \u2820  \u258C",
          "\u2590      \u2802 \u258C",
          "\u2590      \u2808 \u258C",
          "\u2590       \u2802\u258C",
          "\u2590       \u2820\u258C",
          "\u2590       \u2840\u258C",
          "\u2590      \u2820 \u258C",
          "\u2590      \u2802 \u258C",
          "\u2590     \u2808  \u258C",
          "\u2590     \u2802  \u258C",
          "\u2590    \u2820   \u258C",
          "\u2590    \u2840   \u258C",
          "\u2590   \u2820    \u258C",
          "\u2590   \u2802    \u258C",
          "\u2590  \u2808     \u258C",
          "\u2590  \u2802     \u258C",
          "\u2590 \u2820      \u258C",
          "\u2590 \u2840      \u258C",
          "\u2590\u2820       \u258C"
        ]
      },
      shark: {
        interval: 120,
        frames: [
          "\u2590|\\____________\u258C",
          "\u2590_|\\___________\u258C",
          "\u2590__|\\__________\u258C",
          "\u2590___|\\_________\u258C",
          "\u2590____|\\________\u258C",
          "\u2590_____|\\_______\u258C",
          "\u2590______|\\______\u258C",
          "\u2590_______|\\_____\u258C",
          "\u2590________|\\____\u258C",
          "\u2590_________|\\___\u258C",
          "\u2590__________|\\__\u258C",
          "\u2590___________|\\_\u258C",
          "\u2590____________|\\\u258C",
          "\u2590____________/|\u258C",
          "\u2590___________/|_\u258C",
          "\u2590__________/|__\u258C",
          "\u2590_________/|___\u258C",
          "\u2590________/|____\u258C",
          "\u2590_______/|_____\u258C",
          "\u2590______/|______\u258C",
          "\u2590_____/|_______\u258C",
          "\u2590____/|________\u258C",
          "\u2590___/|_________\u258C",
          "\u2590__/|__________\u258C",
          "\u2590_/|___________\u258C",
          "\u2590/|____________\u258C"
        ]
      },
      dqpb: {
        interval: 100,
        frames: [
          "d",
          "q",
          "p",
          "b"
        ]
      },
      weather: {
        interval: 100,
        frames: [
          "\u2600\uFE0F ",
          "\u2600\uFE0F ",
          "\u2600\uFE0F ",
          "\u{1F324} ",
          "\u26C5\uFE0F ",
          "\u{1F325} ",
          "\u2601\uFE0F ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u26C8 ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u2601\uFE0F ",
          "\u{1F325} ",
          "\u26C5\uFE0F ",
          "\u{1F324} ",
          "\u2600\uFE0F ",
          "\u2600\uFE0F "
        ]
      },
      christmas: {
        interval: 400,
        frames: [
          "\u{1F332}",
          "\u{1F384}"
        ]
      },
      grenade: {
        interval: 80,
        frames: [
          "\u060C  ",
          "\u2032  ",
          " \xB4 ",
          " \u203E ",
          "  \u2E0C",
          "  \u2E0A",
          "  |",
          "  \u204E",
          "  \u2055",
          " \u0DF4 ",
          "  \u2053",
          "   ",
          "   ",
          "   "
        ]
      },
      point: {
        interval: 125,
        frames: [
          "\u2219\u2219\u2219",
          "\u25CF\u2219\u2219",
          "\u2219\u25CF\u2219",
          "\u2219\u2219\u25CF",
          "\u2219\u2219\u2219"
        ]
      },
      layer: {
        interval: 150,
        frames: [
          "-",
          "=",
          "\u2261"
        ]
      },
      betaWave: {
        interval: 80,
        frames: [
          "\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1"
        ]
      },
      fingerDance: {
        interval: 160,
        frames: [
          "\u{1F918} ",
          "\u{1F91F} ",
          "\u{1F596} ",
          "\u270B ",
          "\u{1F91A} ",
          "\u{1F446} "
        ]
      },
      fistBump: {
        interval: 80,
        frames: [
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u3000\u{1F91C}\u3000\u3000\u{1F91B}\u3000 ",
          "\u3000\u3000\u{1F91C}\u{1F91B}\u3000\u3000 ",
          "\u3000\u{1F91C}\u2728\u{1F91B}\u3000\u3000 ",
          "\u{1F91C}\u3000\u2728\u3000\u{1F91B}\u3000 "
        ]
      },
      soccerHeader: {
        interval: 80,
        frames: [
          " \u{1F9D1}\u26BD\uFE0F       \u{1F9D1} ",
          "\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} ",
          "\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ",
          "\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ",
          "\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ",
          "\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ",
          "\u{1F9D1}       \u26BD\uFE0F\u{1F9D1}  ",
          "\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ",
          "\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ",
          "\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ",
          "\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ",
          "\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} "
        ]
      },
      mindblown: {
        interval: 160,
        frames: [
          "\u{1F610} ",
          "\u{1F610} ",
          "\u{1F62E} ",
          "\u{1F62E} ",
          "\u{1F626} ",
          "\u{1F626} ",
          "\u{1F627} ",
          "\u{1F627} ",
          "\u{1F92F} ",
          "\u{1F4A5} ",
          "\u2728 ",
          "\u3000 ",
          "\u3000 ",
          "\u3000 "
        ]
      },
      speaker: {
        interval: 160,
        frames: [
          "\u{1F508} ",
          "\u{1F509} ",
          "\u{1F50A} ",
          "\u{1F509} "
        ]
      },
      orangePulse: {
        interval: 100,
        frames: [
          "\u{1F538} ",
          "\u{1F536} ",
          "\u{1F7E0} ",
          "\u{1F7E0} ",
          "\u{1F536} "
        ]
      },
      bluePulse: {
        interval: 100,
        frames: [
          "\u{1F539} ",
          "\u{1F537} ",
          "\u{1F535} ",
          "\u{1F535} ",
          "\u{1F537} "
        ]
      },
      orangeBluePulse: {
        interval: 100,
        frames: [
          "\u{1F538} ",
          "\u{1F536} ",
          "\u{1F7E0} ",
          "\u{1F7E0} ",
          "\u{1F536} ",
          "\u{1F539} ",
          "\u{1F537} ",
          "\u{1F535} ",
          "\u{1F535} ",
          "\u{1F537} "
        ]
      },
      timeTravel: {
        interval: 100,
        frames: [
          "\u{1F55B} ",
          "\u{1F55A} ",
          "\u{1F559} ",
          "\u{1F558} ",
          "\u{1F557} ",
          "\u{1F556} ",
          "\u{1F555} ",
          "\u{1F554} ",
          "\u{1F553} ",
          "\u{1F552} ",
          "\u{1F551} ",
          "\u{1F550} "
        ]
      },
      aesthetic: {
        interval: 80,
        frames: [
          "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0",
          "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1"
        ]
      }
    };
  }
});

// node_modules/.pnpm/cli-spinners@2.6.0/node_modules/cli-spinners/index.js
var require_cli_spinners = __commonJS({
  "node_modules/.pnpm/cli-spinners@2.6.0/node_modules/cli-spinners/index.js"(exports2, module2) {
    "use strict";
    var spinners = Object.assign({}, require_spinners());
    var spinnersList = Object.keys(spinners);
    Object.defineProperty(spinners, "random", {
      get() {
        const randomIndex = Math.floor(Math.random() * spinnersList.length);
        const spinnerName = spinnersList[randomIndex];
        return spinners[spinnerName];
      }
    });
    module2.exports = spinners;
    module2.exports.default = spinners;
  }
});

// node_modules/.pnpm/ink-spinner@4.0.2_ink@3.0.9+react@17.0.2/node_modules/ink-spinner/build/index.js
var require_build3 = __commonJS({
  "node_modules/.pnpm/ink-spinner@4.0.2_ink@3.0.9+react@17.0.2/node_modules/ink-spinner/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var React4 = require_react();
    var react_1 = require_react();
    var ink_1 = require_build2();
    var cli_spinners_1 = require_cli_spinners();
    var Spinner = ({ type = "dots" }) => {
      const [frame, setFrame] = react_1.useState(0);
      const spinner = cli_spinners_1.default[type];
      react_1.useEffect(() => {
        const timer = setInterval(() => {
          setFrame((previousFrame) => {
            const isLastFrame = previousFrame === spinner.frames.length - 1;
            return isLastFrame ? 0 : previousFrame + 1;
          });
        }, spinner.interval);
        return () => {
          clearInterval(timer);
        };
      }, [spinner]);
      return React4.createElement(ink_1.Text, null, spinner.frames[frame]);
    };
    exports2.default = Spinner;
  }
});

// node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/Task.js
var require_Task = __commonJS({
  "node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/Task.js"(exports2, module2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var react_1 = __importStar(require_react());
    var prop_types_1 = __importDefault(require_prop_types());
    var ink_1 = require_build2();
    var figures_1 = __importDefault(require_figures());
    var ink_spinner_1 = __importDefault(require_build3());
    var cli_spinners_1 = __importDefault(require_cli_spinners());
    var possibleSpinnerNames = Object.keys(cli_spinners_1.default).filter((spinnerName) => spinnerName !== "default");
    var getSymbol = (state) => {
      if (state === "warning") {
        return react_1.default.createElement(ink_1.Text, { color: "yellow" }, figures_1.default.warning);
      }
      if (state === "error") {
        return react_1.default.createElement(ink_1.Text, { color: "red" }, figures_1.default.cross);
      }
      if (state === "success") {
        return react_1.default.createElement(ink_1.Text, { color: "green" }, figures_1.default.tick);
      }
      if (state === "pending") {
        return react_1.default.createElement(ink_1.Text, { color: "gray" }, figures_1.default.squareSmallFilled);
      }
      return " ";
    };
    var getPointer = (state) => react_1.default.createElement(ink_1.Text, { color: state === "error" ? "red" : "yellow" }, figures_1.default.pointer);
    var Task2 = ({ label, state, status, output, spinnerType, isExpanded, children }) => {
      const childrenArray = react_1.Children.toArray(children);
      const listChildren = childrenArray.filter((node) => react_1.isValidElement(node));
      let icon = state === "loading" ? react_1.default.createElement(ink_1.Text, { color: "yellow" }, react_1.default.createElement(ink_spinner_1.default, { type: spinnerType })) : getSymbol(state);
      if (isExpanded) {
        icon = getPointer(state);
      }
      return react_1.default.createElement(ink_1.Box, { flexDirection: "column" }, react_1.default.createElement(ink_1.Box, null, react_1.default.createElement(ink_1.Box, { marginRight: 1 }, react_1.default.createElement(ink_1.Text, null, icon)), react_1.default.createElement(ink_1.Text, null, label), status ? react_1.default.createElement(ink_1.Box, { marginLeft: 1 }, react_1.default.createElement(ink_1.Text, { dimColor: true }, "[", status, "]")) : void 0), output ? react_1.default.createElement(ink_1.Box, { marginLeft: 2 }, react_1.default.createElement(ink_1.Text, { color: "gray" }, `${figures_1.default.arrowRight} ${output}`)) : void 0, isExpanded && listChildren.length > 0 && react_1.default.createElement(ink_1.Box, { flexDirection: "column", marginLeft: 2 }, listChildren));
    };
    Task2.propTypes = {
      children: prop_types_1.default.oneOfType([
        prop_types_1.default.arrayOf(prop_types_1.default.element),
        prop_types_1.default.element
      ]),
      label: prop_types_1.default.string.isRequired,
      state: prop_types_1.default.oneOf(["pending", "loading", "success", "warning", "error"]),
      status: prop_types_1.default.string,
      output: prop_types_1.default.string,
      spinnerType: prop_types_1.default.oneOf(possibleSpinnerNames),
      isExpanded: prop_types_1.default.bool
    };
    Task2.defaultProps = {
      state: "pending",
      spinnerType: "dots"
    };
    module2.exports = Task2;
  }
});

// node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/ink-task-list@1.1.0_ink@3.0.9+react@17.0.2/node_modules/ink-task-list/dist/index.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Task = exports2.TaskList = void 0;
    var TaskList_1 = require_TaskList();
    Object.defineProperty(exports2, "TaskList", { enumerable: true, get: function() {
      return __importDefault(TaskList_1).default;
    } });
    var Task_1 = require_Task();
    Object.defineProperty(exports2, "Task", { enumerable: true, get: function() {
      return __importDefault(Task_1).default;
    } });
  }
});

// node_modules/.pnpm/valtio@1.2.2_react@17.0.2/node_modules/valtio/esm/index.mjs
var import_react = __toModule(require_react());

// node_modules/.pnpm/proxy-compare@2.0.2/node_modules/proxy-compare/dist/index.modern.mjs
var e = Symbol();
var t = Symbol();
var r = Symbol();
var n = Object.getPrototypeOf;
var o = new WeakMap();
var s = (e2) => e2 && (o.has(e2) ? o.get(e2) : n(e2) === Object.prototype || n(e2) === Array.prototype);
var c = (e2) => typeof e2 == "object" && e2 !== null;
var l = (n2, o2) => {
  let s2 = false;
  const c2 = (e2, t2) => {
    if (!s2) {
      let r2 = e2.a.get(n2);
      r2 || (r2 = new Set(), e2.a.set(n2, r2)), r2.add(t2);
    }
  }, l2 = { f: o2, get(e2, t2) {
    return t2 === r ? n2 : (c2(this, t2), i(e2[t2], this.a, this.c));
  }, has(e2, r2) {
    return r2 === t ? (s2 = true, this.a.delete(n2), true) : (c2(this, r2), r2 in e2);
  }, ownKeys(t2) {
    return c2(this, e), Reflect.ownKeys(t2);
  } };
  return o2 && (l2.set = l2.deleteProperty = () => false), l2;
};
var i = (e2, t2, o2) => {
  if (!s(e2))
    return e2;
  const c2 = e2[r] || e2, i2 = ((e3) => Object.isFrozen(e3) || Object.values(Object.getOwnPropertyDescriptors(e3)).some((e4) => !e4.writable))(c2);
  let u2 = o2 && o2.get(c2);
  return u2 && u2.f === i2 || (u2 = l(c2, i2), u2.p = new Proxy(i2 ? ((e3) => {
    if (Array.isArray(e3))
      return Array.from(e3);
    const t3 = Object.getOwnPropertyDescriptors(e3);
    return Object.values(t3).forEach((e4) => {
      e4.configurable = true;
    }), Object.create(n(e3), t3);
  })(c2) : c2, u2), o2 && o2.set(c2, u2)), u2.a = t2, u2.c = o2, u2.p;
};
var u = (e2, t2) => {
  const r2 = Reflect.ownKeys(e2), n2 = Reflect.ownKeys(t2);
  return r2.length !== n2.length || r2.some((e3, t3) => e3 !== n2[t3]);
};
var a = (t2, r2, n2, o2) => {
  if (Object.is(t2, r2))
    return false;
  if (!c(t2) || !c(r2))
    return true;
  const s2 = n2.get(t2);
  if (!s2)
    return true;
  if (o2) {
    const e2 = o2.get(t2);
    if (e2 && e2.n === r2)
      return e2.g;
    o2.set(t2, { n: r2, g: false });
  }
  let l2 = null;
  for (const c2 of s2) {
    const s3 = c2 === e ? u(t2, r2) : a(t2[c2], r2[c2], n2, o2);
    if (s3 !== true && s3 !== false || (l2 = s3), l2)
      break;
  }
  return l2 === null && (l2 = true), o2 && o2.set(t2, { n: r2, g: l2 }), l2;
};
var y = (e2) => s(e2) && e2[r] || null;
var b = (e2, t2 = true) => {
  o.set(e2, t2);
};
var g = (e2, t2) => {
  const r2 = [], n2 = (e3, o2) => {
    const s2 = t2.get(e3);
    s2 ? s2.forEach((t3) => {
      n2(e3[t3], o2 ? [...o2, t3] : [t3]);
    }) : o2 && r2.push(o2);
  };
  return n2(e2), r2;
};

// node_modules/.pnpm/valtio@1.2.2_react@17.0.2/node_modules/valtio/esm/vanilla.mjs
var VERSION = Symbol();
var LISTENERS = Symbol();
var SNAPSHOT = Symbol();
var PROMISE_RESULT = Symbol();
var PROMISE_ERROR = Symbol();
var refSet = new WeakSet();
var isSupportedObject = (x) => typeof x === "object" && x !== null && (Array.isArray(x) || !x[Symbol.iterator]) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer);
var proxyCache = new WeakMap();
var globalVersion = 1;
var snapshotCache = new WeakMap();
var proxy = (initialObject = {}) => {
  if (!isSupportedObject(initialObject)) {
    throw new Error("unsupported object type");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version = globalVersion;
  const listeners = new Set();
  const notifyUpdate = (op, nextVersion) => {
    if (!nextVersion) {
      nextVersion = ++globalVersion;
    }
    if (version !== nextVersion) {
      version = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  const propListeners = new Map();
  const getPropListener = (prop) => {
    let propListener = propListeners.get(prop);
    if (!propListener) {
      propListener = (op, nextVersion) => {
        const newOp = [...op];
        newOp[1] = [prop, ...newOp[1]];
        notifyUpdate(newOp, nextVersion);
      };
      propListeners.set(prop, propListener);
    }
    return propListener;
  };
  const popPropListener = (prop) => {
    const propListener = propListeners.get(prop);
    propListeners.delete(prop);
    return propListener;
  };
  const createSnapshot = (target, receiver) => {
    const cache = snapshotCache.get(receiver);
    if ((cache == null ? void 0 : cache[0]) === version) {
      return cache[1];
    }
    const snapshot2 = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
    b(snapshot2, true);
    snapshotCache.set(receiver, [version, snapshot2]);
    Reflect.ownKeys(target).forEach((key) => {
      const value = target[key];
      if (refSet.has(value)) {
        b(value, false);
        snapshot2[key] = value;
      } else if (!isSupportedObject(value)) {
        snapshot2[key] = value;
      } else if (value instanceof Promise) {
        if (PROMISE_RESULT in value) {
          snapshot2[key] = value[PROMISE_RESULT];
        } else {
          const errorOrPromise = value[PROMISE_ERROR] || value;
          Object.defineProperty(snapshot2, key, {
            get() {
              if (PROMISE_RESULT in value) {
                return value[PROMISE_RESULT];
              }
              throw errorOrPromise;
            }
          });
        }
      } else if (value[VERSION]) {
        snapshot2[key] = value[SNAPSHOT];
      } else {
        snapshot2[key] = value;
      }
    });
    Object.freeze(snapshot2);
    return snapshot2;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const proxyObject = new Proxy(baseObject, {
    get(target, prop, receiver) {
      if (prop === VERSION) {
        return version;
      }
      if (prop === LISTENERS) {
        return listeners;
      }
      if (prop === SNAPSHOT) {
        return createSnapshot(target, receiver);
      }
      return target[prop];
    },
    deleteProperty(target, prop) {
      const prevValue = target[prop];
      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];
      if (childListeners) {
        childListeners.delete(popPropListener(prop));
      }
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value) {
      var _a;
      const prevValue = target[prop];
      if (Object.is(prevValue, value)) {
        return true;
      }
      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];
      if (childListeners) {
        childListeners.delete(popPropListener(prop));
      }
      if (refSet.has(value) || !isSupportedObject(value) || ((_a = Object.getOwnPropertyDescriptor(target, prop)) == null ? void 0 : _a.set)) {
        target[prop] = value;
      } else if (value instanceof Promise) {
        target[prop] = value.then((v) => {
          target[prop][PROMISE_RESULT] = v;
          notifyUpdate(["resolve", [prop], v]);
          return v;
        }).catch((e2) => {
          target[prop][PROMISE_ERROR] = e2;
          notifyUpdate(["reject", [prop], e2]);
        });
      } else {
        value = y(value) || value;
        if (value[LISTENERS]) {
          target[prop] = value;
        } else {
          target[prop] = proxy(value);
        }
        target[prop][LISTENERS].add(getPropListener(prop));
      }
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  });
  proxyCache.set(initialObject, proxyObject);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(initialObject, key);
    if (desc.get || desc.set) {
      Object.defineProperty(baseObject, key, desc);
    } else {
      proxyObject[key] = initialObject[key];
    }
  });
  return proxyObject;
};
var getVersion = (proxyObject) => {
  if (typeof process === "object" && process.env.NODE_ENV !== "production" && !(proxyObject == null ? void 0 : proxyObject[VERSION])) {
    throw new Error("Please use proxy object");
  }
  return proxyObject[VERSION];
};
var subscribe = (proxyObject, callback, notifyInSync) => {
  if (typeof process === "object" && process.env.NODE_ENV !== "production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
    throw new Error("Please use proxy object");
  }
  let pendingVersion = 0;
  const ops = [];
  const listener = (op, nextVersion) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    pendingVersion = nextVersion;
    Promise.resolve().then(() => {
      if (nextVersion === pendingVersion) {
        callback(ops.splice(0));
      }
    });
  };
  proxyObject[LISTENERS].add(listener);
  return () => {
    proxyObject[LISTENERS].delete(listener);
  };
};
var snapshot = (proxyObject) => {
  if (typeof process === "object" && process.env.NODE_ENV !== "production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
    throw new Error("Please use proxy object");
  }
  return proxyObject[SNAPSHOT];
};

// node_modules/.pnpm/valtio@1.2.2_react@17.0.2/node_modules/valtio/esm/index.mjs
var TARGET = "_uMS_T";
var GET_VERSION = "_uMS_V";
var createMutableSource = (target, getVersion2) => ({
  [TARGET]: target,
  [GET_VERSION]: getVersion2
});
var useMutableSource = (source, getSnapshot, subscribe2) => {
  const lastVersion = (0, import_react.useRef)();
  const currentVersion = source[GET_VERSION](source[TARGET]);
  const [state, setState] = (0, import_react.useState)(() => [
    source,
    getSnapshot,
    subscribe2,
    currentVersion,
    getSnapshot(source[TARGET])
  ]);
  let currentSnapshot = state[4];
  if (state[0] !== source || state[1] !== getSnapshot || state[2] !== subscribe2) {
    currentSnapshot = getSnapshot(source[TARGET]);
    setState([
      source,
      getSnapshot,
      subscribe2,
      currentVersion,
      currentSnapshot
    ]);
  } else if (currentVersion !== state[3] && currentVersion !== lastVersion.current) {
    currentSnapshot = getSnapshot(source[TARGET]);
    if (!Object.is(currentSnapshot, state[4])) {
      setState([
        source,
        getSnapshot,
        subscribe2,
        currentVersion,
        currentSnapshot
      ]);
    }
  }
  (0, import_react.useEffect)(() => {
    let didUnsubscribe = false;
    const checkForUpdates = () => {
      if (didUnsubscribe) {
        return;
      }
      try {
        const nextSnapshot = getSnapshot(source[TARGET]);
        const nextVersion = source[GET_VERSION](source[TARGET]);
        lastVersion.current = nextVersion;
        setState((prev) => {
          if (prev[0] !== source || prev[1] !== getSnapshot || prev[2] !== subscribe2) {
            return prev;
          }
          if (Object.is(prev[4], nextSnapshot)) {
            return prev;
          }
          return [
            prev[0],
            prev[1],
            prev[2],
            nextVersion,
            nextSnapshot
          ];
        });
      } catch (e2) {
        setState((prev) => [...prev]);
      }
    };
    const unsubscribe = subscribe2(source[TARGET], checkForUpdates);
    checkForUpdates();
    return () => {
      didUnsubscribe = true;
      unsubscribe();
    };
  }, [source, getSnapshot, subscribe2]);
  return currentSnapshot;
};
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react.useEffect : import_react.useLayoutEffect;
var useAffectedDebugValue = (state, affected) => {
  const pathList = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    pathList.current = g(state, affected);
  });
  (0, import_react.useDebugValue)(pathList.current);
};
var mutableSourceCache = new WeakMap();
var getMutableSource = (proxyObject) => {
  if (!mutableSourceCache.has(proxyObject)) {
    mutableSourceCache.set(proxyObject, createMutableSource(proxyObject, getVersion));
  }
  return mutableSourceCache.get(proxyObject);
};
var useSnapshot = (proxyObject, options) => {
  const forceUpdate = (0, import_react.useReducer)((c2) => c2 + 1, 0)[1];
  const affected = new WeakMap();
  const lastAffected = (0, import_react.useRef)();
  const prevSnapshot = (0, import_react.useRef)();
  const lastSnapshot = (0, import_react.useRef)();
  useIsomorphicLayoutEffect(() => {
    lastSnapshot.current = prevSnapshot.current = snapshot(proxyObject);
  }, [proxyObject]);
  useIsomorphicLayoutEffect(() => {
    lastAffected.current = affected;
    if (prevSnapshot.current !== lastSnapshot.current && a(prevSnapshot.current, lastSnapshot.current, affected, new WeakMap())) {
      prevSnapshot.current = lastSnapshot.current;
      forceUpdate();
    }
  });
  const notifyInSync = options == null ? void 0 : options.sync;
  const sub = (0, import_react.useCallback)((proxyObject2, cb) => subscribe(proxyObject2, () => {
    const nextSnapshot = snapshot(proxyObject2);
    lastSnapshot.current = nextSnapshot;
    try {
      if (lastAffected.current && !a(prevSnapshot.current, nextSnapshot, lastAffected.current, new WeakMap())) {
        return;
      }
    } catch (e2) {
    }
    prevSnapshot.current = nextSnapshot;
    cb();
  }, notifyInSync), [notifyInSync]);
  const currSnapshot = useMutableSource(getMutableSource(proxyObject), snapshot, sub);
  if (typeof process === "object" && process.env.NODE_ENV !== "production") {
    useAffectedDebugValue(currSnapshot, affected);
  }
  const proxyCache2 = (0, import_react.useMemo)(() => new WeakMap(), []);
  return i(currSnapshot, affected, proxyCache2);
};

// node_modules/.pnpm/indent-string@5.0.0/node_modules/indent-string/index.js
function indentString(string, count = 1, options = {}) {
  const {
    indent = " ",
    includeEmptyLines = false
  } = options;
  if (typeof string !== "string") {
    throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
  }
  if (typeof count !== "number") {
    throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
  }
  if (count < 0) {
    throw new RangeError(`Expected \`count\` to be at least 0, got \`${count}\``);
  }
  if (typeof indent !== "string") {
    throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof indent}\``);
  }
  if (count === 0) {
    return string;
  }
  const regex = includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string.replace(regex, indent.repeat(count));
}

// node_modules/.pnpm/clean-stack@4.1.0/node_modules/clean-stack/index.js
var import_os = __toModule(require("os"));

// node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/.pnpm/clean-stack@4.1.0/node_modules/clean-stack/index.js
var extractPathRegex = /\s+at.*[(\s](.*)\)?/;
var pathRegex = /^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;
var homeDir = typeof import_os.default.homedir === "undefined" ? "" : import_os.default.homedir().replace(/\\/g, "/");
function cleanStack(stack, { pretty = false, basePath } = {}) {
  const basePathRegex = basePath && new RegExp(`(at | \\()${escapeStringRegexp(basePath.replace(/\\/g, "/"))}`, "g");
  if (typeof stack !== "string") {
    return void 0;
  }
  return stack.replace(/\\/g, "/").split("\n").filter((line) => {
    const pathMatches = line.match(extractPathRegex);
    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }
    const match = pathMatches[1];
    if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar")) {
      return false;
    }
    return !pathRegex.test(match);
  }).filter((line) => line.trim() !== "").map((line) => {
    if (basePathRegex) {
      line = line.replace(basePathRegex, "$1");
    }
    if (pretty) {
      line = line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, "~")));
    }
    return line;
  }).join("\n");
}

// node_modules/.pnpm/aggregate-error@4.0.0/node_modules/aggregate-error/index.js
var cleanInternalStack = (stack) => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
var _errors;
var AggregateError = class extends Error {
  constructor(errors) {
    if (!Array.isArray(errors)) {
      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
    }
    errors = errors.map((error) => {
      if (error instanceof Error) {
        return error;
      }
      if (error !== null && typeof error === "object") {
        return Object.assign(new Error(error.message), error);
      }
      return new Error(error);
    });
    let message = errors.map((error) => {
      return typeof error.stack === "string" ? cleanInternalStack(cleanStack(error.stack)) : String(error);
    }).join("\n");
    message = "\n" + indentString(message, 4);
    super(message);
    __privateAdd(this, _errors, void 0);
    __publicField(this, "name", "AggregateError");
    __privateSet(this, _errors, errors);
  }
  get errors() {
    return __privateGet(this, _errors).slice();
  }
};
_errors = new WeakMap();

// node_modules/.pnpm/p-map@5.1.0/node_modules/p-map/index.js
async function pMap(iterable, mapper, {
  concurrency = Number.POSITIVE_INFINITY,
  stopOnError = true
} = {}) {
  return new Promise((resolve, reject) => {
    if (typeof mapper !== "function") {
      throw new TypeError("Mapper function is required");
    }
    if (!((Number.isSafeInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
    }
    const result = [];
    const errors = [];
    const skippedIndexes = [];
    const iterator = iterable[Symbol.iterator]();
    let isRejected = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;
    const next = () => {
      if (isRejected) {
        return;
      }
      const nextItem = iterator.next();
      const index = currentIndex;
      currentIndex++;
      if (nextItem.done) {
        isIterableDone = true;
        if (resolvingCount === 0) {
          if (!stopOnError && errors.length > 0) {
            reject(new AggregateError(errors));
          } else {
            for (const skippedIndex of skippedIndexes) {
              result.splice(skippedIndex, 1);
            }
            resolve(result);
          }
        }
        return;
      }
      resolvingCount++;
      (async () => {
        try {
          const element = await nextItem.value;
          if (isRejected) {
            return;
          }
          const value = await mapper(element, index);
          if (value === pMapSkip) {
            skippedIndexes.push(index);
          } else {
            result[index] = value;
          }
          resolvingCount--;
          next();
        } catch (error) {
          if (stopOnError) {
            isRejected = true;
            reject(error);
          } else {
            errors.push(error);
            resolvingCount--;
            next();
          }
        }
      })();
    };
    for (let index = 0; index < concurrency; index++) {
      next();
      if (isIterableDone) {
        break;
      }
    }
  });
}
var pMapSkip = Symbol("skip");

// src/utils.ts
function arrayAdd(array, element) {
  const index = array.push(element) - 1;
  return array[index];
}
function arrayRemove(array, element) {
  const index = array.indexOf(element);
  if (index > -1) {
    array.splice(index, 1);
  }
}

// src/components/CreateApp.tsx
var import_ink = __toModule(require_build2());
var import_react4 = __toModule(require_react());

// src/components/TaskListApp.tsx
var import_react3 = __toModule(require_react());
var import_ink_task_list2 = __toModule(require_dist());

// src/components/TaskListItem.tsx
var import_react2 = __toModule(require_react());
var import_ink_task_list = __toModule(require_dist());
var TaskListItem = ({
  task: task2
}) => {
  const childTasks = task2.children.length > 0 ? task2.children.map((childTask, index) => /* @__PURE__ */ import_react2.default.createElement(TaskListItem, {
    key: index,
    task: childTask
  })) : void 0;
  return /* @__PURE__ */ import_react2.default.createElement(import_ink_task_list.Task, {
    state: task2.state,
    label: task2.title,
    status: task2.status,
    output: task2.output,
    isExpanded: (childTasks == null ? void 0 : childTasks.length) > 0
  }, childTasks);
};
var TaskListItem_default = TaskListItem;

// src/components/TaskListApp.tsx
var TaskListApp = ({
  taskList
}) => {
  const state = useSnapshot(taskList);
  return /* @__PURE__ */ import_react3.default.createElement(import_ink_task_list2.TaskList, null, state.map((task2, index) => /* @__PURE__ */ import_react3.default.createElement(TaskListItem_default, {
    key: index,
    task: task2
  })));
};
var TaskListApp_default = TaskListApp;

// src/components/CreateApp.tsx
function createApp(taskList) {
  const inkApp = (0, import_ink.render)(/* @__PURE__ */ import_react4.default.createElement(TaskListApp_default, {
    taskList
  }));
  return {
    remove() {
      inkApp.rerender(null);
      inkApp.unmount();
      inkApp.clear();
      inkApp.cleanup();
    }
  };
}

// src/index.ts
var createTaskInnerApi = (taskState) => {
  const api = {
    task: createTaskFunction(taskState.children),
    setTitle(title) {
      taskState.title = title;
    },
    setStatus(status) {
      taskState.status = status;
    },
    setOutput(output) {
      taskState.output = typeof output === "string" ? output : "message" in output ? output.message : "";
    },
    setWarning(warning) {
      taskState.state = "warning";
      api.setOutput(warning);
    },
    setError(error) {
      taskState.state = "error";
      api.setOutput(error);
    }
  };
  return api;
};
var app;
function registerTask(taskList, taskTitle, taskFunction) {
  if (!app) {
    app = createApp(taskList);
    taskList.isRoot = true;
  }
  const taskState = arrayAdd(taskList, {
    title: taskTitle,
    state: "pending",
    children: []
  });
  return {
    async run() {
      const api = createTaskInnerApi(taskState);
      taskState.state = "loading";
      let taskResult;
      try {
        taskResult = await taskFunction(api);
      } catch (error) {
        api.setError(error);
        throw error;
      }
      if (taskState.state === "loading") {
        taskState.state = "success";
      }
      return taskResult;
    },
    clear() {
      arrayRemove(taskList, taskState);
      if (taskList.isRoot && taskList.length === 0) {
        app.remove();
        app = null;
      }
    }
  };
}
function createTaskFunction(taskList) {
  async function task2(title, taskFunction) {
    const taskState = registerTask(taskList, title, taskFunction);
    const result = await taskState.run();
    return Object.assign(taskState, { result });
  }
  const createTask = (title, taskFunction) => registerTask(taskList, title, taskFunction);
  task2.group = async (createTasks, options) => {
    const tasksQueue = createTasks(createTask);
    const results = await pMap(tasksQueue, async (taskApi) => await taskApi.run(), __spreadValues({
      concurrency: 1
    }, options));
    return {
      results,
      clear() {
        for (const taskApi of tasksQueue) {
          taskApi.clear();
        }
      }
    };
  };
  return task2;
}
var rootTaskList = proxy([]);
var task = createTaskFunction(rootTaskList);
module.exports = task;
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! promise-polyfill 2.0.1 */
/** @license React v0.18.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.18.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.18.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.24.0
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.24.0
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React vundefined
 * react-debug-tools.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React vundefined
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React vundefined
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
